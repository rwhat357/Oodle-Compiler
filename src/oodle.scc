Package cps450.oodle;

 /********************************************************************/
 Helpers
 /********************************************************************/
  cr = 13;
  lf = 10;
  tab = 9;
  
  digit = ['0'..'9'];  
  octal = ['0'..'7'];
  letter = ['a'..'z'] | ['A'..'Z'];
  printable = [32..127];
  
  negation = '-';
  underscore = '_';
  
  blank = ' ' | tab;  
  eol = lf | cr lf;
  
 /********************************************************************/
 Tokens
 /********************************************************************/
   
  // keywords
  boolean = 'boolean';
  begin = 'begin'; 
  class_id = 'class'; // class_id because SableCC doesn't accept "class" token
  else = 'else';
  end = 'end';
  false = 'false';
  from = 'from';
  if = 'if';
  inherits = 'inherits';
  int = 'int';
  is = 'is';
  loop = 'loop';
  me = 'me';
  new = 'new';
  null = 'null';
  string = 'string'; 
  then = 'then';
  true = 'true';  
  while = 'while';
  
  // keyword logical operators 
  and = 'and';
  or = 'or';
  not = 'not';

  // predefined operator
  op_cat = '&';
  op_plus = '+';
  op_minus = '-';
  op_mult = '*';
  op_div = '/';
 
  op_gt   = '>' ;
  op_gteq = '>=';
  op_eq   = '=' ;
  
  // assignment
  op_assign =    ':=';	
  
  // miscellaneous
  l_par =     '(' ;
  r_par =     ')' ;
  l_brkt = '[' ;
  r_brkt = ']' ;
  comma =     ',' ;
  semicolon = ';' ;  
  colon =	  ':' ;
  period =    '.' ;
  
  // comments start with ~ and end with "\n"
  comment = '~' [printable - '~']* ('~')?; 
  
  // an identifier starts with a letter and
  // is followed optional letters, digits, and underscores
  id = (underscore | letter) ( digit | letter | underscore)*;

  // integer literals 
  // A number is an optional
  // sign "-", followed by 1 or more digits.
  int_lit = negation? digit+;

  // string literals 
  str_lit = '"' (([printable - ['"' + '\']]) | ('\' ((octal octal octal) | 't' | 'n' | 'f' | 'r' | '"' | '\')))* '"';
  
  // unterminated string literal
  // string whose closing quote is not found by the end of the current input line
  unterm_str_lit= '"' [printable-'"']*;
  
  // string which contains illegal escape sequences 
  illegal_str_lit = '"' ([printable - '"'] | '\"')* '"';
   
  // others
  blanks = (blank)+;
  empty_line = blank* eol;
  cont = '_' blank* eol;
  
  // all unmatched strings by the above tokens
  // any character of the input file that is not a part of one of the lexical components listed
  illegal_char = [0..255];


  /********************************************************************/
  Ignored Tokens 
  /********************************************************************/
  
   comment, blanks, cont;
  
  /********************************************************************/
  Productions 
  /********************************************************************/

  /************ start definition ************/
   start = 				[n1]:newlines? class_def class_defs* [n2]:newlines?;
   newlines = 			T.empty_line+ ;
  
  /************ class definiton ************/
   class_defs = 		newlines class_def ;

   class_def = 			T.class_id [stid]:T.id inherits_from? T.is newlines 
   							var_decl* 
   							method_decl* 
   						T.end [endid]:T.id;

   inherits_from = 		T.inherits T.from T.id;
  
  /************ variable declaration ************/
   var_decl = 			T.id part_type?  part_exp? newlines;

   part_type = 			T.colon type;

   part_exp = 			T.op_assign expr;
  
  /************ method declaration ************/
   method_decl = 		[stid]:T.id T.l_par argument_decl_list? T.r_par part_type? T.is [n1]:newlines
                  			var_decl* 
                  			T.begin [n2]:newlines 
                  				stmt* T.end 
              				[endid]:T.id [n3]:newlines;

   argument_decl_list = arg_decl arg_decl_tail* ;

   arg_decl_tail = 		 T.semicolon arg_decl;

   arg_decl = 			 T.id T.colon type;
                        

  /************ type production ************/
   type = 				   {int} T.int
					  	 | {string} T.string
					  	 | {boolean} T.boolean
					  	 | {id} T.id
					  	 | {arr} type T.l_brkt expr? T.r_brkt;

  /************ statement declaration ************/
   stmt = 				  {assign} T.id part_arr_inx* T.op_assign expr newlines
					  	| {if} [i1]:T.if expr T.then [n1]:newlines stmt* part_else? T.end [i2]:T.if [n2]:newlines
					  	| {loop} [l1]:T.loop T.while expr [n1]:newlines stmt* T.end [l2]:T.loop [n2]:newlines
					   	| {call} part_obj? T.id T.l_par expr_list? T.r_par newlines;

   part_else = 			T.else newlines stmt*;
		
   part_obj = 			expr9 T.period;
  
  /************ expressions declaration ************/
   expr_list = 			expr expr_list_tail* ;

   expr_list_tail = 	T.comma expr ;

   expr = 				  {or}     [starts]:expr T.or [ends]:expr1
       					| {other}  [e]:expr1 ;

   expr1 = 				  {and}   [starts]:expr1 T.and [ends]:expr2
        				| {other} [e]:expr2 ;
        

   expr2  = 			  {eq}    [starts]:expr3 T.op_eq [ends]:expr3
				        | {gt_eq} [starts]:expr3 T.op_gteq [ends]:expr3
				        | {gt}    [stars]:expr3 T.op_gt [ends]:expr3
				        | {other} [e]:expr3 ;
         

   expr3 = 				  {cat}    [starts]:expr3 T.op_cat [ends]:expr4
       					| {other}  [e]:expr4 ;
       

   expr4 = 				  {add}   [starts]:expr4 T.op_plus [ends]:expr5
				        | {sub}   [starts]:expr4 T.op_minus [ends]:expr5
				        | {other} [e]:expr5 ;
        


   expr5 = 				  {mult}  [starts]:expr5 T.op_mult [ends]:expr6
				        | {div}   [starts]:expr5 T.op_div [ends]:expr6
				        | {other} [e]:expr6 ;
        

   expr6 = 				  {neg}   T.op_minus [e]:expr9
				        | {pos}   T.op_plus  [e]:expr9
				        | {not}   T.not      [e]:expr9
				        | {other} [e]:expr9 ;
				        

   expr9 = 				  {id}   [e]:T.id
				        | {lit}  [e]:lit
				        | {me} T.me
				        | {par}  T.l_par [e]:expr T.r_par
				        | {new} T.new type
				        | {call} part_obj? T.id T.l_par expr_list? T.r_par
				        | {arr_inx} [quart]:T.id part_arr_inx+;

   part_arr_inx = 		T.l_brkt expr T.r_brkt;


   lit = 			      {int}   [e]:T.int_lit
					    | {str}   [e]:T.str_lit
					    | {true}  [e]:T.true
					    | {false} [e]:T.false
					    | {null_lit} T.null ;
					    