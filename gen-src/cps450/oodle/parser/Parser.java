/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.parser;

import cps450.oodle.lexer.*;
import cps450.oodle.node.*;
import cps450.oodle.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PStart node1 = (PStart) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAstart1Start */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAstart2Start */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce AAstart3Start */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list, false);
            }
            break;
            case 3: /* reduce AAstart4Start */
            {
                ArrayList<Object> list = new3();
                push(goTo(0), list, false);
            }
            break;
            case 4: /* reduce AAstart5Start */
            {
                ArrayList<Object> list = new4();
                push(goTo(0), list, false);
            }
            break;
            case 5: /* reduce AAstart6Start */
            {
                ArrayList<Object> list = new5();
                push(goTo(0), list, false);
            }
            break;
            case 6: /* reduce AAstart7Start */
            {
                ArrayList<Object> list = new6();
                push(goTo(0), list, false);
            }
            break;
            case 7: /* reduce AAstart8Start */
            {
                ArrayList<Object> list = new7();
                push(goTo(0), list, false);
            }
            break;
            case 8: /* reduce ANewlines */
            {
                ArrayList<Object> list = new8();
                push(goTo(1), list, false);
            }
            break;
            case 9: /* reduce AClassDefs */
            {
                ArrayList<Object> list = new9();
                push(goTo(2), list, false);
            }
            break;
            case 10: /* reduce AAclassdef1ClassDef */
            {
                ArrayList<Object> list = new10();
                push(goTo(3), list, false);
            }
            break;
            case 11: /* reduce AAclassdef2ClassDef */
            {
                ArrayList<Object> list = new11();
                push(goTo(3), list, false);
            }
            break;
            case 12: /* reduce AAclassdef3ClassDef */
            {
                ArrayList<Object> list = new12();
                push(goTo(3), list, false);
            }
            break;
            case 13: /* reduce AAclassdef4ClassDef */
            {
                ArrayList<Object> list = new13();
                push(goTo(3), list, false);
            }
            break;
            case 14: /* reduce AAclassdef5ClassDef */
            {
                ArrayList<Object> list = new14();
                push(goTo(3), list, false);
            }
            break;
            case 15: /* reduce AAclassdef6ClassDef */
            {
                ArrayList<Object> list = new15();
                push(goTo(3), list, false);
            }
            break;
            case 16: /* reduce AAclassdef7ClassDef */
            {
                ArrayList<Object> list = new16();
                push(goTo(3), list, false);
            }
            break;
            case 17: /* reduce AAclassdef8ClassDef */
            {
                ArrayList<Object> list = new17();
                push(goTo(3), list, false);
            }
            break;
            case 18: /* reduce AInheritsFrom */
            {
                ArrayList<Object> list = new18();
                push(goTo(4), list, false);
            }
            break;
            case 19: /* reduce AAvardecl1VarDecl */
            {
                ArrayList<Object> list = new19();
                push(goTo(5), list, false);
            }
            break;
            case 20: /* reduce AAvardecl2VarDecl */
            {
                ArrayList<Object> list = new20();
                push(goTo(5), list, false);
            }
            break;
            case 21: /* reduce AAvardecl3VarDecl */
            {
                ArrayList<Object> list = new21();
                push(goTo(5), list, false);
            }
            break;
            case 22: /* reduce AAvardecl4VarDecl */
            {
                ArrayList<Object> list = new22();
                push(goTo(5), list, false);
            }
            break;
            case 23: /* reduce APartType */
            {
                ArrayList<Object> list = new23();
                push(goTo(6), list, false);
            }
            break;
            case 24: /* reduce APartExp */
            {
                ArrayList<Object> list = new24();
                push(goTo(7), list, false);
            }
            break;
            case 25: /* reduce AAmethoddecl1MethodDecl */
            {
                ArrayList<Object> list = new25();
                push(goTo(8), list, false);
            }
            break;
            case 26: /* reduce AAmethoddecl2MethodDecl */
            {
                ArrayList<Object> list = new26();
                push(goTo(8), list, false);
            }
            break;
            case 27: /* reduce AAmethoddecl3MethodDecl */
            {
                ArrayList<Object> list = new27();
                push(goTo(8), list, false);
            }
            break;
            case 28: /* reduce AAmethoddecl4MethodDecl */
            {
                ArrayList<Object> list = new28();
                push(goTo(8), list, false);
            }
            break;
            case 29: /* reduce AAmethoddecl5MethodDecl */
            {
                ArrayList<Object> list = new29();
                push(goTo(8), list, false);
            }
            break;
            case 30: /* reduce AAmethoddecl6MethodDecl */
            {
                ArrayList<Object> list = new30();
                push(goTo(8), list, false);
            }
            break;
            case 31: /* reduce AAmethoddecl7MethodDecl */
            {
                ArrayList<Object> list = new31();
                push(goTo(8), list, false);
            }
            break;
            case 32: /* reduce AAmethoddecl8MethodDecl */
            {
                ArrayList<Object> list = new32();
                push(goTo(8), list, false);
            }
            break;
            case 33: /* reduce AAmethoddecl9MethodDecl */
            {
                ArrayList<Object> list = new33();
                push(goTo(8), list, false);
            }
            break;
            case 34: /* reduce AAmethoddecl10MethodDecl */
            {
                ArrayList<Object> list = new34();
                push(goTo(8), list, false);
            }
            break;
            case 35: /* reduce AAmethoddecl11MethodDecl */
            {
                ArrayList<Object> list = new35();
                push(goTo(8), list, false);
            }
            break;
            case 36: /* reduce AAmethoddecl12MethodDecl */
            {
                ArrayList<Object> list = new36();
                push(goTo(8), list, false);
            }
            break;
            case 37: /* reduce AAmethoddecl13MethodDecl */
            {
                ArrayList<Object> list = new37();
                push(goTo(8), list, false);
            }
            break;
            case 38: /* reduce AAmethoddecl14MethodDecl */
            {
                ArrayList<Object> list = new38();
                push(goTo(8), list, false);
            }
            break;
            case 39: /* reduce AAmethoddecl15MethodDecl */
            {
                ArrayList<Object> list = new39();
                push(goTo(8), list, false);
            }
            break;
            case 40: /* reduce AAmethoddecl16MethodDecl */
            {
                ArrayList<Object> list = new40();
                push(goTo(8), list, false);
            }
            break;
            case 41: /* reduce AAargumentdecllist1ArgumentDeclList */
            {
                ArrayList<Object> list = new41();
                push(goTo(9), list, false);
            }
            break;
            case 42: /* reduce AAargumentdecllist2ArgumentDeclList */
            {
                ArrayList<Object> list = new42();
                push(goTo(9), list, false);
            }
            break;
            case 43: /* reduce AArgDeclTail */
            {
                ArrayList<Object> list = new43();
                push(goTo(10), list, false);
            }
            break;
            case 44: /* reduce AArgDecl */
            {
                ArrayList<Object> list = new44();
                push(goTo(11), list, false);
            }
            break;
            case 45: /* reduce AIntType */
            {
                ArrayList<Object> list = new45();
                push(goTo(12), list, false);
            }
            break;
            case 46: /* reduce AStringType */
            {
                ArrayList<Object> list = new46();
                push(goTo(12), list, false);
            }
            break;
            case 47: /* reduce ABooleanType */
            {
                ArrayList<Object> list = new47();
                push(goTo(12), list, false);
            }
            break;
            case 48: /* reduce AIdType */
            {
                ArrayList<Object> list = new48();
                push(goTo(12), list, false);
            }
            break;
            case 49: /* reduce AAarrtype1Type */
            {
                ArrayList<Object> list = new49();
                push(goTo(12), list, false);
            }
            break;
            case 50: /* reduce AAarrtype2Type */
            {
                ArrayList<Object> list = new50();
                push(goTo(12), list, false);
            }
            break;
            case 51: /* reduce AAassignstmt1Stmt */
            {
                ArrayList<Object> list = new51();
                push(goTo(13), list, false);
            }
            break;
            case 52: /* reduce AAassignstmt2Stmt */
            {
                ArrayList<Object> list = new52();
                push(goTo(13), list, false);
            }
            break;
            case 53: /* reduce AAifstmt1Stmt */
            {
                ArrayList<Object> list = new53();
                push(goTo(13), list, false);
            }
            break;
            case 54: /* reduce AAifstmt2Stmt */
            {
                ArrayList<Object> list = new54();
                push(goTo(13), list, false);
            }
            break;
            case 55: /* reduce AAifstmt3Stmt */
            {
                ArrayList<Object> list = new55();
                push(goTo(13), list, false);
            }
            break;
            case 56: /* reduce AAifstmt4Stmt */
            {
                ArrayList<Object> list = new56();
                push(goTo(13), list, false);
            }
            break;
            case 57: /* reduce AAloopstmt1Stmt */
            {
                ArrayList<Object> list = new57();
                push(goTo(13), list, false);
            }
            break;
            case 58: /* reduce AAloopstmt2Stmt */
            {
                ArrayList<Object> list = new58();
                push(goTo(13), list, false);
            }
            break;
            case 59: /* reduce AAcallstmt1Stmt */
            {
                ArrayList<Object> list = new59();
                push(goTo(13), list, false);
            }
            break;
            case 60: /* reduce AAcallstmt2Stmt */
            {
                ArrayList<Object> list = new60();
                push(goTo(13), list, false);
            }
            break;
            case 61: /* reduce AAcallstmt3Stmt */
            {
                ArrayList<Object> list = new61();
                push(goTo(13), list, false);
            }
            break;
            case 62: /* reduce AAcallstmt4Stmt */
            {
                ArrayList<Object> list = new62();
                push(goTo(13), list, false);
            }
            break;
            case 63: /* reduce AApartelse1PartElse */
            {
                ArrayList<Object> list = new63();
                push(goTo(14), list, false);
            }
            break;
            case 64: /* reduce AApartelse2PartElse */
            {
                ArrayList<Object> list = new64();
                push(goTo(14), list, false);
            }
            break;
            case 65: /* reduce APartObj */
            {
                ArrayList<Object> list = new65();
                push(goTo(15), list, false);
            }
            break;
            case 66: /* reduce AAexprlist1ExprList */
            {
                ArrayList<Object> list = new66();
                push(goTo(16), list, false);
            }
            break;
            case 67: /* reduce AAexprlist2ExprList */
            {
                ArrayList<Object> list = new67();
                push(goTo(16), list, false);
            }
            break;
            case 68: /* reduce AExprListTail */
            {
                ArrayList<Object> list = new68();
                push(goTo(17), list, false);
            }
            break;
            case 69: /* reduce AOrExpr */
            {
                ArrayList<Object> list = new69();
                push(goTo(18), list, false);
            }
            break;
            case 70: /* reduce AOtherExpr */
            {
                ArrayList<Object> list = new70();
                push(goTo(18), list, false);
            }
            break;
            case 71: /* reduce AAndExpr1 */
            {
                ArrayList<Object> list = new71();
                push(goTo(19), list, false);
            }
            break;
            case 72: /* reduce AOtherExpr1 */
            {
                ArrayList<Object> list = new72();
                push(goTo(19), list, false);
            }
            break;
            case 73: /* reduce AEqExpr2 */
            {
                ArrayList<Object> list = new73();
                push(goTo(20), list, false);
            }
            break;
            case 74: /* reduce AGtEqExpr2 */
            {
                ArrayList<Object> list = new74();
                push(goTo(20), list, false);
            }
            break;
            case 75: /* reduce AGtExpr2 */
            {
                ArrayList<Object> list = new75();
                push(goTo(20), list, false);
            }
            break;
            case 76: /* reduce AOtherExpr2 */
            {
                ArrayList<Object> list = new76();
                push(goTo(20), list, false);
            }
            break;
            case 77: /* reduce ACatExpr3 */
            {
                ArrayList<Object> list = new77();
                push(goTo(21), list, false);
            }
            break;
            case 78: /* reduce AOtherExpr3 */
            {
                ArrayList<Object> list = new78();
                push(goTo(21), list, false);
            }
            break;
            case 79: /* reduce AAddExpr4 */
            {
                ArrayList<Object> list = new79();
                push(goTo(22), list, false);
            }
            break;
            case 80: /* reduce ASubExpr4 */
            {
                ArrayList<Object> list = new80();
                push(goTo(22), list, false);
            }
            break;
            case 81: /* reduce AOtherExpr4 */
            {
                ArrayList<Object> list = new81();
                push(goTo(22), list, false);
            }
            break;
            case 82: /* reduce AMultExpr5 */
            {
                ArrayList<Object> list = new82();
                push(goTo(23), list, false);
            }
            break;
            case 83: /* reduce ADivExpr5 */
            {
                ArrayList<Object> list = new83();
                push(goTo(23), list, false);
            }
            break;
            case 84: /* reduce AOtherExpr5 */
            {
                ArrayList<Object> list = new84();
                push(goTo(23), list, false);
            }
            break;
            case 85: /* reduce ANegExpr6 */
            {
                ArrayList<Object> list = new85();
                push(goTo(24), list, false);
            }
            break;
            case 86: /* reduce APosExpr6 */
            {
                ArrayList<Object> list = new86();
                push(goTo(24), list, false);
            }
            break;
            case 87: /* reduce ANotExpr6 */
            {
                ArrayList<Object> list = new87();
                push(goTo(24), list, false);
            }
            break;
            case 88: /* reduce AOtherExpr6 */
            {
                ArrayList<Object> list = new88();
                push(goTo(24), list, false);
            }
            break;
            case 89: /* reduce AIdExpr9 */
            {
                ArrayList<Object> list = new89();
                push(goTo(25), list, false);
            }
            break;
            case 90: /* reduce ALitExpr9 */
            {
                ArrayList<Object> list = new90();
                push(goTo(25), list, false);
            }
            break;
            case 91: /* reduce AMeExpr9 */
            {
                ArrayList<Object> list = new91();
                push(goTo(25), list, false);
            }
            break;
            case 92: /* reduce AParExpr9 */
            {
                ArrayList<Object> list = new92();
                push(goTo(25), list, false);
            }
            break;
            case 93: /* reduce ANewExpr9 */
            {
                ArrayList<Object> list = new93();
                push(goTo(25), list, false);
            }
            break;
            case 94: /* reduce AAcallexpr91Expr9 */
            {
                ArrayList<Object> list = new94();
                push(goTo(25), list, false);
            }
            break;
            case 95: /* reduce AAcallexpr92Expr9 */
            {
                ArrayList<Object> list = new95();
                push(goTo(25), list, false);
            }
            break;
            case 96: /* reduce AAcallexpr93Expr9 */
            {
                ArrayList<Object> list = new96();
                push(goTo(25), list, false);
            }
            break;
            case 97: /* reduce AAcallexpr94Expr9 */
            {
                ArrayList<Object> list = new97();
                push(goTo(25), list, false);
            }
            break;
            case 98: /* reduce AArrInxExpr9 */
            {
                ArrayList<Object> list = new98();
                push(goTo(25), list, false);
            }
            break;
            case 99: /* reduce APartArrInx */
            {
                ArrayList<Object> list = new99();
                push(goTo(26), list, false);
            }
            break;
            case 100: /* reduce AIntLit */
            {
                ArrayList<Object> list = new100();
                push(goTo(27), list, false);
            }
            break;
            case 101: /* reduce AStrLit */
            {
                ArrayList<Object> list = new101();
                push(goTo(27), list, false);
            }
            break;
            case 102: /* reduce ATrueLit */
            {
                ArrayList<Object> list = new102();
                push(goTo(27), list, false);
            }
            break;
            case 103: /* reduce AFalseLit */
            {
                ArrayList<Object> list = new103();
                push(goTo(27), list, false);
            }
            break;
            case 104: /* reduce ANullLitLit */
            {
                ArrayList<Object> list = new104();
                push(goTo(27), list, false);
            }
            break;
            case 105: /* reduce ATerminal$ClassDefs */
            {
                ArrayList<Object> list = new105();
                push(goTo(28), list, true);
            }
            break;
            case 106: /* reduce ANonTerminal$ClassDefs */
            {
                ArrayList<Object> list = new106();
                push(goTo(28), list, true);
            }
            break;
            case 107: /* reduce ATerminal$EmptyLine */
            {
                ArrayList<Object> list = new107();
                push(goTo(29), list, true);
            }
            break;
            case 108: /* reduce ANonTerminal$EmptyLine */
            {
                ArrayList<Object> list = new108();
                push(goTo(29), list, true);
            }
            break;
            case 109: /* reduce ATerminal$VarDecl */
            {
                ArrayList<Object> list = new109();
                push(goTo(30), list, true);
            }
            break;
            case 110: /* reduce ANonTerminal$VarDecl */
            {
                ArrayList<Object> list = new110();
                push(goTo(30), list, true);
            }
            break;
            case 111: /* reduce ATerminal$MethodDecl */
            {
                ArrayList<Object> list = new111();
                push(goTo(31), list, true);
            }
            break;
            case 112: /* reduce ANonTerminal$MethodDecl */
            {
                ArrayList<Object> list = new112();
                push(goTo(31), list, true);
            }
            break;
            case 113: /* reduce ATerminal$Stmt */
            {
                ArrayList<Object> list = new113();
                push(goTo(32), list, true);
            }
            break;
            case 114: /* reduce ANonTerminal$Stmt */
            {
                ArrayList<Object> list = new114();
                push(goTo(32), list, true);
            }
            break;
            case 115: /* reduce ATerminal$ArgDeclTail */
            {
                ArrayList<Object> list = new115();
                push(goTo(33), list, true);
            }
            break;
            case 116: /* reduce ANonTerminal$ArgDeclTail */
            {
                ArrayList<Object> list = new116();
                push(goTo(33), list, true);
            }
            break;
            case 117: /* reduce ATerminal$PartArrInx */
            {
                ArrayList<Object> list = new117();
                push(goTo(34), list, true);
            }
            break;
            case 118: /* reduce ANonTerminal$PartArrInx */
            {
                ArrayList<Object> list = new118();
                push(goTo(34), list, true);
            }
            break;
            case 119: /* reduce ATerminal$ExprListTail */
            {
                ArrayList<Object> list = new119();
                push(goTo(35), list, true);
            }
            break;
            case 120: /* reduce ANonTerminal$ExprListTail */
            {
                ArrayList<Object> list = new120();
                push(goTo(35), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAstart1Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        PClassDef pclassdefNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode5 = null;
        pclassdefNode3 = (PClassDef)nodeArrayList1.get(0);
        {
            // Block
        }

        pstartNode1 = new AStart(null, pclassdefNode3, listNode4, null);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAstart2Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        PNewlines pnewlinesNode2;
        PClassDef pclassdefNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode5 = null;
        pnewlinesNode2 = (PNewlines)nodeArrayList1.get(0);
        pclassdefNode3 = (PClassDef)nodeArrayList2.get(0);
        {
            // Block
        }

        pstartNode1 = new AStart(pnewlinesNode2, pclassdefNode3, listNode4, null);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAstart3Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        PClassDef pclassdefNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode6 = null;
        pclassdefNode3 = (PClassDef)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pstartNode1 = new AStart(null, pclassdefNode3, listNode5, null);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAstart4Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        PNewlines pnewlinesNode2;
        PClassDef pclassdefNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode6 = null;
        pnewlinesNode2 = (PNewlines)nodeArrayList1.get(0);
        pclassdefNode3 = (PClassDef)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pstartNode1 = new AStart(pnewlinesNode2, pclassdefNode3, listNode5, null);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAstart5Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        PClassDef pclassdefNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PNewlines pnewlinesNode5;
        pclassdefNode3 = (PClassDef)nodeArrayList1.get(0);
        {
            // Block
        }
        pnewlinesNode5 = (PNewlines)nodeArrayList2.get(0);

        pstartNode1 = new AStart(null, pclassdefNode3, listNode4, pnewlinesNode5);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAstart6Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        PNewlines pnewlinesNode2;
        PClassDef pclassdefNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PNewlines pnewlinesNode5;
        pnewlinesNode2 = (PNewlines)nodeArrayList1.get(0);
        pclassdefNode3 = (PClassDef)nodeArrayList2.get(0);
        {
            // Block
        }
        pnewlinesNode5 = (PNewlines)nodeArrayList3.get(0);

        pstartNode1 = new AStart(pnewlinesNode2, pclassdefNode3, listNode4, pnewlinesNode5);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAstart7Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        PClassDef pclassdefNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        PNewlines pnewlinesNode6;
        pclassdefNode3 = (PClassDef)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        pnewlinesNode6 = (PNewlines)nodeArrayList3.get(0);

        pstartNode1 = new AStart(null, pclassdefNode3, listNode5, pnewlinesNode6);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAstart8Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        PNewlines pnewlinesNode2;
        PClassDef pclassdefNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        PNewlines pnewlinesNode6;
        pnewlinesNode2 = (PNewlines)nodeArrayList1.get(0);
        pclassdefNode3 = (PClassDef)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        pnewlinesNode6 = (PNewlines)nodeArrayList4.get(0);

        pstartNode1 = new AStart(pnewlinesNode2, pclassdefNode3, listNode5, pnewlinesNode6);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ANewlines */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNewlines pnewlinesNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pnewlinesNode1 = new ANewlines(listNode3);
        }
	nodeList.add(pnewlinesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AClassDefs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDefs pclassdefsNode1;
        {
            // Block
        PNewlines pnewlinesNode2;
        PClassDef pclassdefNode3;
        pnewlinesNode2 = (PNewlines)nodeArrayList1.get(0);
        pclassdefNode3 = (PClassDef)nodeArrayList2.get(0);

        pclassdefsNode1 = new AClassDefs(pnewlinesNode2, pclassdefNode3);
        }
	nodeList.add(pclassdefsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAclassdef1ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        {
            // Block
        TClassId tclassidNode2;
        TId tidNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TIs tisNode5;
        PNewlines pnewlinesNode6;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TEnd tendNode9;
        TId tidNode10;
        tclassidNode2 = (TClassId)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tisNode5 = (TIs)nodeArrayList3.get(0);
        pnewlinesNode6 = (PNewlines)nodeArrayList4.get(0);
        {
            // Block
        }
        {
            // Block
        }
        tendNode9 = (TEnd)nodeArrayList5.get(0);
        tidNode10 = (TId)nodeArrayList6.get(0);

        pclassdefNode1 = new AClassDef(tclassidNode2, tidNode3, null, tisNode5, pnewlinesNode6, listNode7, listNode8, tendNode9, tidNode10);
        }
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAclassdef2ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        {
            // Block
        TClassId tclassidNode2;
        TId tidNode3;
        PInheritsFrom pinheritsfromNode4;
        TIs tisNode5;
        PNewlines pnewlinesNode6;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TEnd tendNode9;
        TId tidNode10;
        tclassidNode2 = (TClassId)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        pinheritsfromNode4 = (PInheritsFrom)nodeArrayList3.get(0);
        tisNode5 = (TIs)nodeArrayList4.get(0);
        pnewlinesNode6 = (PNewlines)nodeArrayList5.get(0);
        {
            // Block
        }
        {
            // Block
        }
        tendNode9 = (TEnd)nodeArrayList6.get(0);
        tidNode10 = (TId)nodeArrayList7.get(0);

        pclassdefNode1 = new AClassDef(tclassidNode2, tidNode3, pinheritsfromNode4, tisNode5, pnewlinesNode6, listNode7, listNode8, tendNode9, tidNode10);
        }
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAclassdef3ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        {
            // Block
        TClassId tclassidNode2;
        TId tidNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TIs tisNode5;
        PNewlines pnewlinesNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TEnd tendNode10;
        TId tidNode11;
        tclassidNode2 = (TClassId)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tisNode5 = (TIs)nodeArrayList3.get(0);
        pnewlinesNode6 = (PNewlines)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList5.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        {
            // Block
        }
        tendNode10 = (TEnd)nodeArrayList6.get(0);
        tidNode11 = (TId)nodeArrayList7.get(0);

        pclassdefNode1 = new AClassDef(tclassidNode2, tidNode3, null, tisNode5, pnewlinesNode6, listNode8, listNode9, tendNode10, tidNode11);
        }
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AAclassdef4ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        {
            // Block
        TClassId tclassidNode2;
        TId tidNode3;
        PInheritsFrom pinheritsfromNode4;
        TIs tisNode5;
        PNewlines pnewlinesNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TEnd tendNode10;
        TId tidNode11;
        tclassidNode2 = (TClassId)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        pinheritsfromNode4 = (PInheritsFrom)nodeArrayList3.get(0);
        tisNode5 = (TIs)nodeArrayList4.get(0);
        pnewlinesNode6 = (PNewlines)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        {
            // Block
        }
        tendNode10 = (TEnd)nodeArrayList7.get(0);
        tidNode11 = (TId)nodeArrayList8.get(0);

        pclassdefNode1 = new AClassDef(tclassidNode2, tidNode3, pinheritsfromNode4, tisNode5, pnewlinesNode6, listNode8, listNode9, tendNode10, tidNode11);
        }
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAclassdef5ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        {
            // Block
        TClassId tclassidNode2;
        TId tidNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TIs tisNode5;
        PNewlines pnewlinesNode6;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TEnd tendNode10;
        TId tidNode11;
        tclassidNode2 = (TClassId)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tisNode5 = (TIs)nodeArrayList3.get(0);
        pnewlinesNode6 = (PNewlines)nodeArrayList4.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList5.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        tendNode10 = (TEnd)nodeArrayList6.get(0);
        tidNode11 = (TId)nodeArrayList7.get(0);

        pclassdefNode1 = new AClassDef(tclassidNode2, tidNode3, null, tisNode5, pnewlinesNode6, listNode7, listNode9, tendNode10, tidNode11);
        }
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAclassdef6ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        {
            // Block
        TClassId tclassidNode2;
        TId tidNode3;
        PInheritsFrom pinheritsfromNode4;
        TIs tisNode5;
        PNewlines pnewlinesNode6;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TEnd tendNode10;
        TId tidNode11;
        tclassidNode2 = (TClassId)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        pinheritsfromNode4 = (PInheritsFrom)nodeArrayList3.get(0);
        tisNode5 = (TIs)nodeArrayList4.get(0);
        pnewlinesNode6 = (PNewlines)nodeArrayList5.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList6.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        tendNode10 = (TEnd)nodeArrayList7.get(0);
        tidNode11 = (TId)nodeArrayList8.get(0);

        pclassdefNode1 = new AClassDef(tclassidNode2, tidNode3, pinheritsfromNode4, tisNode5, pnewlinesNode6, listNode7, listNode9, tendNode10, tidNode11);
        }
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AAclassdef7ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        {
            // Block
        TClassId tclassidNode2;
        TId tidNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TIs tisNode5;
        PNewlines pnewlinesNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TEnd tendNode11;
        TId tidNode12;
        tclassidNode2 = (TClassId)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tisNode5 = (TIs)nodeArrayList3.get(0);
        pnewlinesNode6 = (PNewlines)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList5.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList6.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        tendNode11 = (TEnd)nodeArrayList7.get(0);
        tidNode12 = (TId)nodeArrayList8.get(0);

        pclassdefNode1 = new AClassDef(tclassidNode2, tidNode3, null, tisNode5, pnewlinesNode6, listNode8, listNode10, tendNode11, tidNode12);
        }
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAclassdef8ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        {
            // Block
        TClassId tclassidNode2;
        TId tidNode3;
        PInheritsFrom pinheritsfromNode4;
        TIs tisNode5;
        PNewlines pnewlinesNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TEnd tendNode11;
        TId tidNode12;
        tclassidNode2 = (TClassId)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        pinheritsfromNode4 = (PInheritsFrom)nodeArrayList3.get(0);
        tisNode5 = (TIs)nodeArrayList4.get(0);
        pnewlinesNode6 = (PNewlines)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList7.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        tendNode11 = (TEnd)nodeArrayList8.get(0);
        tidNode12 = (TId)nodeArrayList9.get(0);

        pclassdefNode1 = new AClassDef(tclassidNode2, tidNode3, pinheritsfromNode4, tisNode5, pnewlinesNode6, listNode8, listNode10, tendNode11, tidNode12);
        }
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AInheritsFrom */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInheritsFrom pinheritsfromNode1;
        {
            // Block
        TInherits tinheritsNode2;
        TFrom tfromNode3;
        TId tidNode4;
        tinheritsNode2 = (TInherits)nodeArrayList1.get(0);
        tfromNode3 = (TFrom)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);

        pinheritsfromNode1 = new AInheritsFrom(tinheritsNode2, tfromNode3, tidNode4);
        }
	nodeList.add(pinheritsfromNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAvardecl1VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        @SuppressWarnings("unused") Object nullNode4 = null;
        PNewlines pnewlinesNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pnewlinesNode5 = (PNewlines)nodeArrayList2.get(0);

        pvardeclNode1 = new AVarDecl(tidNode2, null, null, pnewlinesNode5);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAvardecl2VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        {
            // Block
        TId tidNode2;
        PPartType pparttypeNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        PNewlines pnewlinesNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pparttypeNode3 = (PPartType)nodeArrayList2.get(0);
        pnewlinesNode5 = (PNewlines)nodeArrayList3.get(0);

        pvardeclNode1 = new AVarDecl(tidNode2, pparttypeNode3, null, pnewlinesNode5);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAvardecl3VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        PPartExp ppartexpNode4;
        PNewlines pnewlinesNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        ppartexpNode4 = (PPartExp)nodeArrayList2.get(0);
        pnewlinesNode5 = (PNewlines)nodeArrayList3.get(0);

        pvardeclNode1 = new AVarDecl(tidNode2, null, ppartexpNode4, pnewlinesNode5);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAvardecl4VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        {
            // Block
        TId tidNode2;
        PPartType pparttypeNode3;
        PPartExp ppartexpNode4;
        PNewlines pnewlinesNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pparttypeNode3 = (PPartType)nodeArrayList2.get(0);
        ppartexpNode4 = (PPartExp)nodeArrayList3.get(0);
        pnewlinesNode5 = (PNewlines)nodeArrayList4.get(0);

        pvardeclNode1 = new AVarDecl(tidNode2, pparttypeNode3, ppartexpNode4, pnewlinesNode5);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce APartType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPartType pparttypeNode1;
        {
            // Block
        TColon tcolonNode2;
        PType ptypeNode3;
        tcolonNode2 = (TColon)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);

        pparttypeNode1 = new APartType(tcolonNode2, ptypeNode3);
        }
	nodeList.add(pparttypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce APartExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPartExp ppartexpNode1;
        {
            // Block
        TOpAssign topassignNode2;
        PExpr pexprNode3;
        topassignNode2 = (TOpAssign)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);

        ppartexpNode1 = new APartExp(topassignNode2, pexprNode3);
        }
	nodeList.add(ppartexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAmethoddecl1MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TId tidNode2;
        TLPar tlparNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRPar trparNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TIs tisNode7;
        PNewlines pnewlinesNode8;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TBegin tbeginNode10;
        PNewlines pnewlinesNode11;
        LinkedList<Object> listNode12 = new LinkedList<Object>();
        TEnd tendNode13;
        TId tidNode14;
        PNewlines pnewlinesNode15;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode5 = (TRPar)nodeArrayList3.get(0);
        tisNode7 = (TIs)nodeArrayList4.get(0);
        pnewlinesNode8 = (PNewlines)nodeArrayList5.get(0);
        {
            // Block
        }
        tbeginNode10 = (TBegin)nodeArrayList6.get(0);
        pnewlinesNode11 = (PNewlines)nodeArrayList7.get(0);
        {
            // Block
        }
        tendNode13 = (TEnd)nodeArrayList8.get(0);
        tidNode14 = (TId)nodeArrayList9.get(0);
        pnewlinesNode15 = (PNewlines)nodeArrayList10.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidNode2, tlparNode3, null, trparNode5, null, tisNode7, pnewlinesNode8, listNode9, tbeginNode10, pnewlinesNode11, listNode12, tendNode13, tidNode14, pnewlinesNode15);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAmethoddecl2MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TId tidNode2;
        TLPar tlparNode3;
        PArgumentDeclList pargumentdecllistNode4;
        TRPar trparNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TIs tisNode7;
        PNewlines pnewlinesNode8;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TBegin tbeginNode10;
        PNewlines pnewlinesNode11;
        LinkedList<Object> listNode12 = new LinkedList<Object>();
        TEnd tendNode13;
        TId tidNode14;
        PNewlines pnewlinesNode15;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pargumentdecllistNode4 = (PArgumentDeclList)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tisNode7 = (TIs)nodeArrayList5.get(0);
        pnewlinesNode8 = (PNewlines)nodeArrayList6.get(0);
        {
            // Block
        }
        tbeginNode10 = (TBegin)nodeArrayList7.get(0);
        pnewlinesNode11 = (PNewlines)nodeArrayList8.get(0);
        {
            // Block
        }
        tendNode13 = (TEnd)nodeArrayList9.get(0);
        tidNode14 = (TId)nodeArrayList10.get(0);
        pnewlinesNode15 = (PNewlines)nodeArrayList11.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidNode2, tlparNode3, pargumentdecllistNode4, trparNode5, null, tisNode7, pnewlinesNode8, listNode9, tbeginNode10, pnewlinesNode11, listNode12, tendNode13, tidNode14, pnewlinesNode15);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AAmethoddecl3MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TId tidNode2;
        TLPar tlparNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRPar trparNode5;
        PPartType pparttypeNode6;
        TIs tisNode7;
        PNewlines pnewlinesNode8;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TBegin tbeginNode10;
        PNewlines pnewlinesNode11;
        LinkedList<Object> listNode12 = new LinkedList<Object>();
        TEnd tendNode13;
        TId tidNode14;
        PNewlines pnewlinesNode15;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode5 = (TRPar)nodeArrayList3.get(0);
        pparttypeNode6 = (PPartType)nodeArrayList4.get(0);
        tisNode7 = (TIs)nodeArrayList5.get(0);
        pnewlinesNode8 = (PNewlines)nodeArrayList6.get(0);
        {
            // Block
        }
        tbeginNode10 = (TBegin)nodeArrayList7.get(0);
        pnewlinesNode11 = (PNewlines)nodeArrayList8.get(0);
        {
            // Block
        }
        tendNode13 = (TEnd)nodeArrayList9.get(0);
        tidNode14 = (TId)nodeArrayList10.get(0);
        pnewlinesNode15 = (PNewlines)nodeArrayList11.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidNode2, tlparNode3, null, trparNode5, pparttypeNode6, tisNode7, pnewlinesNode8, listNode9, tbeginNode10, pnewlinesNode11, listNode12, tendNode13, tidNode14, pnewlinesNode15);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AAmethoddecl4MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TId tidNode2;
        TLPar tlparNode3;
        PArgumentDeclList pargumentdecllistNode4;
        TRPar trparNode5;
        PPartType pparttypeNode6;
        TIs tisNode7;
        PNewlines pnewlinesNode8;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TBegin tbeginNode10;
        PNewlines pnewlinesNode11;
        LinkedList<Object> listNode12 = new LinkedList<Object>();
        TEnd tendNode13;
        TId tidNode14;
        PNewlines pnewlinesNode15;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pargumentdecllistNode4 = (PArgumentDeclList)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        pparttypeNode6 = (PPartType)nodeArrayList5.get(0);
        tisNode7 = (TIs)nodeArrayList6.get(0);
        pnewlinesNode8 = (PNewlines)nodeArrayList7.get(0);
        {
            // Block
        }
        tbeginNode10 = (TBegin)nodeArrayList8.get(0);
        pnewlinesNode11 = (PNewlines)nodeArrayList9.get(0);
        {
            // Block
        }
        tendNode13 = (TEnd)nodeArrayList10.get(0);
        tidNode14 = (TId)nodeArrayList11.get(0);
        pnewlinesNode15 = (PNewlines)nodeArrayList12.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidNode2, tlparNode3, pargumentdecllistNode4, trparNode5, pparttypeNode6, tisNode7, pnewlinesNode8, listNode9, tbeginNode10, pnewlinesNode11, listNode12, tendNode13, tidNode14, pnewlinesNode15);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AAmethoddecl5MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TId tidNode2;
        TLPar tlparNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRPar trparNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TIs tisNode7;
        PNewlines pnewlinesNode8;
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TBegin tbeginNode11;
        PNewlines pnewlinesNode12;
        LinkedList<Object> listNode13 = new LinkedList<Object>();
        TEnd tendNode14;
        TId tidNode15;
        PNewlines pnewlinesNode16;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode5 = (TRPar)nodeArrayList3.get(0);
        tisNode7 = (TIs)nodeArrayList4.get(0);
        pnewlinesNode8 = (PNewlines)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList6.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        tbeginNode11 = (TBegin)nodeArrayList7.get(0);
        pnewlinesNode12 = (PNewlines)nodeArrayList8.get(0);
        {
            // Block
        }
        tendNode14 = (TEnd)nodeArrayList9.get(0);
        tidNode15 = (TId)nodeArrayList10.get(0);
        pnewlinesNode16 = (PNewlines)nodeArrayList11.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidNode2, tlparNode3, null, trparNode5, null, tisNode7, pnewlinesNode8, listNode10, tbeginNode11, pnewlinesNode12, listNode13, tendNode14, tidNode15, pnewlinesNode16);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AAmethoddecl6MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TId tidNode2;
        TLPar tlparNode3;
        PArgumentDeclList pargumentdecllistNode4;
        TRPar trparNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TIs tisNode7;
        PNewlines pnewlinesNode8;
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TBegin tbeginNode11;
        PNewlines pnewlinesNode12;
        LinkedList<Object> listNode13 = new LinkedList<Object>();
        TEnd tendNode14;
        TId tidNode15;
        PNewlines pnewlinesNode16;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pargumentdecllistNode4 = (PArgumentDeclList)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tisNode7 = (TIs)nodeArrayList5.get(0);
        pnewlinesNode8 = (PNewlines)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList7.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        tbeginNode11 = (TBegin)nodeArrayList8.get(0);
        pnewlinesNode12 = (PNewlines)nodeArrayList9.get(0);
        {
            // Block
        }
        tendNode14 = (TEnd)nodeArrayList10.get(0);
        tidNode15 = (TId)nodeArrayList11.get(0);
        pnewlinesNode16 = (PNewlines)nodeArrayList12.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidNode2, tlparNode3, pargumentdecllistNode4, trparNode5, null, tisNode7, pnewlinesNode8, listNode10, tbeginNode11, pnewlinesNode12, listNode13, tendNode14, tidNode15, pnewlinesNode16);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AAmethoddecl7MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TId tidNode2;
        TLPar tlparNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRPar trparNode5;
        PPartType pparttypeNode6;
        TIs tisNode7;
        PNewlines pnewlinesNode8;
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TBegin tbeginNode11;
        PNewlines pnewlinesNode12;
        LinkedList<Object> listNode13 = new LinkedList<Object>();
        TEnd tendNode14;
        TId tidNode15;
        PNewlines pnewlinesNode16;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode5 = (TRPar)nodeArrayList3.get(0);
        pparttypeNode6 = (PPartType)nodeArrayList4.get(0);
        tisNode7 = (TIs)nodeArrayList5.get(0);
        pnewlinesNode8 = (PNewlines)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList7.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        tbeginNode11 = (TBegin)nodeArrayList8.get(0);
        pnewlinesNode12 = (PNewlines)nodeArrayList9.get(0);
        {
            // Block
        }
        tendNode14 = (TEnd)nodeArrayList10.get(0);
        tidNode15 = (TId)nodeArrayList11.get(0);
        pnewlinesNode16 = (PNewlines)nodeArrayList12.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidNode2, tlparNode3, null, trparNode5, pparttypeNode6, tisNode7, pnewlinesNode8, listNode10, tbeginNode11, pnewlinesNode12, listNode13, tendNode14, tidNode15, pnewlinesNode16);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AAmethoddecl8MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TId tidNode2;
        TLPar tlparNode3;
        PArgumentDeclList pargumentdecllistNode4;
        TRPar trparNode5;
        PPartType pparttypeNode6;
        TIs tisNode7;
        PNewlines pnewlinesNode8;
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TBegin tbeginNode11;
        PNewlines pnewlinesNode12;
        LinkedList<Object> listNode13 = new LinkedList<Object>();
        TEnd tendNode14;
        TId tidNode15;
        PNewlines pnewlinesNode16;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pargumentdecllistNode4 = (PArgumentDeclList)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        pparttypeNode6 = (PPartType)nodeArrayList5.get(0);
        tisNode7 = (TIs)nodeArrayList6.get(0);
        pnewlinesNode8 = (PNewlines)nodeArrayList7.get(0);
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList8.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        tbeginNode11 = (TBegin)nodeArrayList9.get(0);
        pnewlinesNode12 = (PNewlines)nodeArrayList10.get(0);
        {
            // Block
        }
        tendNode14 = (TEnd)nodeArrayList11.get(0);
        tidNode15 = (TId)nodeArrayList12.get(0);
        pnewlinesNode16 = (PNewlines)nodeArrayList13.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidNode2, tlparNode3, pargumentdecllistNode4, trparNode5, pparttypeNode6, tisNode7, pnewlinesNode8, listNode10, tbeginNode11, pnewlinesNode12, listNode13, tendNode14, tidNode15, pnewlinesNode16);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AAmethoddecl9MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TId tidNode2;
        TLPar tlparNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRPar trparNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TIs tisNode7;
        PNewlines pnewlinesNode8;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TBegin tbeginNode10;
        PNewlines pnewlinesNode11;
        LinkedList<Object> listNode13 = new LinkedList<Object>();
        TEnd tendNode14;
        TId tidNode15;
        PNewlines pnewlinesNode16;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode5 = (TRPar)nodeArrayList3.get(0);
        tisNode7 = (TIs)nodeArrayList4.get(0);
        pnewlinesNode8 = (PNewlines)nodeArrayList5.get(0);
        {
            // Block
        }
        tbeginNode10 = (TBegin)nodeArrayList6.get(0);
        pnewlinesNode11 = (PNewlines)nodeArrayList7.get(0);
        {
            // Block
        LinkedList<Object> listNode12 = new LinkedList<Object>();
        listNode12 = (LinkedList)nodeArrayList8.get(0);
	if(listNode12 != null)
	{
	  listNode13.addAll(listNode12);
	}
        }
        tendNode14 = (TEnd)nodeArrayList9.get(0);
        tidNode15 = (TId)nodeArrayList10.get(0);
        pnewlinesNode16 = (PNewlines)nodeArrayList11.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidNode2, tlparNode3, null, trparNode5, null, tisNode7, pnewlinesNode8, listNode9, tbeginNode10, pnewlinesNode11, listNode13, tendNode14, tidNode15, pnewlinesNode16);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AAmethoddecl10MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TId tidNode2;
        TLPar tlparNode3;
        PArgumentDeclList pargumentdecllistNode4;
        TRPar trparNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TIs tisNode7;
        PNewlines pnewlinesNode8;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TBegin tbeginNode10;
        PNewlines pnewlinesNode11;
        LinkedList<Object> listNode13 = new LinkedList<Object>();
        TEnd tendNode14;
        TId tidNode15;
        PNewlines pnewlinesNode16;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pargumentdecllistNode4 = (PArgumentDeclList)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tisNode7 = (TIs)nodeArrayList5.get(0);
        pnewlinesNode8 = (PNewlines)nodeArrayList6.get(0);
        {
            // Block
        }
        tbeginNode10 = (TBegin)nodeArrayList7.get(0);
        pnewlinesNode11 = (PNewlines)nodeArrayList8.get(0);
        {
            // Block
        LinkedList<Object> listNode12 = new LinkedList<Object>();
        listNode12 = (LinkedList)nodeArrayList9.get(0);
	if(listNode12 != null)
	{
	  listNode13.addAll(listNode12);
	}
        }
        tendNode14 = (TEnd)nodeArrayList10.get(0);
        tidNode15 = (TId)nodeArrayList11.get(0);
        pnewlinesNode16 = (PNewlines)nodeArrayList12.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidNode2, tlparNode3, pargumentdecllistNode4, trparNode5, null, tisNode7, pnewlinesNode8, listNode9, tbeginNode10, pnewlinesNode11, listNode13, tendNode14, tidNode15, pnewlinesNode16);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AAmethoddecl11MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TId tidNode2;
        TLPar tlparNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRPar trparNode5;
        PPartType pparttypeNode6;
        TIs tisNode7;
        PNewlines pnewlinesNode8;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TBegin tbeginNode10;
        PNewlines pnewlinesNode11;
        LinkedList<Object> listNode13 = new LinkedList<Object>();
        TEnd tendNode14;
        TId tidNode15;
        PNewlines pnewlinesNode16;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode5 = (TRPar)nodeArrayList3.get(0);
        pparttypeNode6 = (PPartType)nodeArrayList4.get(0);
        tisNode7 = (TIs)nodeArrayList5.get(0);
        pnewlinesNode8 = (PNewlines)nodeArrayList6.get(0);
        {
            // Block
        }
        tbeginNode10 = (TBegin)nodeArrayList7.get(0);
        pnewlinesNode11 = (PNewlines)nodeArrayList8.get(0);
        {
            // Block
        LinkedList<Object> listNode12 = new LinkedList<Object>();
        listNode12 = (LinkedList)nodeArrayList9.get(0);
	if(listNode12 != null)
	{
	  listNode13.addAll(listNode12);
	}
        }
        tendNode14 = (TEnd)nodeArrayList10.get(0);
        tidNode15 = (TId)nodeArrayList11.get(0);
        pnewlinesNode16 = (PNewlines)nodeArrayList12.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidNode2, tlparNode3, null, trparNode5, pparttypeNode6, tisNode7, pnewlinesNode8, listNode9, tbeginNode10, pnewlinesNode11, listNode13, tendNode14, tidNode15, pnewlinesNode16);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AAmethoddecl12MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TId tidNode2;
        TLPar tlparNode3;
        PArgumentDeclList pargumentdecllistNode4;
        TRPar trparNode5;
        PPartType pparttypeNode6;
        TIs tisNode7;
        PNewlines pnewlinesNode8;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TBegin tbeginNode10;
        PNewlines pnewlinesNode11;
        LinkedList<Object> listNode13 = new LinkedList<Object>();
        TEnd tendNode14;
        TId tidNode15;
        PNewlines pnewlinesNode16;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pargumentdecllistNode4 = (PArgumentDeclList)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        pparttypeNode6 = (PPartType)nodeArrayList5.get(0);
        tisNode7 = (TIs)nodeArrayList6.get(0);
        pnewlinesNode8 = (PNewlines)nodeArrayList7.get(0);
        {
            // Block
        }
        tbeginNode10 = (TBegin)nodeArrayList8.get(0);
        pnewlinesNode11 = (PNewlines)nodeArrayList9.get(0);
        {
            // Block
        LinkedList<Object> listNode12 = new LinkedList<Object>();
        listNode12 = (LinkedList)nodeArrayList10.get(0);
	if(listNode12 != null)
	{
	  listNode13.addAll(listNode12);
	}
        }
        tendNode14 = (TEnd)nodeArrayList11.get(0);
        tidNode15 = (TId)nodeArrayList12.get(0);
        pnewlinesNode16 = (PNewlines)nodeArrayList13.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidNode2, tlparNode3, pargumentdecllistNode4, trparNode5, pparttypeNode6, tisNode7, pnewlinesNode8, listNode9, tbeginNode10, pnewlinesNode11, listNode13, tendNode14, tidNode15, pnewlinesNode16);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AAmethoddecl13MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TId tidNode2;
        TLPar tlparNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRPar trparNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TIs tisNode7;
        PNewlines pnewlinesNode8;
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TBegin tbeginNode11;
        PNewlines pnewlinesNode12;
        LinkedList<Object> listNode14 = new LinkedList<Object>();
        TEnd tendNode15;
        TId tidNode16;
        PNewlines pnewlinesNode17;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode5 = (TRPar)nodeArrayList3.get(0);
        tisNode7 = (TIs)nodeArrayList4.get(0);
        pnewlinesNode8 = (PNewlines)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList6.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        tbeginNode11 = (TBegin)nodeArrayList7.get(0);
        pnewlinesNode12 = (PNewlines)nodeArrayList8.get(0);
        {
            // Block
        LinkedList<Object> listNode13 = new LinkedList<Object>();
        listNode13 = (LinkedList)nodeArrayList9.get(0);
	if(listNode13 != null)
	{
	  listNode14.addAll(listNode13);
	}
        }
        tendNode15 = (TEnd)nodeArrayList10.get(0);
        tidNode16 = (TId)nodeArrayList11.get(0);
        pnewlinesNode17 = (PNewlines)nodeArrayList12.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidNode2, tlparNode3, null, trparNode5, null, tisNode7, pnewlinesNode8, listNode10, tbeginNode11, pnewlinesNode12, listNode14, tendNode15, tidNode16, pnewlinesNode17);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AAmethoddecl14MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TId tidNode2;
        TLPar tlparNode3;
        PArgumentDeclList pargumentdecllistNode4;
        TRPar trparNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TIs tisNode7;
        PNewlines pnewlinesNode8;
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TBegin tbeginNode11;
        PNewlines pnewlinesNode12;
        LinkedList<Object> listNode14 = new LinkedList<Object>();
        TEnd tendNode15;
        TId tidNode16;
        PNewlines pnewlinesNode17;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pargumentdecllistNode4 = (PArgumentDeclList)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tisNode7 = (TIs)nodeArrayList5.get(0);
        pnewlinesNode8 = (PNewlines)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList7.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        tbeginNode11 = (TBegin)nodeArrayList8.get(0);
        pnewlinesNode12 = (PNewlines)nodeArrayList9.get(0);
        {
            // Block
        LinkedList<Object> listNode13 = new LinkedList<Object>();
        listNode13 = (LinkedList)nodeArrayList10.get(0);
	if(listNode13 != null)
	{
	  listNode14.addAll(listNode13);
	}
        }
        tendNode15 = (TEnd)nodeArrayList11.get(0);
        tidNode16 = (TId)nodeArrayList12.get(0);
        pnewlinesNode17 = (PNewlines)nodeArrayList13.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidNode2, tlparNode3, pargumentdecllistNode4, trparNode5, null, tisNode7, pnewlinesNode8, listNode10, tbeginNode11, pnewlinesNode12, listNode14, tendNode15, tidNode16, pnewlinesNode17);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AAmethoddecl15MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TId tidNode2;
        TLPar tlparNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRPar trparNode5;
        PPartType pparttypeNode6;
        TIs tisNode7;
        PNewlines pnewlinesNode8;
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TBegin tbeginNode11;
        PNewlines pnewlinesNode12;
        LinkedList<Object> listNode14 = new LinkedList<Object>();
        TEnd tendNode15;
        TId tidNode16;
        PNewlines pnewlinesNode17;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode5 = (TRPar)nodeArrayList3.get(0);
        pparttypeNode6 = (PPartType)nodeArrayList4.get(0);
        tisNode7 = (TIs)nodeArrayList5.get(0);
        pnewlinesNode8 = (PNewlines)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList7.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        tbeginNode11 = (TBegin)nodeArrayList8.get(0);
        pnewlinesNode12 = (PNewlines)nodeArrayList9.get(0);
        {
            // Block
        LinkedList<Object> listNode13 = new LinkedList<Object>();
        listNode13 = (LinkedList)nodeArrayList10.get(0);
	if(listNode13 != null)
	{
	  listNode14.addAll(listNode13);
	}
        }
        tendNode15 = (TEnd)nodeArrayList11.get(0);
        tidNode16 = (TId)nodeArrayList12.get(0);
        pnewlinesNode17 = (PNewlines)nodeArrayList13.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidNode2, tlparNode3, null, trparNode5, pparttypeNode6, tisNode7, pnewlinesNode8, listNode10, tbeginNode11, pnewlinesNode12, listNode14, tendNode15, tidNode16, pnewlinesNode17);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AAmethoddecl16MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList14 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TId tidNode2;
        TLPar tlparNode3;
        PArgumentDeclList pargumentdecllistNode4;
        TRPar trparNode5;
        PPartType pparttypeNode6;
        TIs tisNode7;
        PNewlines pnewlinesNode8;
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TBegin tbeginNode11;
        PNewlines pnewlinesNode12;
        LinkedList<Object> listNode14 = new LinkedList<Object>();
        TEnd tendNode15;
        TId tidNode16;
        PNewlines pnewlinesNode17;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pargumentdecllistNode4 = (PArgumentDeclList)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        pparttypeNode6 = (PPartType)nodeArrayList5.get(0);
        tisNode7 = (TIs)nodeArrayList6.get(0);
        pnewlinesNode8 = (PNewlines)nodeArrayList7.get(0);
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList8.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        tbeginNode11 = (TBegin)nodeArrayList9.get(0);
        pnewlinesNode12 = (PNewlines)nodeArrayList10.get(0);
        {
            // Block
        LinkedList<Object> listNode13 = new LinkedList<Object>();
        listNode13 = (LinkedList)nodeArrayList11.get(0);
	if(listNode13 != null)
	{
	  listNode14.addAll(listNode13);
	}
        }
        tendNode15 = (TEnd)nodeArrayList12.get(0);
        tidNode16 = (TId)nodeArrayList13.get(0);
        pnewlinesNode17 = (PNewlines)nodeArrayList14.get(0);

        pmethoddeclNode1 = new AMethodDecl(tidNode2, tlparNode3, pargumentdecllistNode4, trparNode5, pparttypeNode6, tisNode7, pnewlinesNode8, listNode10, tbeginNode11, pnewlinesNode12, listNode14, tendNode15, tidNode16, pnewlinesNode17);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AAargumentdecllist1ArgumentDeclList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgumentDeclList pargumentdecllistNode1;
        {
            // Block
        PArgDecl pargdeclNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pargdeclNode2 = (PArgDecl)nodeArrayList1.get(0);
        {
            // Block
        }

        pargumentdecllistNode1 = new AArgumentDeclList(pargdeclNode2, listNode3);
        }
	nodeList.add(pargumentdecllistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AAargumentdecllist2ArgumentDeclList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgumentDeclList pargumentdecllistNode1;
        {
            // Block
        PArgDecl pargdeclNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pargdeclNode2 = (PArgDecl)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pargumentdecllistNode1 = new AArgumentDeclList(pargdeclNode2, listNode4);
        }
	nodeList.add(pargumentdecllistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AArgDeclTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgDeclTail pargdecltailNode1;
        {
            // Block
        TSemicolon tsemicolonNode2;
        PArgDecl pargdeclNode3;
        tsemicolonNode2 = (TSemicolon)nodeArrayList1.get(0);
        pargdeclNode3 = (PArgDecl)nodeArrayList2.get(0);

        pargdecltailNode1 = new AArgDeclTail(tsemicolonNode2, pargdeclNode3);
        }
	nodeList.add(pargdecltailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AArgDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgDecl pargdeclNode1;
        {
            // Block
        TId tidNode2;
        TColon tcolonNode3;
        PType ptypeNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        ptypeNode4 = (PType)nodeArrayList3.get(0);

        pargdeclNode1 = new AArgDecl(tidNode2, tcolonNode3, ptypeNode4);
        }
	nodeList.add(pargdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AIntType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptypeNode1 = new AIntType(tintNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AStringType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        ptypeNode1 = new AStringType(tstringNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ABooleanType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBoolean tbooleanNode2;
        tbooleanNode2 = (TBoolean)nodeArrayList1.get(0);

        ptypeNode1 = new ABooleanType(tbooleanNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AIdType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        ptypeNode1 = new AIdType(tidNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AAarrtype1Type */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PType ptypeNode2;
        TLBrkt tlbrktNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRBrkt trbrktNode5;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tlbrktNode3 = (TLBrkt)nodeArrayList2.get(0);
        trbrktNode5 = (TRBrkt)nodeArrayList3.get(0);

        ptypeNode1 = new AArrType(ptypeNode2, tlbrktNode3, null, trbrktNode5);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AAarrtype2Type */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PType ptypeNode2;
        TLBrkt tlbrktNode3;
        PExpr pexprNode4;
        TRBrkt trbrktNode5;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tlbrktNode3 = (TLBrkt)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trbrktNode5 = (TRBrkt)nodeArrayList4.get(0);

        ptypeNode1 = new AArrType(ptypeNode2, tlbrktNode3, pexprNode4, trbrktNode5);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AAassignstmt1Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TOpAssign topassignNode4;
        PExpr pexprNode5;
        PNewlines pnewlinesNode6;
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }
        topassignNode4 = (TOpAssign)nodeArrayList2.get(0);
        pexprNode5 = (PExpr)nodeArrayList3.get(0);
        pnewlinesNode6 = (PNewlines)nodeArrayList4.get(0);

        pstmtNode1 = new AAssignStmt(tidNode2, listNode3, topassignNode4, pexprNode5, pnewlinesNode6);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AAassignstmt2Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TOpAssign topassignNode5;
        PExpr pexprNode6;
        PNewlines pnewlinesNode7;
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        topassignNode5 = (TOpAssign)nodeArrayList3.get(0);
        pexprNode6 = (PExpr)nodeArrayList4.get(0);
        pnewlinesNode7 = (PNewlines)nodeArrayList5.get(0);

        pstmtNode1 = new AAssignStmt(tidNode2, listNode4, topassignNode5, pexprNode6, pnewlinesNode7);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AAifstmt1Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TIf tifNode2;
        PExpr pexprNode3;
        TThen tthenNode4;
        PNewlines pnewlinesNode5;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode7 = null;
        TEnd tendNode8;
        TIf tifNode9;
        PNewlines pnewlinesNode10;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        pnewlinesNode5 = (PNewlines)nodeArrayList4.get(0);
        {
            // Block
        }
        tendNode8 = (TEnd)nodeArrayList5.get(0);
        tifNode9 = (TIf)nodeArrayList6.get(0);
        pnewlinesNode10 = (PNewlines)nodeArrayList7.get(0);

        pstmtNode1 = new AIfStmt(tifNode2, pexprNode3, tthenNode4, pnewlinesNode5, listNode6, null, tendNode8, tifNode9, pnewlinesNode10);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AAifstmt2Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TIf tifNode2;
        PExpr pexprNode3;
        TThen tthenNode4;
        PNewlines pnewlinesNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode8 = null;
        TEnd tendNode9;
        TIf tifNode10;
        PNewlines pnewlinesNode11;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        pnewlinesNode5 = (PNewlines)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList5.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        tendNode9 = (TEnd)nodeArrayList6.get(0);
        tifNode10 = (TIf)nodeArrayList7.get(0);
        pnewlinesNode11 = (PNewlines)nodeArrayList8.get(0);

        pstmtNode1 = new AIfStmt(tifNode2, pexprNode3, tthenNode4, pnewlinesNode5, listNode7, null, tendNode9, tifNode10, pnewlinesNode11);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AAifstmt3Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TIf tifNode2;
        PExpr pexprNode3;
        TThen tthenNode4;
        PNewlines pnewlinesNode5;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        PPartElse ppartelseNode7;
        TEnd tendNode8;
        TIf tifNode9;
        PNewlines pnewlinesNode10;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        pnewlinesNode5 = (PNewlines)nodeArrayList4.get(0);
        {
            // Block
        }
        ppartelseNode7 = (PPartElse)nodeArrayList5.get(0);
        tendNode8 = (TEnd)nodeArrayList6.get(0);
        tifNode9 = (TIf)nodeArrayList7.get(0);
        pnewlinesNode10 = (PNewlines)nodeArrayList8.get(0);

        pstmtNode1 = new AIfStmt(tifNode2, pexprNode3, tthenNode4, pnewlinesNode5, listNode6, ppartelseNode7, tendNode8, tifNode9, pnewlinesNode10);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AAifstmt4Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TIf tifNode2;
        PExpr pexprNode3;
        TThen tthenNode4;
        PNewlines pnewlinesNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        PPartElse ppartelseNode8;
        TEnd tendNode9;
        TIf tifNode10;
        PNewlines pnewlinesNode11;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        pnewlinesNode5 = (PNewlines)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList5.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        ppartelseNode8 = (PPartElse)nodeArrayList6.get(0);
        tendNode9 = (TEnd)nodeArrayList7.get(0);
        tifNode10 = (TIf)nodeArrayList8.get(0);
        pnewlinesNode11 = (PNewlines)nodeArrayList9.get(0);

        pstmtNode1 = new AIfStmt(tifNode2, pexprNode3, tthenNode4, pnewlinesNode5, listNode7, ppartelseNode8, tendNode9, tifNode10, pnewlinesNode11);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AAloopstmt1Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TLoop tloopNode2;
        TWhile twhileNode3;
        PExpr pexprNode4;
        PNewlines pnewlinesNode5;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TEnd tendNode7;
        TLoop tloopNode8;
        PNewlines pnewlinesNode9;
        tloopNode2 = (TLoop)nodeArrayList1.get(0);
        twhileNode3 = (TWhile)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        pnewlinesNode5 = (PNewlines)nodeArrayList4.get(0);
        {
            // Block
        }
        tendNode7 = (TEnd)nodeArrayList5.get(0);
        tloopNode8 = (TLoop)nodeArrayList6.get(0);
        pnewlinesNode9 = (PNewlines)nodeArrayList7.get(0);

        pstmtNode1 = new ALoopStmt(tloopNode2, twhileNode3, pexprNode4, pnewlinesNode5, listNode6, tendNode7, tloopNode8, pnewlinesNode9);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AAloopstmt2Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TLoop tloopNode2;
        TWhile twhileNode3;
        PExpr pexprNode4;
        PNewlines pnewlinesNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TEnd tendNode8;
        TLoop tloopNode9;
        PNewlines pnewlinesNode10;
        tloopNode2 = (TLoop)nodeArrayList1.get(0);
        twhileNode3 = (TWhile)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        pnewlinesNode5 = (PNewlines)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList5.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        tendNode8 = (TEnd)nodeArrayList6.get(0);
        tloopNode9 = (TLoop)nodeArrayList7.get(0);
        pnewlinesNode10 = (PNewlines)nodeArrayList8.get(0);

        pstmtNode1 = new ALoopStmt(tloopNode2, twhileNode3, pexprNode4, pnewlinesNode5, listNode7, tendNode8, tloopNode9, pnewlinesNode10);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AAcallstmt1Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TId tidNode3;
        TLPar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRPar trparNode6;
        PNewlines pnewlinesNode7;
        tidNode3 = (TId)nodeArrayList1.get(0);
        tlparNode4 = (TLPar)nodeArrayList2.get(0);
        trparNode6 = (TRPar)nodeArrayList3.get(0);
        pnewlinesNode7 = (PNewlines)nodeArrayList4.get(0);

        pstmtNode1 = new ACallStmt(null, tidNode3, tlparNode4, null, trparNode6, pnewlinesNode7);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AAcallstmt2Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PPartObj ppartobjNode2;
        TId tidNode3;
        TLPar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRPar trparNode6;
        PNewlines pnewlinesNode7;
        ppartobjNode2 = (PPartObj)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        pnewlinesNode7 = (PNewlines)nodeArrayList5.get(0);

        pstmtNode1 = new ACallStmt(ppartobjNode2, tidNode3, tlparNode4, null, trparNode6, pnewlinesNode7);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AAcallstmt3Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TId tidNode3;
        TLPar tlparNode4;
        PExprList pexprlistNode5;
        TRPar trparNode6;
        PNewlines pnewlinesNode7;
        tidNode3 = (TId)nodeArrayList1.get(0);
        tlparNode4 = (TLPar)nodeArrayList2.get(0);
        pexprlistNode5 = (PExprList)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        pnewlinesNode7 = (PNewlines)nodeArrayList5.get(0);

        pstmtNode1 = new ACallStmt(null, tidNode3, tlparNode4, pexprlistNode5, trparNode6, pnewlinesNode7);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AAcallstmt4Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PPartObj ppartobjNode2;
        TId tidNode3;
        TLPar tlparNode4;
        PExprList pexprlistNode5;
        TRPar trparNode6;
        PNewlines pnewlinesNode7;
        ppartobjNode2 = (PPartObj)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pexprlistNode5 = (PExprList)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        pnewlinesNode7 = (PNewlines)nodeArrayList6.get(0);

        pstmtNode1 = new ACallStmt(ppartobjNode2, tidNode3, tlparNode4, pexprlistNode5, trparNode6, pnewlinesNode7);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AApartelse1PartElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPartElse ppartelseNode1;
        {
            // Block
        TElse telseNode2;
        PNewlines pnewlinesNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        telseNode2 = (TElse)nodeArrayList1.get(0);
        pnewlinesNode3 = (PNewlines)nodeArrayList2.get(0);
        {
            // Block
        }

        ppartelseNode1 = new APartElse(telseNode2, pnewlinesNode3, listNode4);
        }
	nodeList.add(ppartelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AApartelse2PartElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPartElse ppartelseNode1;
        {
            // Block
        TElse telseNode2;
        PNewlines pnewlinesNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        telseNode2 = (TElse)nodeArrayList1.get(0);
        pnewlinesNode3 = (PNewlines)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        ppartelseNode1 = new APartElse(telseNode2, pnewlinesNode3, listNode5);
        }
	nodeList.add(ppartelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce APartObj */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPartObj ppartobjNode1;
        {
            // Block
        PExpr9 pexpr9Node2;
        TPeriod tperiodNode3;
        pexpr9Node2 = (PExpr9)nodeArrayList1.get(0);
        tperiodNode3 = (TPeriod)nodeArrayList2.get(0);

        ppartobjNode1 = new APartObj(pexpr9Node2, tperiodNode3);
        }
	nodeList.add(ppartobjNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AAexprlist1ExprList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprList pexprlistNode1;
        {
            // Block
        PExpr pexprNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block
        }

        pexprlistNode1 = new AExprList(pexprNode2, listNode3);
        }
	nodeList.add(pexprlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AAexprlist2ExprList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprList pexprlistNode1;
        {
            // Block
        PExpr pexprNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexprlistNode1 = new AExprList(pexprNode2, listNode4);
        }
	nodeList.add(pexprlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AExprListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprListTail pexprlisttailNode1;
        {
            // Block
        TComma tcommaNode2;
        PExpr pexprNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);

        pexprlisttailNode1 = new AExprListTail(tcommaNode2, pexprNode3);
        }
	nodeList.add(pexprlisttailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AOrExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TOr torNode3;
        PExpr1 pexpr1Node4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        torNode3 = (TOr)nodeArrayList2.get(0);
        pexpr1Node4 = (PExpr1)nodeArrayList3.get(0);

        pexprNode1 = new AOrExpr(pexprNode2, torNode3, pexpr1Node4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AOtherExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr1 pexpr1Node2;
        pexpr1Node2 = (PExpr1)nodeArrayList1.get(0);

        pexprNode1 = new AOtherExpr(pexpr1Node2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AAndExpr1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr1 pexpr1Node1;
        {
            // Block
        PExpr1 pexpr1Node2;
        TAnd tandNode3;
        PExpr2 pexpr2Node4;
        pexpr1Node2 = (PExpr1)nodeArrayList1.get(0);
        tandNode3 = (TAnd)nodeArrayList2.get(0);
        pexpr2Node4 = (PExpr2)nodeArrayList3.get(0);

        pexpr1Node1 = new AAndExpr1(pexpr1Node2, tandNode3, pexpr2Node4);
        }
	nodeList.add(pexpr1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AOtherExpr1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr1 pexpr1Node1;
        {
            // Block
        PExpr2 pexpr2Node2;
        pexpr2Node2 = (PExpr2)nodeArrayList1.get(0);

        pexpr1Node1 = new AOtherExpr1(pexpr2Node2);
        }
	nodeList.add(pexpr1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AEqExpr2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr2 pexpr2Node1;
        {
            // Block
        PExpr3 pexpr3Node2;
        TOpEq topeqNode3;
        PExpr3 pexpr3Node4;
        pexpr3Node2 = (PExpr3)nodeArrayList1.get(0);
        topeqNode3 = (TOpEq)nodeArrayList2.get(0);
        pexpr3Node4 = (PExpr3)nodeArrayList3.get(0);

        pexpr2Node1 = new AEqExpr2(pexpr3Node2, topeqNode3, pexpr3Node4);
        }
	nodeList.add(pexpr2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AGtEqExpr2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr2 pexpr2Node1;
        {
            // Block
        PExpr3 pexpr3Node2;
        TOpGteq topgteqNode3;
        PExpr3 pexpr3Node4;
        pexpr3Node2 = (PExpr3)nodeArrayList1.get(0);
        topgteqNode3 = (TOpGteq)nodeArrayList2.get(0);
        pexpr3Node4 = (PExpr3)nodeArrayList3.get(0);

        pexpr2Node1 = new AGtEqExpr2(pexpr3Node2, topgteqNode3, pexpr3Node4);
        }
	nodeList.add(pexpr2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AGtExpr2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr2 pexpr2Node1;
        {
            // Block
        PExpr3 pexpr3Node2;
        TOpGt topgtNode3;
        PExpr3 pexpr3Node4;
        pexpr3Node2 = (PExpr3)nodeArrayList1.get(0);
        topgtNode3 = (TOpGt)nodeArrayList2.get(0);
        pexpr3Node4 = (PExpr3)nodeArrayList3.get(0);

        pexpr2Node1 = new AGtExpr2(pexpr3Node2, topgtNode3, pexpr3Node4);
        }
	nodeList.add(pexpr2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce AOtherExpr2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr2 pexpr2Node1;
        {
            // Block
        PExpr3 pexpr3Node2;
        pexpr3Node2 = (PExpr3)nodeArrayList1.get(0);

        pexpr2Node1 = new AOtherExpr2(pexpr3Node2);
        }
	nodeList.add(pexpr2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce ACatExpr3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr3 pexpr3Node1;
        {
            // Block
        PExpr3 pexpr3Node2;
        TOpCat topcatNode3;
        PExpr4 pexpr4Node4;
        pexpr3Node2 = (PExpr3)nodeArrayList1.get(0);
        topcatNode3 = (TOpCat)nodeArrayList2.get(0);
        pexpr4Node4 = (PExpr4)nodeArrayList3.get(0);

        pexpr3Node1 = new ACatExpr3(pexpr3Node2, topcatNode3, pexpr4Node4);
        }
	nodeList.add(pexpr3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce AOtherExpr3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr3 pexpr3Node1;
        {
            // Block
        PExpr4 pexpr4Node2;
        pexpr4Node2 = (PExpr4)nodeArrayList1.get(0);

        pexpr3Node1 = new AOtherExpr3(pexpr4Node2);
        }
	nodeList.add(pexpr3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AAddExpr4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr4 pexpr4Node1;
        {
            // Block
        PExpr4 pexpr4Node2;
        TOpPlus topplusNode3;
        PExpr5 pexpr5Node4;
        pexpr4Node2 = (PExpr4)nodeArrayList1.get(0);
        topplusNode3 = (TOpPlus)nodeArrayList2.get(0);
        pexpr5Node4 = (PExpr5)nodeArrayList3.get(0);

        pexpr4Node1 = new AAddExpr4(pexpr4Node2, topplusNode3, pexpr5Node4);
        }
	nodeList.add(pexpr4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce ASubExpr4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr4 pexpr4Node1;
        {
            // Block
        PExpr4 pexpr4Node2;
        TOpMinus topminusNode3;
        PExpr5 pexpr5Node4;
        pexpr4Node2 = (PExpr4)nodeArrayList1.get(0);
        topminusNode3 = (TOpMinus)nodeArrayList2.get(0);
        pexpr5Node4 = (PExpr5)nodeArrayList3.get(0);

        pexpr4Node1 = new ASubExpr4(pexpr4Node2, topminusNode3, pexpr5Node4);
        }
	nodeList.add(pexpr4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce AOtherExpr4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr4 pexpr4Node1;
        {
            // Block
        PExpr5 pexpr5Node2;
        pexpr5Node2 = (PExpr5)nodeArrayList1.get(0);

        pexpr4Node1 = new AOtherExpr4(pexpr5Node2);
        }
	nodeList.add(pexpr4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce AMultExpr5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr5 pexpr5Node1;
        {
            // Block
        PExpr5 pexpr5Node2;
        TOpMult topmultNode3;
        PExpr6 pexpr6Node4;
        pexpr5Node2 = (PExpr5)nodeArrayList1.get(0);
        topmultNode3 = (TOpMult)nodeArrayList2.get(0);
        pexpr6Node4 = (PExpr6)nodeArrayList3.get(0);

        pexpr5Node1 = new AMultExpr5(pexpr5Node2, topmultNode3, pexpr6Node4);
        }
	nodeList.add(pexpr5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce ADivExpr5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr5 pexpr5Node1;
        {
            // Block
        PExpr5 pexpr5Node2;
        TOpDiv topdivNode3;
        PExpr6 pexpr6Node4;
        pexpr5Node2 = (PExpr5)nodeArrayList1.get(0);
        topdivNode3 = (TOpDiv)nodeArrayList2.get(0);
        pexpr6Node4 = (PExpr6)nodeArrayList3.get(0);

        pexpr5Node1 = new ADivExpr5(pexpr5Node2, topdivNode3, pexpr6Node4);
        }
	nodeList.add(pexpr5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce AOtherExpr5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr5 pexpr5Node1;
        {
            // Block
        PExpr6 pexpr6Node2;
        pexpr6Node2 = (PExpr6)nodeArrayList1.get(0);

        pexpr5Node1 = new AOtherExpr5(pexpr6Node2);
        }
	nodeList.add(pexpr5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce ANegExpr6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr6 pexpr6Node1;
        {
            // Block
        TOpMinus topminusNode2;
        PExpr9 pexpr9Node3;
        topminusNode2 = (TOpMinus)nodeArrayList1.get(0);
        pexpr9Node3 = (PExpr9)nodeArrayList2.get(0);

        pexpr6Node1 = new ANegExpr6(topminusNode2, pexpr9Node3);
        }
	nodeList.add(pexpr6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce APosExpr6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr6 pexpr6Node1;
        {
            // Block
        TOpPlus topplusNode2;
        PExpr9 pexpr9Node3;
        topplusNode2 = (TOpPlus)nodeArrayList1.get(0);
        pexpr9Node3 = (PExpr9)nodeArrayList2.get(0);

        pexpr6Node1 = new APosExpr6(topplusNode2, pexpr9Node3);
        }
	nodeList.add(pexpr6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce ANotExpr6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr6 pexpr6Node1;
        {
            // Block
        TNot tnotNode2;
        PExpr9 pexpr9Node3;
        tnotNode2 = (TNot)nodeArrayList1.get(0);
        pexpr9Node3 = (PExpr9)nodeArrayList2.get(0);

        pexpr6Node1 = new ANotExpr6(tnotNode2, pexpr9Node3);
        }
	nodeList.add(pexpr6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce AOtherExpr6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr6 pexpr6Node1;
        {
            // Block
        PExpr9 pexpr9Node2;
        pexpr9Node2 = (PExpr9)nodeArrayList1.get(0);

        pexpr6Node1 = new AOtherExpr6(pexpr9Node2);
        }
	nodeList.add(pexpr6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce AIdExpr9 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr9 pexpr9Node1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pexpr9Node1 = new AIdExpr9(tidNode2);
        }
	nodeList.add(pexpr9Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce ALitExpr9 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr9 pexpr9Node1;
        {
            // Block
        PLit plitNode2;
        plitNode2 = (PLit)nodeArrayList1.get(0);

        pexpr9Node1 = new ALitExpr9(plitNode2);
        }
	nodeList.add(pexpr9Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce AMeExpr9 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr9 pexpr9Node1;
        {
            // Block
        TMe tmeNode2;
        tmeNode2 = (TMe)nodeArrayList1.get(0);

        pexpr9Node1 = new AMeExpr9(tmeNode2);
        }
	nodeList.add(pexpr9Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new92() /* reduce AParExpr9 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr9 pexpr9Node1;
        {
            // Block
        TLPar tlparNode2;
        PExpr pexprNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pexpr9Node1 = new AParExpr9(tlparNode2, pexprNode3, trparNode4);
        }
	nodeList.add(pexpr9Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new93() /* reduce ANewExpr9 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr9 pexpr9Node1;
        {
            // Block
        TNew tnewNode2;
        PType ptypeNode3;
        tnewNode2 = (TNew)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);

        pexpr9Node1 = new ANewExpr9(tnewNode2, ptypeNode3);
        }
	nodeList.add(pexpr9Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new94() /* reduce AAcallexpr91Expr9 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr9 pexpr9Node1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TId tidNode3;
        TLPar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRPar trparNode6;
        tidNode3 = (TId)nodeArrayList1.get(0);
        tlparNode4 = (TLPar)nodeArrayList2.get(0);
        trparNode6 = (TRPar)nodeArrayList3.get(0);

        pexpr9Node1 = new ACallExpr9(null, tidNode3, tlparNode4, null, trparNode6);
        }
	nodeList.add(pexpr9Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new95() /* reduce AAcallexpr92Expr9 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr9 pexpr9Node1;
        {
            // Block
        PPartObj ppartobjNode2;
        TId tidNode3;
        TLPar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRPar trparNode6;
        ppartobjNode2 = (PPartObj)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);

        pexpr9Node1 = new ACallExpr9(ppartobjNode2, tidNode3, tlparNode4, null, trparNode6);
        }
	nodeList.add(pexpr9Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new96() /* reduce AAcallexpr93Expr9 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr9 pexpr9Node1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TId tidNode3;
        TLPar tlparNode4;
        PExprList pexprlistNode5;
        TRPar trparNode6;
        tidNode3 = (TId)nodeArrayList1.get(0);
        tlparNode4 = (TLPar)nodeArrayList2.get(0);
        pexprlistNode5 = (PExprList)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);

        pexpr9Node1 = new ACallExpr9(null, tidNode3, tlparNode4, pexprlistNode5, trparNode6);
        }
	nodeList.add(pexpr9Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new97() /* reduce AAcallexpr94Expr9 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr9 pexpr9Node1;
        {
            // Block
        PPartObj ppartobjNode2;
        TId tidNode3;
        TLPar tlparNode4;
        PExprList pexprlistNode5;
        TRPar trparNode6;
        ppartobjNode2 = (PPartObj)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pexprlistNode5 = (PExprList)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);

        pexpr9Node1 = new ACallExpr9(ppartobjNode2, tidNode3, tlparNode4, pexprlistNode5, trparNode6);
        }
	nodeList.add(pexpr9Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new98() /* reduce AArrInxExpr9 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr9 pexpr9Node1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexpr9Node1 = new AArrInxExpr9(tidNode2, listNode4);
        }
	nodeList.add(pexpr9Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new99() /* reduce APartArrInx */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPartArrInx ppartarrinxNode1;
        {
            // Block
        TLBrkt tlbrktNode2;
        PExpr pexprNode3;
        TRBrkt trbrktNode4;
        tlbrktNode2 = (TLBrkt)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        trbrktNode4 = (TRBrkt)nodeArrayList3.get(0);

        ppartarrinxNode1 = new APartArrInx(tlbrktNode2, pexprNode3, trbrktNode4);
        }
	nodeList.add(ppartarrinxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new100() /* reduce AIntLit */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLit plitNode1;
        {
            // Block
        TIntLit tintlitNode2;
        tintlitNode2 = (TIntLit)nodeArrayList1.get(0);

        plitNode1 = new AIntLit(tintlitNode2);
        }
	nodeList.add(plitNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new101() /* reduce AStrLit */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLit plitNode1;
        {
            // Block
        TStrLit tstrlitNode2;
        tstrlitNode2 = (TStrLit)nodeArrayList1.get(0);

        plitNode1 = new AStrLit(tstrlitNode2);
        }
	nodeList.add(plitNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new102() /* reduce ATrueLit */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLit plitNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        plitNode1 = new ATrueLit(ttrueNode2);
        }
	nodeList.add(plitNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new103() /* reduce AFalseLit */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLit plitNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        plitNode1 = new AFalseLit(tfalseNode2);
        }
	nodeList.add(plitNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new104() /* reduce ANullLitLit */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLit plitNode1;
        {
            // Block
        TNull tnullNode2;
        tnullNode2 = (TNull)nodeArrayList1.get(0);

        plitNode1 = new ANullLitLit(tnullNode2);
        }
	nodeList.add(plitNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new105() /* reduce ATerminal$ClassDefs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PClassDefs pclassdefsNode1;
        pclassdefsNode1 = (PClassDefs)nodeArrayList1.get(0);
	if(pclassdefsNode1 != null)
	{
	  listNode2.add(pclassdefsNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new106() /* reduce ANonTerminal$ClassDefs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PClassDefs pclassdefsNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pclassdefsNode2 = (PClassDefs)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pclassdefsNode2 != null)
	{
	  listNode3.add(pclassdefsNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new107() /* reduce ATerminal$EmptyLine */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        TEmptyLine temptylineNode1;
        temptylineNode1 = (TEmptyLine)nodeArrayList1.get(0);
	if(temptylineNode1 != null)
	{
	  listNode2.add(temptylineNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new108() /* reduce ANonTerminal$EmptyLine */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        TEmptyLine temptylineNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        temptylineNode2 = (TEmptyLine)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(temptylineNode2 != null)
	{
	  listNode3.add(temptylineNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new109() /* reduce ATerminal$VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PVarDecl pvardeclNode1;
        pvardeclNode1 = (PVarDecl)nodeArrayList1.get(0);
	if(pvardeclNode1 != null)
	{
	  listNode2.add(pvardeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new110() /* reduce ANonTerminal$VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PVarDecl pvardeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvardeclNode2 = (PVarDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvardeclNode2 != null)
	{
	  listNode3.add(pvardeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new111() /* reduce ATerminal$MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PMethodDecl pmethoddeclNode1;
        pmethoddeclNode1 = (PMethodDecl)nodeArrayList1.get(0);
	if(pmethoddeclNode1 != null)
	{
	  listNode2.add(pmethoddeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new112() /* reduce ANonTerminal$MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PMethodDecl pmethoddeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmethoddeclNode2 = (PMethodDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmethoddeclNode2 != null)
	{
	  listNode3.add(pmethoddeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new113() /* reduce ATerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	if(pstmtNode1 != null)
	{
	  listNode2.add(pstmtNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new114() /* reduce ANonTerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStmt pstmtNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstmtNode2 = (PStmt)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstmtNode2 != null)
	{
	  listNode3.add(pstmtNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new115() /* reduce ATerminal$ArgDeclTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PArgDeclTail pargdecltailNode1;
        pargdecltailNode1 = (PArgDeclTail)nodeArrayList1.get(0);
	if(pargdecltailNode1 != null)
	{
	  listNode2.add(pargdecltailNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new116() /* reduce ANonTerminal$ArgDeclTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PArgDeclTail pargdecltailNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pargdecltailNode2 = (PArgDeclTail)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pargdecltailNode2 != null)
	{
	  listNode3.add(pargdecltailNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new117() /* reduce ATerminal$PartArrInx */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PPartArrInx ppartarrinxNode1;
        ppartarrinxNode1 = (PPartArrInx)nodeArrayList1.get(0);
	if(ppartarrinxNode1 != null)
	{
	  listNode2.add(ppartarrinxNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new118() /* reduce ANonTerminal$PartArrInx */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PPartArrInx ppartarrinxNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        ppartarrinxNode2 = (PPartArrInx)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(ppartarrinxNode2 != null)
	{
	  listNode3.add(ppartarrinxNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new119() /* reduce ATerminal$ExprListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExprListTail pexprlisttailNode1;
        pexprlisttailNode1 = (PExprListTail)nodeArrayList1.get(0);
	if(pexprlisttailNode1 != null)
	{
	  listNode2.add(pexprlisttailNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new120() /* reduce ANonTerminal$ExprListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExprListTail pexprlisttailNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexprlisttailNode2 = (PExprListTail)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexprlisttailNode2 != null)
	{
	  listNode3.add(pexprlisttailNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {2, SHIFT, 1}, {44, SHIFT, 2}, },
			{{-1, ERROR, 1}, {39, SHIFT, 7}, },
			{{-1, REDUCE, 107}, },
			{{-1, ERROR, 3}, {46, ACCEPT, -1}, },
			{{-1, ERROR, 4}, {2, SHIFT, 1}, },
			{{-1, REDUCE, 0}, {44, SHIFT, 2}, },
			{{-1, REDUCE, 8}, {44, SHIFT, 12}, },
			{{-1, ERROR, 7}, {8, SHIFT, 13}, {10, SHIFT, 14}, },
			{{-1, REDUCE, 1}, {44, SHIFT, 2}, },
			{{-1, REDUCE, 4}, {2, SHIFT, 1}, },
			{{-1, REDUCE, 105}, },
			{{-1, REDUCE, 2}, {44, SHIFT, 2}, },
			{{-1, REDUCE, 108}, },
			{{-1, ERROR, 13}, {6, SHIFT, 21}, },
			{{-1, ERROR, 14}, {44, SHIFT, 2}, },
			{{-1, ERROR, 15}, {10, SHIFT, 23}, },
			{{-1, REDUCE, 5}, {2, SHIFT, 1}, },
			{{-1, REDUCE, 3}, {44, SHIFT, 2}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 6}, {2, SHIFT, 1}, },
			{{-1, REDUCE, 106}, },
			{{-1, ERROR, 21}, {39, SHIFT, 25}, },
			{{-1, ERROR, 22}, {4, SHIFT, 26}, {39, SHIFT, 27}, },
			{{-1, ERROR, 23}, {44, SHIFT, 2}, },
			{{-1, REDUCE, 7}, {2, SHIFT, 1}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 26}, {39, SHIFT, 33}, },
			{{-1, ERROR, 27}, {30, SHIFT, 34}, {31, SHIFT, 35}, {37, SHIFT, 36}, {44, SHIFT, 2}, },
			{{-1, REDUCE, 109}, },
			{{-1, REDUCE, 111}, },
			{{-1, ERROR, 30}, {4, SHIFT, 40}, {39, SHIFT, 27}, },
			{{-1, ERROR, 31}, {4, SHIFT, 43}, {39, SHIFT, 44}, },
			{{-1, ERROR, 32}, {4, SHIFT, 46}, {39, SHIFT, 27}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 34}, {5, SHIFT, 49}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {21, SHIFT, 54}, {23, SHIFT, 55}, {24, SHIFT, 56}, {31, SHIFT, 57}, {39, SHIFT, 58}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, ERROR, 35}, {32, SHIFT, 71}, {39, SHIFT, 72}, },
			{{-1, ERROR, 36}, {0, SHIFT, 75}, {9, SHIFT, 76}, {15, SHIFT, 77}, {39, SHIFT, 78}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 38}, {30, SHIFT, 34}, {44, SHIFT, 2}, },
			{{-1, ERROR, 39}, {44, SHIFT, 2}, },
			{{-1, ERROR, 40}, {39, SHIFT, 83}, },
			{{-1, REDUCE, 110}, },
			{{-1, ERROR, 42}, {4, SHIFT, 84}, {39, SHIFT, 44}, },
			{{-1, ERROR, 43}, {39, SHIFT, 85}, },
			{{-1, ERROR, 44}, {31, SHIFT, 35}, },
			{{-1, REDUCE, 112}, },
			{{-1, ERROR, 46}, {39, SHIFT, 86}, },
			{{-1, ERROR, 47}, {4, SHIFT, 87}, {39, SHIFT, 27}, },
			{{-1, ERROR, 48}, {4, SHIFT, 89}, {39, SHIFT, 44}, },
			{{-1, REDUCE, 103}, },
			{{-1, REDUCE, 91}, },
			{{-1, ERROR, 51}, {0, SHIFT, 75}, {9, SHIFT, 76}, {15, SHIFT, 77}, {39, SHIFT, 78}, },
			{{-1, REDUCE, 104}, },
			{{-1, REDUCE, 102}, },
			{{-1, ERROR, 54}, {5, SHIFT, 49}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {31, SHIFT, 57}, {39, SHIFT, 58}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, ERROR, 55}, {5, SHIFT, 49}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {31, SHIFT, 57}, {39, SHIFT, 58}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, ERROR, 56}, {5, SHIFT, 49}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {31, SHIFT, 57}, {39, SHIFT, 58}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, ERROR, 57}, {5, SHIFT, 49}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {21, SHIFT, 54}, {23, SHIFT, 55}, {24, SHIFT, 56}, {31, SHIFT, 57}, {39, SHIFT, 58}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, REDUCE, 89}, {31, SHIFT, 95}, {33, SHIFT, 96}, },
			{{-1, REDUCE, 100}, },
			{{-1, REDUCE, 101}, },
			{{-1, ERROR, 61}, {39, SHIFT, 99}, },
			{{-1, REDUCE, 24}, {20, SHIFT, 100}, },
			{{-1, REDUCE, 70}, {19, SHIFT, 101}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 76}, {22, SHIFT, 102}, {27, SHIFT, 103}, {28, SHIFT, 104}, {29, SHIFT, 105}, },
			{{-1, REDUCE, 78}, {23, SHIFT, 106}, {24, SHIFT, 107}, },
			{{-1, REDUCE, 81}, {25, SHIFT, 108}, {26, SHIFT, 109}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 88}, {38, SHIFT, 110}, },
			{{-1, REDUCE, 90}, },
			{{-1, ERROR, 71}, {10, SHIFT, 111}, {37, SHIFT, 36}, },
			{{-1, ERROR, 72}, {37, SHIFT, 113}, },
			{{-1, ERROR, 73}, {32, SHIFT, 114}, },
			{{-1, REDUCE, 41}, {36, SHIFT, 115}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 23}, {33, SHIFT, 118}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 81}, {44, SHIFT, 2}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 84}, {39, SHIFT, 120}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 87}, {39, SHIFT, 121}, },
			{{-1, ERROR, 88}, {4, SHIFT, 122}, {39, SHIFT, 44}, },
			{{-1, ERROR, 89}, {39, SHIFT, 123}, },
			{{-1, REDUCE, 93}, {33, SHIFT, 118}, },
			{{-1, REDUCE, 87}, {38, SHIFT, 110}, },
			{{-1, REDUCE, 86}, {38, SHIFT, 110}, },
			{{-1, REDUCE, 85}, {38, SHIFT, 110}, },
			{{-1, ERROR, 94}, {20, SHIFT, 100}, {32, SHIFT, 124}, },
			{{-1, ERROR, 95}, {5, SHIFT, 49}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {21, SHIFT, 54}, {23, SHIFT, 55}, {24, SHIFT, 56}, {31, SHIFT, 57}, {32, SHIFT, 125}, {39, SHIFT, 58}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, ERROR, 96}, {5, SHIFT, 49}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {21, SHIFT, 54}, {23, SHIFT, 55}, {24, SHIFT, 56}, {31, SHIFT, 57}, {39, SHIFT, 58}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, REDUCE, 117}, },
			{{-1, REDUCE, 98}, {33, SHIFT, 96}, },
			{{-1, ERROR, 99}, {31, SHIFT, 130}, },
			{{-1, ERROR, 100}, {5, SHIFT, 49}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {21, SHIFT, 54}, {23, SHIFT, 55}, {24, SHIFT, 56}, {31, SHIFT, 57}, {39, SHIFT, 58}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, ERROR, 101}, {5, SHIFT, 49}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {21, SHIFT, 54}, {23, SHIFT, 55}, {24, SHIFT, 56}, {31, SHIFT, 57}, {39, SHIFT, 58}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, ERROR, 102}, {5, SHIFT, 49}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {21, SHIFT, 54}, {23, SHIFT, 55}, {24, SHIFT, 56}, {31, SHIFT, 57}, {39, SHIFT, 58}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, ERROR, 103}, {5, SHIFT, 49}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {21, SHIFT, 54}, {23, SHIFT, 55}, {24, SHIFT, 56}, {31, SHIFT, 57}, {39, SHIFT, 58}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, ERROR, 104}, {5, SHIFT, 49}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {21, SHIFT, 54}, {23, SHIFT, 55}, {24, SHIFT, 56}, {31, SHIFT, 57}, {39, SHIFT, 58}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, ERROR, 105}, {5, SHIFT, 49}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {21, SHIFT, 54}, {23, SHIFT, 55}, {24, SHIFT, 56}, {31, SHIFT, 57}, {39, SHIFT, 58}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, ERROR, 106}, {5, SHIFT, 49}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {21, SHIFT, 54}, {23, SHIFT, 55}, {24, SHIFT, 56}, {31, SHIFT, 57}, {39, SHIFT, 58}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, ERROR, 107}, {5, SHIFT, 49}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {21, SHIFT, 54}, {23, SHIFT, 55}, {24, SHIFT, 56}, {31, SHIFT, 57}, {39, SHIFT, 58}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, ERROR, 108}, {5, SHIFT, 49}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {21, SHIFT, 54}, {23, SHIFT, 55}, {24, SHIFT, 56}, {31, SHIFT, 57}, {39, SHIFT, 58}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, ERROR, 109}, {5, SHIFT, 49}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {21, SHIFT, 54}, {23, SHIFT, 55}, {24, SHIFT, 56}, {31, SHIFT, 57}, {39, SHIFT, 58}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, REDUCE, 65}, },
			{{-1, ERROR, 111}, {44, SHIFT, 2}, },
			{{-1, ERROR, 112}, {10, SHIFT, 142}, },
			{{-1, ERROR, 113}, {0, SHIFT, 75}, {9, SHIFT, 76}, {15, SHIFT, 77}, {39, SHIFT, 78}, },
			{{-1, ERROR, 114}, {10, SHIFT, 144}, {37, SHIFT, 36}, },
			{{-1, ERROR, 115}, {39, SHIFT, 72}, },
			{{-1, REDUCE, 115}, },
			{{-1, REDUCE, 42}, {36, SHIFT, 115}, },
			{{-1, ERROR, 118}, {5, SHIFT, 49}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {21, SHIFT, 54}, {23, SHIFT, 55}, {24, SHIFT, 56}, {31, SHIFT, 57}, {34, SHIFT, 148}, {39, SHIFT, 58}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 122}, {39, SHIFT, 150}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 92}, },
			{{-1, REDUCE, 94}, },
			{{-1, ERROR, 126}, {32, SHIFT, 151}, },
			{{-1, REDUCE, 66}, {20, SHIFT, 100}, {35, SHIFT, 152}, },
			{{-1, ERROR, 128}, {20, SHIFT, 100}, {34, SHIFT, 155}, },
			{{-1, REDUCE, 118}, },
			{{-1, ERROR, 130}, {5, SHIFT, 49}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {21, SHIFT, 54}, {23, SHIFT, 55}, {24, SHIFT, 56}, {31, SHIFT, 57}, {32, SHIFT, 156}, {39, SHIFT, 58}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, REDUCE, 69}, {19, SHIFT, 101}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 77}, {23, SHIFT, 106}, {24, SHIFT, 107}, },
			{{-1, REDUCE, 75}, {22, SHIFT, 102}, },
			{{-1, REDUCE, 74}, {22, SHIFT, 102}, },
			{{-1, REDUCE, 73}, {22, SHIFT, 102}, },
			{{-1, REDUCE, 79}, {25, SHIFT, 108}, {26, SHIFT, 109}, },
			{{-1, REDUCE, 80}, {25, SHIFT, 108}, {26, SHIFT, 109}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 83}, },
			{{-1, ERROR, 141}, {1, SHIFT, 158}, {39, SHIFT, 159}, },
			{{-1, ERROR, 142}, {44, SHIFT, 2}, },
			{{-1, REDUCE, 44}, {33, SHIFT, 118}, },
			{{-1, ERROR, 144}, {44, SHIFT, 2}, },
			{{-1, ERROR, 145}, {10, SHIFT, 163}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 116}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 149}, {20, SHIFT, 100}, {34, SHIFT, 164}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 96}, },
			{{-1, ERROR, 152}, {5, SHIFT, 49}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {21, SHIFT, 54}, {23, SHIFT, 55}, {24, SHIFT, 56}, {31, SHIFT, 57}, {39, SHIFT, 58}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, REDUCE, 119}, },
			{{-1, REDUCE, 67}, {35, SHIFT, 152}, },
			{{-1, REDUCE, 99}, },
			{{-1, REDUCE, 95}, },
			{{-1, ERROR, 157}, {32, SHIFT, 167}, },
			{{-1, ERROR, 158}, {44, SHIFT, 2}, },
			{{-1, ERROR, 159}, {30, SHIFT, 34}, {37, SHIFT, 36}, {44, SHIFT, 2}, },
			{{-1, ERROR, 160}, {1, SHIFT, 169}, {39, SHIFT, 159}, },
			{{-1, ERROR, 161}, {1, SHIFT, 170}, {39, SHIFT, 159}, },
			{{-1, ERROR, 162}, {1, SHIFT, 172}, {39, SHIFT, 159}, },
			{{-1, ERROR, 163}, {44, SHIFT, 2}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 68}, {20, SHIFT, 100}, },
			{{-1, REDUCE, 120}, },
			{{-1, REDUCE, 97}, },
			{{-1, ERROR, 168}, {4, SHIFT, 175}, {5, SHIFT, 49}, {7, SHIFT, 176}, {11, SHIFT, 177}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {31, SHIFT, 57}, {39, SHIFT, 178}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, ERROR, 169}, {44, SHIFT, 2}, },
			{{-1, ERROR, 170}, {44, SHIFT, 2}, },
			{{-1, ERROR, 171}, {1, SHIFT, 185}, {39, SHIFT, 159}, },
			{{-1, ERROR, 172}, {44, SHIFT, 2}, },
			{{-1, ERROR, 173}, {1, SHIFT, 187}, {39, SHIFT, 159}, },
			{{-1, ERROR, 174}, {1, SHIFT, 188}, {39, SHIFT, 159}, },
			{{-1, ERROR, 175}, {39, SHIFT, 190}, },
			{{-1, ERROR, 176}, {5, SHIFT, 49}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {21, SHIFT, 54}, {23, SHIFT, 55}, {24, SHIFT, 56}, {31, SHIFT, 57}, {39, SHIFT, 58}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, ERROR, 177}, {18, SHIFT, 192}, },
			{{-1, REDUCE, 89}, {30, SHIFT, 193}, {31, SHIFT, 194}, {33, SHIFT, 96}, },
			{{-1, REDUCE, 113}, },
			{{-1, ERROR, 180}, {39, SHIFT, 196}, },
			{{-1, ERROR, 181}, {38, SHIFT, 110}, },
			{{-1, ERROR, 182}, {4, SHIFT, 197}, {5, SHIFT, 49}, {7, SHIFT, 176}, {11, SHIFT, 177}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {31, SHIFT, 57}, {39, SHIFT, 178}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, ERROR, 183}, {4, SHIFT, 199}, {5, SHIFT, 49}, {7, SHIFT, 176}, {11, SHIFT, 177}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {31, SHIFT, 57}, {39, SHIFT, 178}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, ERROR, 184}, {4, SHIFT, 201}, {5, SHIFT, 49}, {7, SHIFT, 176}, {11, SHIFT, 177}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {31, SHIFT, 57}, {39, SHIFT, 178}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, ERROR, 185}, {44, SHIFT, 2}, },
			{{-1, ERROR, 186}, {4, SHIFT, 204}, {5, SHIFT, 49}, {7, SHIFT, 176}, {11, SHIFT, 177}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {31, SHIFT, 57}, {39, SHIFT, 178}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, ERROR, 187}, {44, SHIFT, 2}, },
			{{-1, ERROR, 188}, {44, SHIFT, 2}, },
			{{-1, ERROR, 189}, {1, SHIFT, 208}, {39, SHIFT, 159}, },
			{{-1, ERROR, 190}, {44, SHIFT, 2}, },
			{{-1, ERROR, 191}, {16, SHIFT, 210}, {20, SHIFT, 100}, },
			{{-1, ERROR, 192}, {5, SHIFT, 49}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {21, SHIFT, 54}, {23, SHIFT, 55}, {24, SHIFT, 56}, {31, SHIFT, 57}, {39, SHIFT, 58}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, ERROR, 193}, {5, SHIFT, 49}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {21, SHIFT, 54}, {23, SHIFT, 55}, {24, SHIFT, 56}, {31, SHIFT, 57}, {39, SHIFT, 58}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, ERROR, 194}, {5, SHIFT, 49}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {21, SHIFT, 54}, {23, SHIFT, 55}, {24, SHIFT, 56}, {31, SHIFT, 57}, {32, SHIFT, 213}, {39, SHIFT, 58}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, REDUCE, 98}, {30, SHIFT, 215}, {33, SHIFT, 96}, },
			{{-1, ERROR, 196}, {31, SHIFT, 216}, },
			{{-1, ERROR, 197}, {39, SHIFT, 217}, },
			{{-1, REDUCE, 114}, },
			{{-1, ERROR, 199}, {39, SHIFT, 218}, },
			{{-1, ERROR, 200}, {4, SHIFT, 219}, {5, SHIFT, 49}, {7, SHIFT, 176}, {11, SHIFT, 177}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {31, SHIFT, 57}, {39, SHIFT, 178}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, ERROR, 201}, {39, SHIFT, 220}, },
			{{-1, ERROR, 202}, {4, SHIFT, 221}, {5, SHIFT, 49}, {7, SHIFT, 176}, {11, SHIFT, 177}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {31, SHIFT, 57}, {39, SHIFT, 178}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, ERROR, 203}, {4, SHIFT, 222}, {5, SHIFT, 49}, {7, SHIFT, 176}, {11, SHIFT, 177}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {31, SHIFT, 57}, {39, SHIFT, 178}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, ERROR, 204}, {39, SHIFT, 224}, },
			{{-1, ERROR, 205}, {4, SHIFT, 225}, {5, SHIFT, 49}, {7, SHIFT, 176}, {11, SHIFT, 177}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {31, SHIFT, 57}, {39, SHIFT, 178}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, ERROR, 206}, {4, SHIFT, 226}, {5, SHIFT, 49}, {7, SHIFT, 176}, {11, SHIFT, 177}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {31, SHIFT, 57}, {39, SHIFT, 178}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, ERROR, 207}, {4, SHIFT, 228}, {5, SHIFT, 49}, {7, SHIFT, 176}, {11, SHIFT, 177}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {31, SHIFT, 57}, {39, SHIFT, 178}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, ERROR, 208}, {44, SHIFT, 2}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 210}, {44, SHIFT, 2}, },
			{{-1, ERROR, 211}, {20, SHIFT, 100}, {44, SHIFT, 2}, },
			{{-1, ERROR, 212}, {20, SHIFT, 100}, {44, SHIFT, 2}, },
			{{-1, REDUCE, 94}, {44, SHIFT, 2}, },
			{{-1, ERROR, 214}, {32, SHIFT, 235}, },
			{{-1, ERROR, 215}, {5, SHIFT, 49}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {21, SHIFT, 54}, {23, SHIFT, 55}, {24, SHIFT, 56}, {31, SHIFT, 57}, {39, SHIFT, 58}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, ERROR, 216}, {5, SHIFT, 49}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {21, SHIFT, 54}, {23, SHIFT, 55}, {24, SHIFT, 56}, {31, SHIFT, 57}, {32, SHIFT, 237}, {39, SHIFT, 58}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, ERROR, 217}, {44, SHIFT, 2}, },
			{{-1, ERROR, 218}, {44, SHIFT, 2}, },
			{{-1, ERROR, 219}, {39, SHIFT, 241}, },
			{{-1, ERROR, 220}, {44, SHIFT, 2}, },
			{{-1, ERROR, 221}, {39, SHIFT, 243}, },
			{{-1, ERROR, 222}, {39, SHIFT, 244}, },
			{{-1, ERROR, 223}, {4, SHIFT, 245}, {5, SHIFT, 49}, {7, SHIFT, 176}, {11, SHIFT, 177}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {31, SHIFT, 57}, {39, SHIFT, 178}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, ERROR, 224}, {44, SHIFT, 2}, },
			{{-1, ERROR, 225}, {39, SHIFT, 247}, },
			{{-1, ERROR, 226}, {39, SHIFT, 248}, },
			{{-1, ERROR, 227}, {4, SHIFT, 249}, {5, SHIFT, 49}, {7, SHIFT, 176}, {11, SHIFT, 177}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {31, SHIFT, 57}, {39, SHIFT, 178}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, ERROR, 228}, {39, SHIFT, 250}, },
			{{-1, ERROR, 229}, {4, SHIFT, 251}, {5, SHIFT, 49}, {7, SHIFT, 176}, {11, SHIFT, 177}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {31, SHIFT, 57}, {39, SHIFT, 178}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, ERROR, 230}, {4, SHIFT, 252}, {5, SHIFT, 49}, {7, SHIFT, 176}, {11, SHIFT, 177}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {31, SHIFT, 57}, {39, SHIFT, 178}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, ERROR, 231}, {3, SHIFT, 254}, {4, SHIFT, 255}, {5, SHIFT, 49}, {7, SHIFT, 176}, {11, SHIFT, 177}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {31, SHIFT, 57}, {39, SHIFT, 178}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, ERROR, 232}, {4, SHIFT, 258}, {5, SHIFT, 49}, {7, SHIFT, 176}, {11, SHIFT, 177}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {31, SHIFT, 57}, {39, SHIFT, 178}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 96}, {44, SHIFT, 2}, },
			{{-1, ERROR, 236}, {20, SHIFT, 100}, {44, SHIFT, 2}, },
			{{-1, REDUCE, 95}, {44, SHIFT, 2}, },
			{{-1, ERROR, 238}, {32, SHIFT, 263}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 241}, {44, SHIFT, 2}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 243}, {44, SHIFT, 2}, },
			{{-1, ERROR, 244}, {44, SHIFT, 2}, },
			{{-1, ERROR, 245}, {39, SHIFT, 267}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 247}, {44, SHIFT, 2}, },
			{{-1, ERROR, 248}, {44, SHIFT, 2}, },
			{{-1, ERROR, 249}, {39, SHIFT, 270}, },
			{{-1, ERROR, 250}, {44, SHIFT, 2}, },
			{{-1, ERROR, 251}, {39, SHIFT, 272}, },
			{{-1, ERROR, 252}, {39, SHIFT, 273}, },
			{{-1, ERROR, 253}, {4, SHIFT, 274}, {5, SHIFT, 49}, {7, SHIFT, 176}, {11, SHIFT, 177}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {31, SHIFT, 57}, {39, SHIFT, 178}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, ERROR, 254}, {44, SHIFT, 2}, },
			{{-1, ERROR, 255}, {7, SHIFT, 276}, },
			{{-1, ERROR, 256}, {4, SHIFT, 277}, },
			{{-1, ERROR, 257}, {3, SHIFT, 254}, {4, SHIFT, 278}, {5, SHIFT, 49}, {7, SHIFT, 176}, {11, SHIFT, 177}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {31, SHIFT, 57}, {39, SHIFT, 178}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, ERROR, 258}, {11, SHIFT, 280}, },
			{{-1, ERROR, 259}, {4, SHIFT, 281}, {5, SHIFT, 49}, {7, SHIFT, 176}, {11, SHIFT, 177}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {31, SHIFT, 57}, {39, SHIFT, 178}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 97}, {44, SHIFT, 2}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 267}, {44, SHIFT, 2}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 270}, {44, SHIFT, 2}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 272}, {44, SHIFT, 2}, },
			{{-1, ERROR, 273}, {44, SHIFT, 2}, },
			{{-1, ERROR, 274}, {39, SHIFT, 287}, },
			{{-1, REDUCE, 63}, {5, SHIFT, 49}, {7, SHIFT, 176}, {11, SHIFT, 177}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {31, SHIFT, 57}, {39, SHIFT, 178}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, ERROR, 276}, {44, SHIFT, 2}, },
			{{-1, ERROR, 277}, {7, SHIFT, 290}, },
			{{-1, ERROR, 278}, {7, SHIFT, 291}, },
			{{-1, ERROR, 279}, {4, SHIFT, 292}, },
			{{-1, ERROR, 280}, {44, SHIFT, 2}, },
			{{-1, ERROR, 281}, {11, SHIFT, 294}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 287}, {44, SHIFT, 2}, },
			{{-1, REDUCE, 64}, {5, SHIFT, 49}, {7, SHIFT, 176}, {11, SHIFT, 177}, {12, SHIFT, 50}, {13, SHIFT, 51}, {14, SHIFT, 52}, {17, SHIFT, 53}, {31, SHIFT, 57}, {39, SHIFT, 178}, {40, SHIFT, 59}, {41, SHIFT, 60}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 290}, {44, SHIFT, 2}, },
			{{-1, ERROR, 291}, {44, SHIFT, 2}, },
			{{-1, ERROR, 292}, {7, SHIFT, 298}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 294}, {44, SHIFT, 2}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 298}, {44, SHIFT, 2}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 56}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 3}, },
			{{-1, 37}, {0, 4}, {5, 9}, {8, 16}, {11, 19}, {14, 22}, {17, 24}, {23, 32}, {38, 80}, {39, 82}, {81, 119}, {111, 141}, {142, 161}, {144, 162}, {158, 168}, {163, 174}, {169, 183}, {170, 184}, {172, 186}, {185, 203}, {187, 206}, {188, 207}, {190, 209}, {208, 230}, {210, 231}, {211, 232}, {212, 233}, {213, 234}, {217, 239}, {218, 240}, {220, 242}, {224, 246}, {235, 260}, {236, 261}, {237, 262}, {241, 264}, {243, 265}, {244, 266}, {247, 268}, {248, 269}, {250, 271}, {254, 275}, {263, 282}, {267, 283}, {270, 284}, {272, 285}, {273, 286}, {276, 289}, {280, 293}, {287, 295}, {290, 296}, {291, 297}, {294, 299}, {298, 300}, },
			{{-1, 10}, {11, 20}, {17, 20}, },
			{{-1, 18}, {0, 5}, {4, 8}, },
			{{-1, 15}, },
			{{-1, 28}, {30, 41}, {47, 41}, {160, 41}, {171, 41}, {173, 41}, {189, 41}, },
			{{-1, 38}, {71, 112}, {114, 145}, },
			{{-1, 39}, {38, 81}, },
			{{-1, 29}, {31, 45}, {42, 45}, {48, 45}, {88, 45}, },
			{{-1, 73}, },
			{{-1, 116}, {117, 147}, },
			{{-1, 74}, {115, 146}, },
			{{-1, 79}, {51, 90}, {113, 143}, },
			{{-1, 179}, {182, 198}, {200, 198}, {202, 198}, {205, 198}, {223, 198}, {227, 198}, {229, 198}, {253, 198}, {257, 198}, {259, 198}, {288, 198}, },
			{{-1, 256}, {257, 279}, },
			{{-1, 61}, {168, 180}, {182, 180}, {183, 180}, {184, 180}, {186, 180}, {200, 180}, {202, 180}, {203, 180}, {205, 180}, {206, 180}, {207, 180}, {223, 180}, {227, 180}, {229, 180}, {230, 180}, {231, 180}, {232, 180}, {253, 180}, {257, 180}, {259, 180}, {275, 180}, {288, 180}, },
			{{-1, 126}, {130, 157}, {194, 214}, {216, 238}, },
			{{-1, 153}, {154, 166}, },
			{{-1, 127}, {34, 62}, {57, 94}, {96, 128}, {118, 149}, {152, 165}, {176, 191}, {192, 211}, {193, 212}, {215, 236}, },
			{{-1, 63}, {100, 131}, },
			{{-1, 64}, {101, 132}, },
			{{-1, 65}, {103, 134}, {104, 135}, {105, 136}, },
			{{-1, 66}, {102, 133}, },
			{{-1, 67}, {106, 137}, {107, 138}, },
			{{-1, 68}, {108, 139}, {109, 140}, },
			{{-1, 69}, {54, 91}, {55, 92}, {56, 93}, {168, 181}, {182, 181}, {183, 181}, {184, 181}, {186, 181}, {200, 181}, {202, 181}, {203, 181}, {205, 181}, {206, 181}, {207, 181}, {223, 181}, {227, 181}, {229, 181}, {230, 181}, {231, 181}, {232, 181}, {253, 181}, {257, 181}, {259, 181}, {275, 181}, {288, 181}, },
			{{-1, 97}, {98, 129}, {195, 129}, },
			{{-1, 70}, },
			{{-1, 11}, {8, 17}, },
			{{-1, 6}, },
			{{-1, 30}, {32, 47}, {141, 160}, {161, 171}, {162, 173}, {174, 189}, },
			{{-1, 31}, {30, 42}, {32, 48}, {47, 88}, },
			{{-1, 182}, {183, 200}, {184, 202}, {186, 205}, {203, 223}, {206, 227}, {207, 229}, {230, 253}, {231, 257}, {232, 259}, {275, 288}, },
			{{-1, 117}, },
			{{-1, 98}, {178, 195}, },
			{{-1, 154}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'class', empty line",
			"expecting: id",
			"expecting: 'begin', 'class', 'else', 'end', 'false', 'if', 'loop', 'me', 'new', 'null', 'true', '(', id, int lit, str lit, empty line, EOF",
			"expecting: EOF",
			"expecting: 'class'",
			"expecting: empty line, EOF",
			"expecting: 'inherits', 'is'",
			"expecting: 'class', EOF",
			"expecting: 'from'",
			"expecting: empty line",
			"expecting: 'is'",
			"expecting: 'end', id",
			"expecting: ':=', '(', ':', empty line",
			"expecting: 'begin', 'end', id",
			"expecting: 'false', 'me', 'new', 'null', 'true', 'not', '+', '-', '(', id, int lit, str lit",
			"expecting: ')', id",
			"expecting: 'boolean', 'int', 'string', id",
			"expecting: ':=', empty line",
			"expecting: '('",
			"expecting: 'then', 'and', 'or', '&', '+', '-', '*', '/', '>', '>=', '=', ')', ']', ',', '.', empty line",
			"expecting: 'false', 'me', 'new', 'null', 'true', '(', id, int lit, str lit",
			"expecting: 'then', 'and', 'or', '&', '+', '-', '*', '/', '>', '>=', '=', '(', ')', '[', ']', ',', '.', empty line",
			"expecting: 'or', empty line",
			"expecting: 'then', 'and', 'or', ')', ']', ',', empty line",
			"expecting: 'then', 'and', 'or', '&', '>', '>=', '=', ')', ']', ',', empty line",
			"expecting: 'then', 'and', 'or', '&', '+', '-', '>', '>=', '=', ')', ']', ',', empty line",
			"expecting: 'then', 'and', 'or', '&', '+', '-', '*', '/', '>', '>=', '=', ')', ']', ',', empty line",
			"expecting: 'is', ':'",
			"expecting: ':'",
			"expecting: ')'",
			"expecting: ')', ';'",
			"expecting: 'is', 'then', 'and', 'or', '&', '+', '-', '*', '/', '>', '>=', '=', ':=', ')', '[', ']', ',', ';', '.', empty line",
			"expecting: 'is', ':=', '[', empty line",
			"expecting: 'then', 'and', 'or', '&', '+', '-', '*', '/', '>', '>=', '=', ')', '[', ']', ',', '.', empty line",
			"expecting: 'or', ')'",
			"expecting: 'false', 'me', 'new', 'null', 'true', 'not', '+', '-', '(', ')', id, int lit, str lit",
			"expecting: 'then', 'and', 'or', '&', '+', '-', '*', '/', '>', '>=', '=', ':=', ')', '[', ']', ',', '.', empty line",
			"expecting: 'false', 'me', 'new', 'null', 'true', 'not', '+', '-', '(', ']', id, int lit, str lit",
			"expecting: 'or', ')', ','",
			"expecting: 'or', ']'",
			"expecting: 'then', 'and', 'or', '&', ')', ']', ',', empty line",
			"expecting: 'begin', id",
			"expecting: ')', '[', ';'",
			"expecting: ')', ','",
			"expecting: ':=', ':', empty line",
			"expecting: 'end', 'false', 'if', 'loop', 'me', 'new', 'null', 'true', '(', id, int lit, str lit",
			"expecting: 'while'",
			"expecting: ':=', '(', '[', '.'",
			"expecting: 'else', 'end', 'false', 'if', 'loop', 'me', 'new', 'null', 'true', '(', id, int lit, str lit",
			"expecting: '.'",
			"expecting: 'then', 'or'",
			"expecting: ':=', '[', '.'",
			"expecting: '.', empty line",
			"expecting: 'if'",
			"expecting: 'end'",
			"expecting: 'loop'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 2, 6, 5, 7, 5, 5, 2, 8, 9, 10, 7, 5, 5, 7, 5, 1, 11, 9, 7, 10, 1, 12, 13, 11, 11, 11, 11, 5, 14, 15, 16, 13, 17, 9, 1, 13, 11, 1, 18, 11, 1, 11, 11, 19, 19, 16, 19, 19, 20, 20, 20, 14, 21, 19, 19, 1, 22, 23, 23, 24, 25, 26, 26, 19, 19, 27, 28, 29, 30, 31, 31, 31, 31, 32, 13, 9, 13, 5, 1, 5, 5, 1, 11, 1, 33, 19, 19, 19, 34, 35, 14, 36, 33, 18, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 1, 9, 10, 16, 27, 1, 30, 30, 37, 13, 5, 5, 1, 5, 19, 19, 29, 38, 39, 36, 35, 23, 23, 25, 40, 40, 40, 26, 26, 26, 26, 41, 9, 42, 9, 10, 30, 30, 31, 39, 5, 19, 14, 43, 43, 36, 19, 29, 9, 44, 41, 41, 41, 9, 31, 38, 43, 19, 45, 9, 9, 41, 9, 41, 41, 1, 14, 46, 47, 48, 1, 49, 45, 45, 45, 9, 45, 9, 9, 41, 9, 50, 14, 14, 35, 51, 18, 1, 48, 1, 45, 1, 45, 45, 1, 45, 45, 45, 9, 11, 9, 22, 22, 52, 29, 14, 35, 9, 9, 1, 9, 1, 1, 45, 9, 1, 1, 45, 1, 45, 45, 48, 45, 48, 48, 52, 22, 52, 29, 11, 11, 9, 11, 9, 9, 1, 11, 9, 9, 1, 9, 1, 1, 45, 9, 53, 54, 48, 55, 45, 48, 48, 48, 52, 11, 11, 11, 9, 11, 11, 9, 11, 9, 9, 1, 45, 9, 53, 53, 54, 9, 55, 48, 11, 11, 11, 11, 9, 45, 48, 9, 9, 53, 48, 9, 11, 48, 48, 9, 48, 48, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
