/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.parser;

import cps450.oodle.lexer.*;
import cps450.oodle.node.*;
import cps450.oodle.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PStart node1 = (PStart) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAstart1Start */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAstart2Start */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce AAstart3Start */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list, false);
            }
            break;
            case 3: /* reduce AAstart4Start */
            {
                ArrayList<Object> list = new3();
                push(goTo(0), list, false);
            }
            break;
            case 4: /* reduce AAstart5Start */
            {
                ArrayList<Object> list = new4();
                push(goTo(0), list, false);
            }
            break;
            case 5: /* reduce AAstart6Start */
            {
                ArrayList<Object> list = new5();
                push(goTo(0), list, false);
            }
            break;
            case 6: /* reduce AAstart7Start */
            {
                ArrayList<Object> list = new6();
                push(goTo(0), list, false);
            }
            break;
            case 7: /* reduce AAstart8Start */
            {
                ArrayList<Object> list = new7();
                push(goTo(0), list, false);
            }
            break;
            case 8: /* reduce ACrClassDefinition */
            {
                ArrayList<Object> list = new8();
                push(goTo(1), list, false);
            }
            break;
            case 9: /* reduce AAclassdefinition1ClassDefinition */
            {
                ArrayList<Object> list = new9();
                push(goTo(2), list, false);
            }
            break;
            case 10: /* reduce AAclassdefinition2ClassDefinition */
            {
                ArrayList<Object> list = new10();
                push(goTo(2), list, false);
            }
            break;
            case 11: /* reduce AAclassdefinition3ClassDefinition */
            {
                ArrayList<Object> list = new11();
                push(goTo(2), list, false);
            }
            break;
            case 12: /* reduce AAclassdefinition4ClassDefinition */
            {
                ArrayList<Object> list = new12();
                push(goTo(2), list, false);
            }
            break;
            case 13: /* reduce AAclassdefinition5ClassDefinition */
            {
                ArrayList<Object> list = new13();
                push(goTo(2), list, false);
            }
            break;
            case 14: /* reduce AAclassdefinition6ClassDefinition */
            {
                ArrayList<Object> list = new14();
                push(goTo(2), list, false);
            }
            break;
            case 15: /* reduce AAclassdefinition7ClassDefinition */
            {
                ArrayList<Object> list = new15();
                push(goTo(2), list, false);
            }
            break;
            case 16: /* reduce AAclassdefinition8ClassDefinition */
            {
                ArrayList<Object> list = new16();
                push(goTo(2), list, false);
            }
            break;
            case 17: /* reduce AInheritsProduction */
            {
                ArrayList<Object> list = new17();
                push(goTo(3), list, false);
            }
            break;
            case 18: /* reduce AAvariabledefinition1VariableDefinition */
            {
                ArrayList<Object> list = new18();
                push(goTo(4), list, false);
            }
            break;
            case 19: /* reduce AAvariabledefinition2VariableDefinition */
            {
                ArrayList<Object> list = new19();
                push(goTo(4), list, false);
            }
            break;
            case 20: /* reduce AAvariabledefinition3VariableDefinition */
            {
                ArrayList<Object> list = new20();
                push(goTo(4), list, false);
            }
            break;
            case 21: /* reduce AAvariabledefinition4VariableDefinition */
            {
                ArrayList<Object> list = new21();
                push(goTo(4), list, false);
            }
            break;
            case 22: /* reduce AEqualsExpression */
            {
                ArrayList<Object> list = new22();
                push(goTo(5), list, false);
            }
            break;
            case 23: /* reduce AColonTypeProduction */
            {
                ArrayList<Object> list = new23();
                push(goTo(6), list, false);
            }
            break;
            case 24: /* reduce AAmethoddefinition1MethodDefinition */
            {
                ArrayList<Object> list = new24();
                push(goTo(7), list, false);
            }
            break;
            case 25: /* reduce AAmethoddefinition2MethodDefinition */
            {
                ArrayList<Object> list = new25();
                push(goTo(7), list, false);
            }
            break;
            case 26: /* reduce AAmethoddefinition3MethodDefinition */
            {
                ArrayList<Object> list = new26();
                push(goTo(7), list, false);
            }
            break;
            case 27: /* reduce AAmethoddefinition4MethodDefinition */
            {
                ArrayList<Object> list = new27();
                push(goTo(7), list, false);
            }
            break;
            case 28: /* reduce AAmethoddefinition5MethodDefinition */
            {
                ArrayList<Object> list = new28();
                push(goTo(7), list, false);
            }
            break;
            case 29: /* reduce AAmethoddefinition6MethodDefinition */
            {
                ArrayList<Object> list = new29();
                push(goTo(7), list, false);
            }
            break;
            case 30: /* reduce AAmethoddefinition7MethodDefinition */
            {
                ArrayList<Object> list = new30();
                push(goTo(7), list, false);
            }
            break;
            case 31: /* reduce AAmethoddefinition8MethodDefinition */
            {
                ArrayList<Object> list = new31();
                push(goTo(7), list, false);
            }
            break;
            case 32: /* reduce AAargumentlist1ArgumentList */
            {
                ArrayList<Object> list = new32();
                push(goTo(8), list, false);
            }
            break;
            case 33: /* reduce AAargumentlist2ArgumentList */
            {
                ArrayList<Object> list = new33();
                push(goTo(8), list, false);
            }
            break;
            case 34: /* reduce AArgumentListTail */
            {
                ArrayList<Object> list = new34();
                push(goTo(9), list, false);
            }
            break;
            case 35: /* reduce AIntTypeProduction */
            {
                ArrayList<Object> list = new35();
                push(goTo(10), list, false);
            }
            break;
            case 36: /* reduce ABooleanTypeProduction */
            {
                ArrayList<Object> list = new36();
                push(goTo(10), list, false);
            }
            break;
            case 37: /* reduce AStringTypeProduction */
            {
                ArrayList<Object> list = new37();
                push(goTo(10), list, false);
            }
            break;
            case 38: /* reduce ACustomTypeProduction */
            {
                ArrayList<Object> list = new38();
                push(goTo(10), list, false);
            }
            break;
            case 39: /* reduce AAcustomarraytypeproduction1TypeProduction */
            {
                ArrayList<Object> list = new39();
                push(goTo(10), list, false);
            }
            break;
            case 40: /* reduce AAcustomarraytypeproduction2TypeProduction */
            {
                ArrayList<Object> list = new40();
                push(goTo(10), list, false);
            }
            break;
            case 41: /* reduce AAstatementlist1StatementList */
            {
                ArrayList<Object> list = new41();
                push(goTo(11), list, false);
            }
            break;
            case 42: /* reduce AAstatementlist2StatementList */
            {
                ArrayList<Object> list = new42();
                push(goTo(11), list, false);
            }
            break;
            case 43: /* reduce AStatementCr */
            {
                ArrayList<Object> list = new43();
                push(goTo(12), list, false);
            }
            break;
            case 44: /* reduce AAssignmentStatement */
            {
                ArrayList<Object> list = new44();
                push(goTo(13), list, false);
            }
            break;
            case 45: /* reduce AArrayAssiStatement */
            {
                ArrayList<Object> list = new45();
                push(goTo(13), list, false);
            }
            break;
            case 46: /* reduce AAifstatement1Statement */
            {
                ArrayList<Object> list = new46();
                push(goTo(13), list, false);
            }
            break;
            case 47: /* reduce AAifstatement2Statement */
            {
                ArrayList<Object> list = new47();
                push(goTo(13), list, false);
            }
            break;
            case 48: /* reduce ALoopStatement */
            {
                ArrayList<Object> list = new48();
                push(goTo(13), list, false);
            }
            break;
            case 49: /* reduce AAmethodcalstatement1Statement */
            {
                ArrayList<Object> list = new49();
                push(goTo(13), list, false);
            }
            break;
            case 50: /* reduce AAmethodcalstatement2Statement */
            {
                ArrayList<Object> list = new50();
                push(goTo(13), list, false);
            }
            break;
            case 51: /* reduce AAmethodcalstatement3Statement */
            {
                ArrayList<Object> list = new51();
                push(goTo(13), list, false);
            }
            break;
            case 52: /* reduce AAmethodcalstatement4Statement */
            {
                ArrayList<Object> list = new52();
                push(goTo(13), list, false);
            }
            break;
            case 53: /* reduce AStatementElse */
            {
                ArrayList<Object> list = new53();
                push(goTo(14), list, false);
            }
            break;
            case 54: /* reduce AStatementNdArrayAssi */
            {
                ArrayList<Object> list = new54();
                push(goTo(15), list, false);
            }
            break;
            case 55: /* reduce AObjectCall */
            {
                ArrayList<Object> list = new55();
                push(goTo(16), list, false);
            }
            break;
            case 56: /* reduce AAvalueslist1ValuesList */
            {
                ArrayList<Object> list = new56();
                push(goTo(17), list, false);
            }
            break;
            case 57: /* reduce AAvalueslist2ValuesList */
            {
                ArrayList<Object> list = new57();
                push(goTo(17), list, false);
            }
            break;
            case 58: /* reduce AValuesListTail */
            {
                ArrayList<Object> list = new58();
                push(goTo(18), list, false);
            }
            break;
            case 59: /* reduce AExpression */
            {
                ArrayList<Object> list = new59();
                push(goTo(19), list, false);
            }
            break;
            case 60: /* reduce AOrExpressionLvl6 */
            {
                ArrayList<Object> list = new60();
                push(goTo(20), list, false);
            }
            break;
            case 61: /* reduce APassExpressionLvl6 */
            {
                ArrayList<Object> list = new61();
                push(goTo(20), list, false);
            }
            break;
            case 62: /* reduce AAndExpressionLvl5 */
            {
                ArrayList<Object> list = new62();
                push(goTo(21), list, false);
            }
            break;
            case 63: /* reduce APassExpressionLvl5 */
            {
                ArrayList<Object> list = new63();
                push(goTo(21), list, false);
            }
            break;
            case 64: /* reduce AQtExpressionLvl4 */
            {
                ArrayList<Object> list = new64();
                push(goTo(22), list, false);
            }
            break;
            case 65: /* reduce ALtExpressionLvl4 */
            {
                ArrayList<Object> list = new65();
                push(goTo(22), list, false);
            }
            break;
            case 66: /* reduce AEqExpressionLvl4 */
            {
                ArrayList<Object> list = new66();
                push(goTo(22), list, false);
            }
            break;
            case 67: /* reduce APassExpressionLvl4 */
            {
                ArrayList<Object> list = new67();
                push(goTo(22), list, false);
            }
            break;
            case 68: /* reduce AStrConcatExpressionLvl41 */
            {
                ArrayList<Object> list = new68();
                push(goTo(23), list, false);
            }
            break;
            case 69: /* reduce APassExpressionLvl41 */
            {
                ArrayList<Object> list = new69();
                push(goTo(23), list, false);
            }
            break;
            case 70: /* reduce AAddExpressionLvl3 */
            {
                ArrayList<Object> list = new70();
                push(goTo(24), list, false);
            }
            break;
            case 71: /* reduce ASubExpressionLvl3 */
            {
                ArrayList<Object> list = new71();
                push(goTo(24), list, false);
            }
            break;
            case 72: /* reduce APassExpressionLvl3 */
            {
                ArrayList<Object> list = new72();
                push(goTo(24), list, false);
            }
            break;
            case 73: /* reduce AMulExpressionLvl2 */
            {
                ArrayList<Object> list = new73();
                push(goTo(25), list, false);
            }
            break;
            case 74: /* reduce ADivExpressionLvl2 */
            {
                ArrayList<Object> list = new74();
                push(goTo(25), list, false);
            }
            break;
            case 75: /* reduce APassExpressionLvl2 */
            {
                ArrayList<Object> list = new75();
                push(goTo(25), list, false);
            }
            break;
            case 76: /* reduce ANotExpressionLvl1 */
            {
                ArrayList<Object> list = new76();
                push(goTo(26), list, false);
            }
            break;
            case 77: /* reduce ANegExpressionLvl1 */
            {
                ArrayList<Object> list = new77();
                push(goTo(26), list, false);
            }
            break;
            case 78: /* reduce APlusExpressionLvl1 */
            {
                ArrayList<Object> list = new78();
                push(goTo(26), list, false);
            }
            break;
            case 79: /* reduce APassExpressionLvl1 */
            {
                ArrayList<Object> list = new79();
                push(goTo(26), list, false);
            }
            break;
            case 80: /* reduce AArrayExpressionLvl0 */
            {
                ArrayList<Object> list = new80();
                push(goTo(27), list, false);
            }
            break;
            case 81: /* reduce AAmethodcalexpressionlvl01ExpressionLvl0 */
            {
                ArrayList<Object> list = new81();
                push(goTo(27), list, false);
            }
            break;
            case 82: /* reduce AAmethodcalexpressionlvl02ExpressionLvl0 */
            {
                ArrayList<Object> list = new82();
                push(goTo(27), list, false);
            }
            break;
            case 83: /* reduce AAmethodcalexpressionlvl03ExpressionLvl0 */
            {
                ArrayList<Object> list = new83();
                push(goTo(27), list, false);
            }
            break;
            case 84: /* reduce AAmethodcalexpressionlvl04ExpressionLvl0 */
            {
                ArrayList<Object> list = new84();
                push(goTo(27), list, false);
            }
            break;
            case 85: /* reduce AIntExpressionLvl0 */
            {
                ArrayList<Object> list = new85();
                push(goTo(27), list, false);
            }
            break;
            case 86: /* reduce AStringExpressionLvl0 */
            {
                ArrayList<Object> list = new86();
                push(goTo(27), list, false);
            }
            break;
            case 87: /* reduce ATrueExpressionLvl0 */
            {
                ArrayList<Object> list = new87();
                push(goTo(27), list, false);
            }
            break;
            case 88: /* reduce AFalseExpressionLvl0 */
            {
                ArrayList<Object> list = new88();
                push(goTo(27), list, false);
            }
            break;
            case 89: /* reduce ANullExpressionLvl0 */
            {
                ArrayList<Object> list = new89();
                push(goTo(27), list, false);
            }
            break;
            case 90: /* reduce AMeExpressionLvl0 */
            {
                ArrayList<Object> list = new90();
                push(goTo(27), list, false);
            }
            break;
            case 91: /* reduce AIdentifierExpressionLvl0 */
            {
                ArrayList<Object> list = new91();
                push(goTo(27), list, false);
            }
            break;
            case 92: /* reduce AAnewobjexpressionlvl01ExpressionLvl0 */
            {
                ArrayList<Object> list = new92();
                push(goTo(27), list, false);
            }
            break;
            case 93: /* reduce AAnewobjexpressionlvl02ExpressionLvl0 */
            {
                ArrayList<Object> list = new93();
                push(goTo(27), list, false);
            }
            break;
            case 94: /* reduce ANewArrExpressionLvl0 */
            {
                ArrayList<Object> list = new94();
                push(goTo(27), list, false);
            }
            break;
            case 95: /* reduce ANewClassExpressionLvl0 */
            {
                ArrayList<Object> list = new95();
                push(goTo(27), list, false);
            }
            break;
            case 96: /* reduce AParenExpressionLvl0 */
            {
                ArrayList<Object> list = new96();
                push(goTo(27), list, false);
            }
            break;
            case 97: /* reduce AMethodCallExpr */
            {
                ArrayList<Object> list = new97();
                push(goTo(28), list, false);
            }
            break;
            case 98: /* reduce ATerminal$Cr */
            {
                ArrayList<Object> list = new98();
                push(goTo(29), list, true);
            }
            break;
            case 99: /* reduce ANonTerminal$Cr */
            {
                ArrayList<Object> list = new99();
                push(goTo(29), list, true);
            }
            break;
            case 100: /* reduce ATerminal$CrClassDefinition */
            {
                ArrayList<Object> list = new100();
                push(goTo(30), list, true);
            }
            break;
            case 101: /* reduce ANonTerminal$CrClassDefinition */
            {
                ArrayList<Object> list = new101();
                push(goTo(30), list, true);
            }
            break;
            case 102: /* reduce ATerminal$VariableDefinition */
            {
                ArrayList<Object> list = new102();
                push(goTo(31), list, true);
            }
            break;
            case 103: /* reduce ANonTerminal$VariableDefinition */
            {
                ArrayList<Object> list = new103();
                push(goTo(31), list, true);
            }
            break;
            case 104: /* reduce ATerminal$MethodDefinition */
            {
                ArrayList<Object> list = new104();
                push(goTo(32), list, true);
            }
            break;
            case 105: /* reduce ANonTerminal$MethodDefinition */
            {
                ArrayList<Object> list = new105();
                push(goTo(32), list, true);
            }
            break;
            case 106: /* reduce ATerminal$ArgumentListTail */
            {
                ArrayList<Object> list = new106();
                push(goTo(33), list, true);
            }
            break;
            case 107: /* reduce ANonTerminal$ArgumentListTail */
            {
                ArrayList<Object> list = new107();
                push(goTo(33), list, true);
            }
            break;
            case 108: /* reduce ATerminal$StatementCr */
            {
                ArrayList<Object> list = new108();
                push(goTo(34), list, true);
            }
            break;
            case 109: /* reduce ANonTerminal$StatementCr */
            {
                ArrayList<Object> list = new109();
                push(goTo(34), list, true);
            }
            break;
            case 110: /* reduce ATerminal$StatementNdArrayAssi */
            {
                ArrayList<Object> list = new110();
                push(goTo(35), list, true);
            }
            break;
            case 111: /* reduce ANonTerminal$StatementNdArrayAssi */
            {
                ArrayList<Object> list = new111();
                push(goTo(35), list, true);
            }
            break;
            case 112: /* reduce ATerminal$ObjectCall */
            {
                ArrayList<Object> list = new112();
                push(goTo(36), list, true);
            }
            break;
            case 113: /* reduce ANonTerminal$ObjectCall */
            {
                ArrayList<Object> list = new113();
                push(goTo(36), list, true);
            }
            break;
            case 114: /* reduce ATerminal$ValuesListTail */
            {
                ArrayList<Object> list = new114();
                push(goTo(37), list, true);
            }
            break;
            case 115: /* reduce ANonTerminal$ValuesListTail */
            {
                ArrayList<Object> list = new115();
                push(goTo(37), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAstart1Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PClassDefinition pclassdefinitionNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        }
        pclassdefinitionNode3 = (PClassDefinition)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        }

        pstartNode1 = new AStart(listNode2, pclassdefinitionNode3, listNode4, listNode5);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAstart2Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PClassDefinition pclassdefinitionNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pclassdefinitionNode4 = (PClassDefinition)nodeArrayList2.get(0);
        {
            // Block
        }
        {
            // Block
        }

        pstartNode1 = new AStart(listNode3, pclassdefinitionNode4, listNode5, listNode6);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAstart3Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PClassDefinition pclassdefinitionNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        {
            // Block
        }
        pclassdefinitionNode3 = (PClassDefinition)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }

        pstartNode1 = new AStart(listNode2, pclassdefinitionNode3, listNode5, listNode6);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAstart4Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PClassDefinition pclassdefinitionNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pclassdefinitionNode4 = (PClassDefinition)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        }

        pstartNode1 = new AStart(listNode3, pclassdefinitionNode4, listNode6, listNode7);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAstart5Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PClassDefinition pclassdefinitionNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        {
            // Block
        }
        pclassdefinitionNode3 = (PClassDefinition)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList2.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pstartNode1 = new AStart(listNode2, pclassdefinitionNode3, listNode4, listNode6);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAstart6Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PClassDefinition pclassdefinitionNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pclassdefinitionNode4 = (PClassDefinition)nodeArrayList2.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList3.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pstartNode1 = new AStart(listNode3, pclassdefinitionNode4, listNode5, listNode7);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAstart7Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PClassDefinition pclassdefinitionNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        {
            // Block
        }
        pclassdefinitionNode3 = (PClassDefinition)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList3.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pstartNode1 = new AStart(listNode2, pclassdefinitionNode3, listNode5, listNode7);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAstart8Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PClassDefinition pclassdefinitionNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pclassdefinitionNode4 = (PClassDefinition)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList4.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }

        pstartNode1 = new AStart(listNode3, pclassdefinitionNode4, listNode6, listNode8);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ACrClassDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCrClassDefinition pcrclassdefinitionNode1;
        {
            // Block
        TCr tcrNode2;
        PClassDefinition pclassdefinitionNode3;
        tcrNode2 = (TCr)nodeArrayList1.get(0);
        pclassdefinitionNode3 = (PClassDefinition)nodeArrayList2.get(0);

        pcrclassdefinitionNode1 = new ACrClassDefinition(tcrNode2, pclassdefinitionNode3);
        }
	nodeList.add(pcrclassdefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAclassdefinition1ClassDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDefinition pclassdefinitionNode1;
        {
            // Block
        TClasskey tclasskeyNode2;
        TIdentifier tidentifierNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TIs tisNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TEnd tendNode10;
        TIdentifier tidentifierNode11;
        tclasskeyNode2 = (TClasskey)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tisNode5 = (TIs)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        }
        {
            // Block
        }
        tendNode10 = (TEnd)nodeArrayList5.get(0);
        tidentifierNode11 = (TIdentifier)nodeArrayList6.get(0);

        pclassdefinitionNode1 = new AClassDefinition(tclasskeyNode2, tidentifierNode3, null, tisNode5, listNode7, listNode8, listNode9, tendNode10, tidentifierNode11);
        }
	nodeList.add(pclassdefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAclassdefinition2ClassDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDefinition pclassdefinitionNode1;
        {
            // Block
        TClasskey tclasskeyNode2;
        TIdentifier tidentifierNode3;
        PInheritsProduction pinheritsproductionNode4;
        TIs tisNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TEnd tendNode10;
        TIdentifier tidentifierNode11;
        tclasskeyNode2 = (TClasskey)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        pinheritsproductionNode4 = (PInheritsProduction)nodeArrayList3.get(0);
        tisNode5 = (TIs)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList5.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        }
        {
            // Block
        }
        tendNode10 = (TEnd)nodeArrayList6.get(0);
        tidentifierNode11 = (TIdentifier)nodeArrayList7.get(0);

        pclassdefinitionNode1 = new AClassDefinition(tclasskeyNode2, tidentifierNode3, pinheritsproductionNode4, tisNode5, listNode7, listNode8, listNode9, tendNode10, tidentifierNode11);
        }
	nodeList.add(pclassdefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAclassdefinition3ClassDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDefinition pclassdefinitionNode1;
        {
            // Block
        TClasskey tclasskeyNode2;
        TIdentifier tidentifierNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TIs tisNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TEnd tendNode11;
        TIdentifier tidentifierNode12;
        tclasskeyNode2 = (TClasskey)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tisNode5 = (TIs)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList5.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        {
            // Block
        }
        tendNode11 = (TEnd)nodeArrayList6.get(0);
        tidentifierNode12 = (TIdentifier)nodeArrayList7.get(0);

        pclassdefinitionNode1 = new AClassDefinition(tclasskeyNode2, tidentifierNode3, null, tisNode5, listNode7, listNode9, listNode10, tendNode11, tidentifierNode12);
        }
	nodeList.add(pclassdefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAclassdefinition4ClassDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDefinition pclassdefinitionNode1;
        {
            // Block
        TClasskey tclasskeyNode2;
        TIdentifier tidentifierNode3;
        PInheritsProduction pinheritsproductionNode4;
        TIs tisNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TEnd tendNode11;
        TIdentifier tidentifierNode12;
        tclasskeyNode2 = (TClasskey)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        pinheritsproductionNode4 = (PInheritsProduction)nodeArrayList3.get(0);
        tisNode5 = (TIs)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList5.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList6.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        {
            // Block
        }
        tendNode11 = (TEnd)nodeArrayList7.get(0);
        tidentifierNode12 = (TIdentifier)nodeArrayList8.get(0);

        pclassdefinitionNode1 = new AClassDefinition(tclasskeyNode2, tidentifierNode3, pinheritsproductionNode4, tisNode5, listNode7, listNode9, listNode10, tendNode11, tidentifierNode12);
        }
	nodeList.add(pclassdefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AAclassdefinition5ClassDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDefinition pclassdefinitionNode1;
        {
            // Block
        TClasskey tclasskeyNode2;
        TIdentifier tidentifierNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TIs tisNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TEnd tendNode11;
        TIdentifier tidentifierNode12;
        tclasskeyNode2 = (TClasskey)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tisNode5 = (TIs)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList5.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        tendNode11 = (TEnd)nodeArrayList6.get(0);
        tidentifierNode12 = (TIdentifier)nodeArrayList7.get(0);

        pclassdefinitionNode1 = new AClassDefinition(tclasskeyNode2, tidentifierNode3, null, tisNode5, listNode7, listNode8, listNode10, tendNode11, tidentifierNode12);
        }
	nodeList.add(pclassdefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAclassdefinition6ClassDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDefinition pclassdefinitionNode1;
        {
            // Block
        TClasskey tclasskeyNode2;
        TIdentifier tidentifierNode3;
        PInheritsProduction pinheritsproductionNode4;
        TIs tisNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TEnd tendNode11;
        TIdentifier tidentifierNode12;
        tclasskeyNode2 = (TClasskey)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        pinheritsproductionNode4 = (PInheritsProduction)nodeArrayList3.get(0);
        tisNode5 = (TIs)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList5.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList6.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        tendNode11 = (TEnd)nodeArrayList7.get(0);
        tidentifierNode12 = (TIdentifier)nodeArrayList8.get(0);

        pclassdefinitionNode1 = new AClassDefinition(tclasskeyNode2, tidentifierNode3, pinheritsproductionNode4, tisNode5, listNode7, listNode8, listNode10, tendNode11, tidentifierNode12);
        }
	nodeList.add(pclassdefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAclassdefinition7ClassDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDefinition pclassdefinitionNode1;
        {
            // Block
        TClasskey tclasskeyNode2;
        TIdentifier tidentifierNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TIs tisNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        LinkedList<Object> listNode11 = new LinkedList<Object>();
        TEnd tendNode12;
        TIdentifier tidentifierNode13;
        tclasskeyNode2 = (TClasskey)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tisNode5 = (TIs)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList5.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        {
            // Block
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        listNode10 = (LinkedList)nodeArrayList6.get(0);
	if(listNode10 != null)
	{
	  listNode11.addAll(listNode10);
	}
        }
        tendNode12 = (TEnd)nodeArrayList7.get(0);
        tidentifierNode13 = (TIdentifier)nodeArrayList8.get(0);

        pclassdefinitionNode1 = new AClassDefinition(tclasskeyNode2, tidentifierNode3, null, tisNode5, listNode7, listNode9, listNode11, tendNode12, tidentifierNode13);
        }
	nodeList.add(pclassdefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AAclassdefinition8ClassDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDefinition pclassdefinitionNode1;
        {
            // Block
        TClasskey tclasskeyNode2;
        TIdentifier tidentifierNode3;
        PInheritsProduction pinheritsproductionNode4;
        TIs tisNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        LinkedList<Object> listNode11 = new LinkedList<Object>();
        TEnd tendNode12;
        TIdentifier tidentifierNode13;
        tclasskeyNode2 = (TClasskey)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        pinheritsproductionNode4 = (PInheritsProduction)nodeArrayList3.get(0);
        tisNode5 = (TIs)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList5.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList6.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        {
            // Block
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        listNode10 = (LinkedList)nodeArrayList7.get(0);
	if(listNode10 != null)
	{
	  listNode11.addAll(listNode10);
	}
        }
        tendNode12 = (TEnd)nodeArrayList8.get(0);
        tidentifierNode13 = (TIdentifier)nodeArrayList9.get(0);

        pclassdefinitionNode1 = new AClassDefinition(tclasskeyNode2, tidentifierNode3, pinheritsproductionNode4, tisNode5, listNode7, listNode9, listNode11, tendNode12, tidentifierNode13);
        }
	nodeList.add(pclassdefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AInheritsProduction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInheritsProduction pinheritsproductionNode1;
        {
            // Block
        TInherits tinheritsNode2;
        TFrom tfromNode3;
        tinheritsNode2 = (TInherits)nodeArrayList1.get(0);
        tfromNode3 = (TFrom)nodeArrayList2.get(0);

        pinheritsproductionNode1 = new AInheritsProduction(tinheritsNode2, tfromNode3);
        }
	nodeList.add(pinheritsproductionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAvariabledefinition1VariableDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariableDefinition pvariabledefinitionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        @SuppressWarnings("unused") Object nullNode4 = null;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList2.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pvariabledefinitionNode1 = new AVariableDefinition(tidentifierNode2, null, null, listNode6);
        }
	nodeList.add(pvariabledefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAvariabledefinition2VariableDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariableDefinition pvariabledefinitionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PColonTypeProduction pcolontypeproductionNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        pcolontypeproductionNode3 = (PColonTypeProduction)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pvariabledefinitionNode1 = new AVariableDefinition(tidentifierNode2, pcolontypeproductionNode3, null, listNode6);
        }
	nodeList.add(pvariabledefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAvariabledefinition3VariableDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariableDefinition pvariabledefinitionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        PEqualsExpression pequalsexpressionNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        pequalsexpressionNode4 = (PEqualsExpression)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pvariabledefinitionNode1 = new AVariableDefinition(tidentifierNode2, null, pequalsexpressionNode4, listNode6);
        }
	nodeList.add(pvariabledefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAvariabledefinition4VariableDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariableDefinition pvariabledefinitionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PColonTypeProduction pcolontypeproductionNode3;
        PEqualsExpression pequalsexpressionNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        pcolontypeproductionNode3 = (PColonTypeProduction)nodeArrayList2.get(0);
        pequalsexpressionNode4 = (PEqualsExpression)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pvariabledefinitionNode1 = new AVariableDefinition(tidentifierNode2, pcolontypeproductionNode3, pequalsexpressionNode4, listNode6);
        }
	nodeList.add(pvariabledefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AEqualsExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEqualsExpression pequalsexpressionNode1;
        {
            // Block
        TEquals tequalsNode2;
        PExpression pexpressionNode3;
        tequalsNode2 = (TEquals)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pequalsexpressionNode1 = new AEqualsExpression(tequalsNode2, pexpressionNode3);
        }
	nodeList.add(pequalsexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AColonTypeProduction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PColonTypeProduction pcolontypeproductionNode1;
        {
            // Block
        TColon tcolonNode2;
        PTypeProduction ptypeproductionNode3;
        tcolonNode2 = (TColon)nodeArrayList1.get(0);
        ptypeproductionNode3 = (PTypeProduction)nodeArrayList2.get(0);

        pcolontypeproductionNode1 = new AColonTypeProduction(tcolonNode2, ptypeproductionNode3);
        }
	nodeList.add(pcolontypeproductionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAmethoddefinition1MethodDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDefinition pmethoddefinitionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLeftParen tleftparenNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRightParen trightparenNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TIs tisNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TBegin tbeginNode11;
        LinkedList<Object> listNode13 = new LinkedList<Object>();
        PStatementList pstatementlistNode14;
        TEnd tendNode15;
        TIdentifier tidentifierNode16;
        LinkedList<Object> listNode18 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tleftparenNode3 = (TLeftParen)nodeArrayList2.get(0);
        trightparenNode5 = (TRightParen)nodeArrayList3.get(0);
        tisNode7 = (TIs)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList5.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        {
            // Block
        }
        tbeginNode11 = (TBegin)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode12 = new LinkedList<Object>();
        listNode12 = (LinkedList)nodeArrayList7.get(0);
	if(listNode12 != null)
	{
	  listNode13.addAll(listNode12);
	}
        }
        pstatementlistNode14 = (PStatementList)nodeArrayList8.get(0);
        tendNode15 = (TEnd)nodeArrayList9.get(0);
        tidentifierNode16 = (TIdentifier)nodeArrayList10.get(0);
        {
            // Block
        LinkedList<Object> listNode17 = new LinkedList<Object>();
        listNode17 = (LinkedList)nodeArrayList11.get(0);
	if(listNode17 != null)
	{
	  listNode18.addAll(listNode17);
	}
        }

        pmethoddefinitionNode1 = new AMethodDefinition(tidentifierNode2, tleftparenNode3, null, trightparenNode5, null, tisNode7, listNode9, listNode10, tbeginNode11, listNode13, pstatementlistNode14, tendNode15, tidentifierNode16, listNode18);
        }
	nodeList.add(pmethoddefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAmethoddefinition2MethodDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDefinition pmethoddefinitionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLeftParen tleftparenNode3;
        PArgumentList pargumentlistNode4;
        TRightParen trightparenNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TIs tisNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TBegin tbeginNode11;
        LinkedList<Object> listNode13 = new LinkedList<Object>();
        PStatementList pstatementlistNode14;
        TEnd tendNode15;
        TIdentifier tidentifierNode16;
        LinkedList<Object> listNode18 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tleftparenNode3 = (TLeftParen)nodeArrayList2.get(0);
        pargumentlistNode4 = (PArgumentList)nodeArrayList3.get(0);
        trightparenNode5 = (TRightParen)nodeArrayList4.get(0);
        tisNode7 = (TIs)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList6.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        {
            // Block
        }
        tbeginNode11 = (TBegin)nodeArrayList7.get(0);
        {
            // Block
        LinkedList<Object> listNode12 = new LinkedList<Object>();
        listNode12 = (LinkedList)nodeArrayList8.get(0);
	if(listNode12 != null)
	{
	  listNode13.addAll(listNode12);
	}
        }
        pstatementlistNode14 = (PStatementList)nodeArrayList9.get(0);
        tendNode15 = (TEnd)nodeArrayList10.get(0);
        tidentifierNode16 = (TIdentifier)nodeArrayList11.get(0);
        {
            // Block
        LinkedList<Object> listNode17 = new LinkedList<Object>();
        listNode17 = (LinkedList)nodeArrayList12.get(0);
	if(listNode17 != null)
	{
	  listNode18.addAll(listNode17);
	}
        }

        pmethoddefinitionNode1 = new AMethodDefinition(tidentifierNode2, tleftparenNode3, pargumentlistNode4, trightparenNode5, null, tisNode7, listNode9, listNode10, tbeginNode11, listNode13, pstatementlistNode14, tendNode15, tidentifierNode16, listNode18);
        }
	nodeList.add(pmethoddefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAmethoddefinition3MethodDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDefinition pmethoddefinitionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLeftParen tleftparenNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRightParen trightparenNode5;
        PColonTypeProduction pcolontypeproductionNode6;
        TIs tisNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TBegin tbeginNode11;
        LinkedList<Object> listNode13 = new LinkedList<Object>();
        PStatementList pstatementlistNode14;
        TEnd tendNode15;
        TIdentifier tidentifierNode16;
        LinkedList<Object> listNode18 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tleftparenNode3 = (TLeftParen)nodeArrayList2.get(0);
        trightparenNode5 = (TRightParen)nodeArrayList3.get(0);
        pcolontypeproductionNode6 = (PColonTypeProduction)nodeArrayList4.get(0);
        tisNode7 = (TIs)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList6.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        {
            // Block
        }
        tbeginNode11 = (TBegin)nodeArrayList7.get(0);
        {
            // Block
        LinkedList<Object> listNode12 = new LinkedList<Object>();
        listNode12 = (LinkedList)nodeArrayList8.get(0);
	if(listNode12 != null)
	{
	  listNode13.addAll(listNode12);
	}
        }
        pstatementlistNode14 = (PStatementList)nodeArrayList9.get(0);
        tendNode15 = (TEnd)nodeArrayList10.get(0);
        tidentifierNode16 = (TIdentifier)nodeArrayList11.get(0);
        {
            // Block
        LinkedList<Object> listNode17 = new LinkedList<Object>();
        listNode17 = (LinkedList)nodeArrayList12.get(0);
	if(listNode17 != null)
	{
	  listNode18.addAll(listNode17);
	}
        }

        pmethoddefinitionNode1 = new AMethodDefinition(tidentifierNode2, tleftparenNode3, null, trightparenNode5, pcolontypeproductionNode6, tisNode7, listNode9, listNode10, tbeginNode11, listNode13, pstatementlistNode14, tendNode15, tidentifierNode16, listNode18);
        }
	nodeList.add(pmethoddefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AAmethoddefinition4MethodDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDefinition pmethoddefinitionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLeftParen tleftparenNode3;
        PArgumentList pargumentlistNode4;
        TRightParen trightparenNode5;
        PColonTypeProduction pcolontypeproductionNode6;
        TIs tisNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TBegin tbeginNode11;
        LinkedList<Object> listNode13 = new LinkedList<Object>();
        PStatementList pstatementlistNode14;
        TEnd tendNode15;
        TIdentifier tidentifierNode16;
        LinkedList<Object> listNode18 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tleftparenNode3 = (TLeftParen)nodeArrayList2.get(0);
        pargumentlistNode4 = (PArgumentList)nodeArrayList3.get(0);
        trightparenNode5 = (TRightParen)nodeArrayList4.get(0);
        pcolontypeproductionNode6 = (PColonTypeProduction)nodeArrayList5.get(0);
        tisNode7 = (TIs)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList7.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        {
            // Block
        }
        tbeginNode11 = (TBegin)nodeArrayList8.get(0);
        {
            // Block
        LinkedList<Object> listNode12 = new LinkedList<Object>();
        listNode12 = (LinkedList)nodeArrayList9.get(0);
	if(listNode12 != null)
	{
	  listNode13.addAll(listNode12);
	}
        }
        pstatementlistNode14 = (PStatementList)nodeArrayList10.get(0);
        tendNode15 = (TEnd)nodeArrayList11.get(0);
        tidentifierNode16 = (TIdentifier)nodeArrayList12.get(0);
        {
            // Block
        LinkedList<Object> listNode17 = new LinkedList<Object>();
        listNode17 = (LinkedList)nodeArrayList13.get(0);
	if(listNode17 != null)
	{
	  listNode18.addAll(listNode17);
	}
        }

        pmethoddefinitionNode1 = new AMethodDefinition(tidentifierNode2, tleftparenNode3, pargumentlistNode4, trightparenNode5, pcolontypeproductionNode6, tisNode7, listNode9, listNode10, tbeginNode11, listNode13, pstatementlistNode14, tendNode15, tidentifierNode16, listNode18);
        }
	nodeList.add(pmethoddefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AAmethoddefinition5MethodDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDefinition pmethoddefinitionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLeftParen tleftparenNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRightParen trightparenNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TIs tisNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        LinkedList<Object> listNode11 = new LinkedList<Object>();
        TBegin tbeginNode12;
        LinkedList<Object> listNode14 = new LinkedList<Object>();
        PStatementList pstatementlistNode15;
        TEnd tendNode16;
        TIdentifier tidentifierNode17;
        LinkedList<Object> listNode19 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tleftparenNode3 = (TLeftParen)nodeArrayList2.get(0);
        trightparenNode5 = (TRightParen)nodeArrayList3.get(0);
        tisNode7 = (TIs)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList5.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        {
            // Block
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        listNode10 = (LinkedList)nodeArrayList6.get(0);
	if(listNode10 != null)
	{
	  listNode11.addAll(listNode10);
	}
        }
        tbeginNode12 = (TBegin)nodeArrayList7.get(0);
        {
            // Block
        LinkedList<Object> listNode13 = new LinkedList<Object>();
        listNode13 = (LinkedList)nodeArrayList8.get(0);
	if(listNode13 != null)
	{
	  listNode14.addAll(listNode13);
	}
        }
        pstatementlistNode15 = (PStatementList)nodeArrayList9.get(0);
        tendNode16 = (TEnd)nodeArrayList10.get(0);
        tidentifierNode17 = (TIdentifier)nodeArrayList11.get(0);
        {
            // Block
        LinkedList<Object> listNode18 = new LinkedList<Object>();
        listNode18 = (LinkedList)nodeArrayList12.get(0);
	if(listNode18 != null)
	{
	  listNode19.addAll(listNode18);
	}
        }

        pmethoddefinitionNode1 = new AMethodDefinition(tidentifierNode2, tleftparenNode3, null, trightparenNode5, null, tisNode7, listNode9, listNode11, tbeginNode12, listNode14, pstatementlistNode15, tendNode16, tidentifierNode17, listNode19);
        }
	nodeList.add(pmethoddefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AAmethoddefinition6MethodDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDefinition pmethoddefinitionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLeftParen tleftparenNode3;
        PArgumentList pargumentlistNode4;
        TRightParen trightparenNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TIs tisNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        LinkedList<Object> listNode11 = new LinkedList<Object>();
        TBegin tbeginNode12;
        LinkedList<Object> listNode14 = new LinkedList<Object>();
        PStatementList pstatementlistNode15;
        TEnd tendNode16;
        TIdentifier tidentifierNode17;
        LinkedList<Object> listNode19 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tleftparenNode3 = (TLeftParen)nodeArrayList2.get(0);
        pargumentlistNode4 = (PArgumentList)nodeArrayList3.get(0);
        trightparenNode5 = (TRightParen)nodeArrayList4.get(0);
        tisNode7 = (TIs)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList6.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        {
            // Block
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        listNode10 = (LinkedList)nodeArrayList7.get(0);
	if(listNode10 != null)
	{
	  listNode11.addAll(listNode10);
	}
        }
        tbeginNode12 = (TBegin)nodeArrayList8.get(0);
        {
            // Block
        LinkedList<Object> listNode13 = new LinkedList<Object>();
        listNode13 = (LinkedList)nodeArrayList9.get(0);
	if(listNode13 != null)
	{
	  listNode14.addAll(listNode13);
	}
        }
        pstatementlistNode15 = (PStatementList)nodeArrayList10.get(0);
        tendNode16 = (TEnd)nodeArrayList11.get(0);
        tidentifierNode17 = (TIdentifier)nodeArrayList12.get(0);
        {
            // Block
        LinkedList<Object> listNode18 = new LinkedList<Object>();
        listNode18 = (LinkedList)nodeArrayList13.get(0);
	if(listNode18 != null)
	{
	  listNode19.addAll(listNode18);
	}
        }

        pmethoddefinitionNode1 = new AMethodDefinition(tidentifierNode2, tleftparenNode3, pargumentlistNode4, trightparenNode5, null, tisNode7, listNode9, listNode11, tbeginNode12, listNode14, pstatementlistNode15, tendNode16, tidentifierNode17, listNode19);
        }
	nodeList.add(pmethoddefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AAmethoddefinition7MethodDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDefinition pmethoddefinitionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLeftParen tleftparenNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRightParen trightparenNode5;
        PColonTypeProduction pcolontypeproductionNode6;
        TIs tisNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        LinkedList<Object> listNode11 = new LinkedList<Object>();
        TBegin tbeginNode12;
        LinkedList<Object> listNode14 = new LinkedList<Object>();
        PStatementList pstatementlistNode15;
        TEnd tendNode16;
        TIdentifier tidentifierNode17;
        LinkedList<Object> listNode19 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tleftparenNode3 = (TLeftParen)nodeArrayList2.get(0);
        trightparenNode5 = (TRightParen)nodeArrayList3.get(0);
        pcolontypeproductionNode6 = (PColonTypeProduction)nodeArrayList4.get(0);
        tisNode7 = (TIs)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList6.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        {
            // Block
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        listNode10 = (LinkedList)nodeArrayList7.get(0);
	if(listNode10 != null)
	{
	  listNode11.addAll(listNode10);
	}
        }
        tbeginNode12 = (TBegin)nodeArrayList8.get(0);
        {
            // Block
        LinkedList<Object> listNode13 = new LinkedList<Object>();
        listNode13 = (LinkedList)nodeArrayList9.get(0);
	if(listNode13 != null)
	{
	  listNode14.addAll(listNode13);
	}
        }
        pstatementlistNode15 = (PStatementList)nodeArrayList10.get(0);
        tendNode16 = (TEnd)nodeArrayList11.get(0);
        tidentifierNode17 = (TIdentifier)nodeArrayList12.get(0);
        {
            // Block
        LinkedList<Object> listNode18 = new LinkedList<Object>();
        listNode18 = (LinkedList)nodeArrayList13.get(0);
	if(listNode18 != null)
	{
	  listNode19.addAll(listNode18);
	}
        }

        pmethoddefinitionNode1 = new AMethodDefinition(tidentifierNode2, tleftparenNode3, null, trightparenNode5, pcolontypeproductionNode6, tisNode7, listNode9, listNode11, tbeginNode12, listNode14, pstatementlistNode15, tendNode16, tidentifierNode17, listNode19);
        }
	nodeList.add(pmethoddefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AAmethoddefinition8MethodDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList14 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDefinition pmethoddefinitionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLeftParen tleftparenNode3;
        PArgumentList pargumentlistNode4;
        TRightParen trightparenNode5;
        PColonTypeProduction pcolontypeproductionNode6;
        TIs tisNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        LinkedList<Object> listNode11 = new LinkedList<Object>();
        TBegin tbeginNode12;
        LinkedList<Object> listNode14 = new LinkedList<Object>();
        PStatementList pstatementlistNode15;
        TEnd tendNode16;
        TIdentifier tidentifierNode17;
        LinkedList<Object> listNode19 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tleftparenNode3 = (TLeftParen)nodeArrayList2.get(0);
        pargumentlistNode4 = (PArgumentList)nodeArrayList3.get(0);
        trightparenNode5 = (TRightParen)nodeArrayList4.get(0);
        pcolontypeproductionNode6 = (PColonTypeProduction)nodeArrayList5.get(0);
        tisNode7 = (TIs)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList7.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        {
            // Block
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        listNode10 = (LinkedList)nodeArrayList8.get(0);
	if(listNode10 != null)
	{
	  listNode11.addAll(listNode10);
	}
        }
        tbeginNode12 = (TBegin)nodeArrayList9.get(0);
        {
            // Block
        LinkedList<Object> listNode13 = new LinkedList<Object>();
        listNode13 = (LinkedList)nodeArrayList10.get(0);
	if(listNode13 != null)
	{
	  listNode14.addAll(listNode13);
	}
        }
        pstatementlistNode15 = (PStatementList)nodeArrayList11.get(0);
        tendNode16 = (TEnd)nodeArrayList12.get(0);
        tidentifierNode17 = (TIdentifier)nodeArrayList13.get(0);
        {
            // Block
        LinkedList<Object> listNode18 = new LinkedList<Object>();
        listNode18 = (LinkedList)nodeArrayList14.get(0);
	if(listNode18 != null)
	{
	  listNode19.addAll(listNode18);
	}
        }

        pmethoddefinitionNode1 = new AMethodDefinition(tidentifierNode2, tleftparenNode3, pargumentlistNode4, trightparenNode5, pcolontypeproductionNode6, tisNode7, listNode9, listNode11, tbeginNode12, listNode14, pstatementlistNode15, tendNode16, tidentifierNode17, listNode19);
        }
	nodeList.add(pmethoddefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AAargumentlist1ArgumentList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgumentList pargumentlistNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TColon tcolonNode3;
        PTypeProduction ptypeproductionNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        ptypeproductionNode4 = (PTypeProduction)nodeArrayList3.get(0);
        {
            // Block
        }

        pargumentlistNode1 = new AArgumentList(tidentifierNode2, tcolonNode3, ptypeproductionNode4, listNode5);
        }
	nodeList.add(pargumentlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AAargumentlist2ArgumentList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgumentList pargumentlistNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TColon tcolonNode3;
        PTypeProduction ptypeproductionNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        ptypeproductionNode4 = (PTypeProduction)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pargumentlistNode1 = new AArgumentList(tidentifierNode2, tcolonNode3, ptypeproductionNode4, listNode6);
        }
	nodeList.add(pargumentlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AArgumentListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgumentListTail pargumentlisttailNode1;
        {
            // Block
        TSemicolon tsemicolonNode2;
        TIdentifier tidentifierNode3;
        TColon tcolonNode4;
        PTypeProduction ptypeproductionNode5;
        tsemicolonNode2 = (TSemicolon)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tcolonNode4 = (TColon)nodeArrayList3.get(0);
        ptypeproductionNode5 = (PTypeProduction)nodeArrayList4.get(0);

        pargumentlisttailNode1 = new AArgumentListTail(tsemicolonNode2, tidentifierNode3, tcolonNode4, ptypeproductionNode5);
        }
	nodeList.add(pargumentlisttailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AIntTypeProduction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypeProduction ptypeproductionNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptypeproductionNode1 = new AIntTypeProduction(tintNode2);
        }
	nodeList.add(ptypeproductionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ABooleanTypeProduction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypeProduction ptypeproductionNode1;
        {
            // Block
        TBoolean tbooleanNode2;
        tbooleanNode2 = (TBoolean)nodeArrayList1.get(0);

        ptypeproductionNode1 = new ABooleanTypeProduction(tbooleanNode2);
        }
	nodeList.add(ptypeproductionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AStringTypeProduction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypeProduction ptypeproductionNode1;
        {
            // Block
        TStringClass tstringclassNode2;
        tstringclassNode2 = (TStringClass)nodeArrayList1.get(0);

        ptypeproductionNode1 = new AStringTypeProduction(tstringclassNode2);
        }
	nodeList.add(ptypeproductionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ACustomTypeProduction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypeProduction ptypeproductionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        ptypeproductionNode1 = new ACustomTypeProduction(tidentifierNode2);
        }
	nodeList.add(ptypeproductionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AAcustomarraytypeproduction1TypeProduction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypeProduction ptypeproductionNode1;
        {
            // Block
        PTypeProduction ptypeproductionNode2;
        TLeftBracket tleftbracketNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRightBracket trightbracketNode5;
        ptypeproductionNode2 = (PTypeProduction)nodeArrayList1.get(0);
        tleftbracketNode3 = (TLeftBracket)nodeArrayList2.get(0);
        trightbracketNode5 = (TRightBracket)nodeArrayList3.get(0);

        ptypeproductionNode1 = new ACustomArrayTypeProduction(ptypeproductionNode2, tleftbracketNode3, null, trightbracketNode5);
        }
	nodeList.add(ptypeproductionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AAcustomarraytypeproduction2TypeProduction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypeProduction ptypeproductionNode1;
        {
            // Block
        PTypeProduction ptypeproductionNode2;
        TLeftBracket tleftbracketNode3;
        PExpression pexpressionNode4;
        TRightBracket trightbracketNode5;
        ptypeproductionNode2 = (PTypeProduction)nodeArrayList1.get(0);
        tleftbracketNode3 = (TLeftBracket)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trightbracketNode5 = (TRightBracket)nodeArrayList4.get(0);

        ptypeproductionNode1 = new ACustomArrayTypeProduction(ptypeproductionNode2, tleftbracketNode3, pexpressionNode4, trightbracketNode5);
        }
	nodeList.add(ptypeproductionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AAstatementlist1StatementList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PStatementList pstatementlistNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        pstatementlistNode1 = new AStatementList(listNode2);
        }
	nodeList.add(pstatementlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AAstatementlist2StatementList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementList pstatementlistNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pstatementlistNode1 = new AStatementList(listNode3);
        }
	nodeList.add(pstatementlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AStatementCr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementCr pstatementcrNode1;
        {
            // Block
        PStatement pstatementNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pstatementNode2 = (PStatement)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstatementcrNode1 = new AStatementCr(pstatementNode2, listNode4);
        }
	nodeList.add(pstatementcrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AAssignmentStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TEquals tequalsNode3;
        PExpression pexpressionNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tequalsNode3 = (TEquals)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AAssignmentStatement(tidentifierNode2, tequalsNode3, pexpressionNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AArrayAssiStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TEquals tequalsNode5;
        PExpression pexpressionNode6;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tequalsNode5 = (TEquals)nodeArrayList3.get(0);
        pexpressionNode6 = (PExpression)nodeArrayList4.get(0);

        pstatementNode1 = new AArrayAssiStatement(tidentifierNode2, listNode4, tequalsNode5, pexpressionNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AAifstatement1Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TIf tifNode2;
        PExpression pexpressionNode3;
        TThen tthenNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        PStatementList pstatementlistNode7;
        @SuppressWarnings("unused") Object nullNode8 = null;
        TEnd tendNode9;
        TIf tifNode10;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        pstatementlistNode7 = (PStatementList)nodeArrayList5.get(0);
        tendNode9 = (TEnd)nodeArrayList6.get(0);
        tifNode10 = (TIf)nodeArrayList7.get(0);

        pstatementNode1 = new AIfStatement(tifNode2, pexpressionNode3, tthenNode4, listNode6, pstatementlistNode7, null, tendNode9, tifNode10);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AAifstatement2Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TIf tifNode2;
        PExpression pexpressionNode3;
        TThen tthenNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        PStatementList pstatementlistNode7;
        PStatementElse pstatementelseNode8;
        TEnd tendNode9;
        TIf tifNode10;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        pstatementlistNode7 = (PStatementList)nodeArrayList5.get(0);
        pstatementelseNode8 = (PStatementElse)nodeArrayList6.get(0);
        tendNode9 = (TEnd)nodeArrayList7.get(0);
        tifNode10 = (TIf)nodeArrayList8.get(0);

        pstatementNode1 = new AIfStatement(tifNode2, pexpressionNode3, tthenNode4, listNode6, pstatementlistNode7, pstatementelseNode8, tendNode9, tifNode10);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ALoopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TLoop tloopNode2;
        TWhile twhileNode3;
        PExpression pexpressionNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        PStatementList pstatementlistNode7;
        TEnd tendNode8;
        TLoop tloopNode9;
        tloopNode2 = (TLoop)nodeArrayList1.get(0);
        twhileNode3 = (TWhile)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        pstatementlistNode7 = (PStatementList)nodeArrayList5.get(0);
        tendNode8 = (TEnd)nodeArrayList6.get(0);
        tloopNode9 = (TLoop)nodeArrayList7.get(0);

        pstatementNode1 = new ALoopStatement(tloopNode2, twhileNode3, pexpressionNode4, listNode6, pstatementlistNode7, tendNode8, tloopNode9);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AAmethodcalstatement1Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TLeftParen tleftparenNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRightParen trightparenNode6;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }
        tleftparenNode4 = (TLeftParen)nodeArrayList2.get(0);
        trightparenNode6 = (TRightParen)nodeArrayList3.get(0);

        pstatementNode1 = new AMethodCalStatement(tidentifierNode2, listNode3, tleftparenNode4, null, trightparenNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AAmethodcalstatement2Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TLeftParen tleftparenNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TRightParen trightparenNode7;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tleftparenNode5 = (TLeftParen)nodeArrayList3.get(0);
        trightparenNode7 = (TRightParen)nodeArrayList4.get(0);

        pstatementNode1 = new AMethodCalStatement(tidentifierNode2, listNode4, tleftparenNode5, null, trightparenNode7);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AAmethodcalstatement3Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TLeftParen tleftparenNode4;
        PValuesList pvalueslistNode5;
        TRightParen trightparenNode6;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }
        tleftparenNode4 = (TLeftParen)nodeArrayList2.get(0);
        pvalueslistNode5 = (PValuesList)nodeArrayList3.get(0);
        trightparenNode6 = (TRightParen)nodeArrayList4.get(0);

        pstatementNode1 = new AMethodCalStatement(tidentifierNode2, listNode3, tleftparenNode4, pvalueslistNode5, trightparenNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AAmethodcalstatement4Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TLeftParen tleftparenNode5;
        PValuesList pvalueslistNode6;
        TRightParen trightparenNode7;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tleftparenNode5 = (TLeftParen)nodeArrayList3.get(0);
        pvalueslistNode6 = (PValuesList)nodeArrayList4.get(0);
        trightparenNode7 = (TRightParen)nodeArrayList5.get(0);

        pstatementNode1 = new AMethodCalStatement(tidentifierNode2, listNode4, tleftparenNode5, pvalueslistNode6, trightparenNode7);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AStatementElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementElse pstatementelseNode1;
        {
            // Block
        TElse telseNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PStatementList pstatementlistNode5;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pstatementlistNode5 = (PStatementList)nodeArrayList3.get(0);

        pstatementelseNode1 = new AStatementElse(telseNode2, listNode4, pstatementlistNode5);
        }
	nodeList.add(pstatementelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AStatementNdArrayAssi */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementNdArrayAssi pstatementndarrayassiNode1;
        {
            // Block
        TLeftBracket tleftbracketNode2;
        PExpression pexpressionNode3;
        TRightBracket trightbracketNode4;
        tleftbracketNode2 = (TLeftBracket)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        trightbracketNode4 = (TRightBracket)nodeArrayList3.get(0);

        pstatementndarrayassiNode1 = new AStatementNdArrayAssi(tleftbracketNode2, pexpressionNode3, trightbracketNode4);
        }
	nodeList.add(pstatementndarrayassiNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AObjectCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PObjectCall pobjectcallNode1;
        {
            // Block
        TDot tdotNode2;
        TIdentifier tidentifierNode3;
        tdotNode2 = (TDot)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pobjectcallNode1 = new AObjectCall(tdotNode2, tidentifierNode3);
        }
	nodeList.add(pobjectcallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AAvalueslist1ValuesList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValuesList pvalueslistNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
            // Block
        }

        pvalueslistNode1 = new AValuesList(pexpressionNode2, listNode3);
        }
	nodeList.add(pvalueslistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AAvalueslist2ValuesList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValuesList pvalueslistNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pvalueslistNode1 = new AValuesList(pexpressionNode2, listNode4);
        }
	nodeList.add(pvalueslistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AValuesListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValuesListTail pvalueslisttailNode1;
        {
            // Block
        TComma tcommaNode2;
        PExpression pexpressionNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pvalueslisttailNode1 = new AValuesListTail(tcommaNode2, pexpressionNode3);
        }
	nodeList.add(pvalueslisttailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpressionLvl6 pexpressionlvl6Node2;
        pexpressionlvl6Node2 = (PExpressionLvl6)nodeArrayList1.get(0);

        pexpressionNode1 = new AExpression(pexpressionlvl6Node2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AOrExpressionLvl6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl6 pexpressionlvl6Node1;
        {
            // Block
        PExpressionLvl6 pexpressionlvl6Node2;
        TOr torNode3;
        PExpressionLvl5 pexpressionlvl5Node4;
        pexpressionlvl6Node2 = (PExpressionLvl6)nodeArrayList1.get(0);
        torNode3 = (TOr)nodeArrayList2.get(0);
        pexpressionlvl5Node4 = (PExpressionLvl5)nodeArrayList3.get(0);

        pexpressionlvl6Node1 = new AOrExpressionLvl6(pexpressionlvl6Node2, torNode3, pexpressionlvl5Node4);
        }
	nodeList.add(pexpressionlvl6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce APassExpressionLvl6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl6 pexpressionlvl6Node1;
        {
            // Block
        PExpressionLvl5 pexpressionlvl5Node2;
        pexpressionlvl5Node2 = (PExpressionLvl5)nodeArrayList1.get(0);

        pexpressionlvl6Node1 = new APassExpressionLvl6(pexpressionlvl5Node2);
        }
	nodeList.add(pexpressionlvl6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AAndExpressionLvl5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl5 pexpressionlvl5Node1;
        {
            // Block
        PExpressionLvl5 pexpressionlvl5Node2;
        TAnd tandNode3;
        PExpressionLvl4 pexpressionlvl4Node4;
        pexpressionlvl5Node2 = (PExpressionLvl5)nodeArrayList1.get(0);
        tandNode3 = (TAnd)nodeArrayList2.get(0);
        pexpressionlvl4Node4 = (PExpressionLvl4)nodeArrayList3.get(0);

        pexpressionlvl5Node1 = new AAndExpressionLvl5(pexpressionlvl5Node2, tandNode3, pexpressionlvl4Node4);
        }
	nodeList.add(pexpressionlvl5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce APassExpressionLvl5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl5 pexpressionlvl5Node1;
        {
            // Block
        PExpressionLvl4 pexpressionlvl4Node2;
        pexpressionlvl4Node2 = (PExpressionLvl4)nodeArrayList1.get(0);

        pexpressionlvl5Node1 = new APassExpressionLvl5(pexpressionlvl4Node2);
        }
	nodeList.add(pexpressionlvl5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AQtExpressionLvl4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl4 pexpressionlvl4Node1;
        {
            // Block
        PExpressionLvl4 pexpressionlvl4Node2;
        TGreaterThan tgreaterthanNode3;
        PExpressionLvl41 pexpressionlvl41Node4;
        pexpressionlvl4Node2 = (PExpressionLvl4)nodeArrayList1.get(0);
        tgreaterthanNode3 = (TGreaterThan)nodeArrayList2.get(0);
        pexpressionlvl41Node4 = (PExpressionLvl41)nodeArrayList3.get(0);

        pexpressionlvl4Node1 = new AQtExpressionLvl4(pexpressionlvl4Node2, tgreaterthanNode3, pexpressionlvl41Node4);
        }
	nodeList.add(pexpressionlvl4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ALtExpressionLvl4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl4 pexpressionlvl4Node1;
        {
            // Block
        PExpressionLvl4 pexpressionlvl4Node2;
        TLessThan tlessthanNode3;
        PExpressionLvl41 pexpressionlvl41Node4;
        pexpressionlvl4Node2 = (PExpressionLvl4)nodeArrayList1.get(0);
        tlessthanNode3 = (TLessThan)nodeArrayList2.get(0);
        pexpressionlvl41Node4 = (PExpressionLvl41)nodeArrayList3.get(0);

        pexpressionlvl4Node1 = new ALtExpressionLvl4(pexpressionlvl4Node2, tlessthanNode3, pexpressionlvl41Node4);
        }
	nodeList.add(pexpressionlvl4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AEqExpressionLvl4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl4 pexpressionlvl4Node1;
        {
            // Block
        PExpressionLvl4 pexpressionlvl4Node2;
        TEqOp teqopNode3;
        PExpressionLvl41 pexpressionlvl41Node4;
        pexpressionlvl4Node2 = (PExpressionLvl4)nodeArrayList1.get(0);
        teqopNode3 = (TEqOp)nodeArrayList2.get(0);
        pexpressionlvl41Node4 = (PExpressionLvl41)nodeArrayList3.get(0);

        pexpressionlvl4Node1 = new AEqExpressionLvl4(pexpressionlvl4Node2, teqopNode3, pexpressionlvl41Node4);
        }
	nodeList.add(pexpressionlvl4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce APassExpressionLvl4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl4 pexpressionlvl4Node1;
        {
            // Block
        PExpressionLvl41 pexpressionlvl41Node2;
        pexpressionlvl41Node2 = (PExpressionLvl41)nodeArrayList1.get(0);

        pexpressionlvl4Node1 = new APassExpressionLvl4(pexpressionlvl41Node2);
        }
	nodeList.add(pexpressionlvl4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AStrConcatExpressionLvl41 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl41 pexpressionlvl41Node1;
        {
            // Block
        PExpressionLvl41 pexpressionlvl41Node2;
        TAndOp tandopNode3;
        PExpressionLvl3 pexpressionlvl3Node4;
        pexpressionlvl41Node2 = (PExpressionLvl41)nodeArrayList1.get(0);
        tandopNode3 = (TAndOp)nodeArrayList2.get(0);
        pexpressionlvl3Node4 = (PExpressionLvl3)nodeArrayList3.get(0);

        pexpressionlvl41Node1 = new AStrConcatExpressionLvl41(pexpressionlvl41Node2, tandopNode3, pexpressionlvl3Node4);
        }
	nodeList.add(pexpressionlvl41Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce APassExpressionLvl41 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl41 pexpressionlvl41Node1;
        {
            // Block
        PExpressionLvl3 pexpressionlvl3Node2;
        pexpressionlvl3Node2 = (PExpressionLvl3)nodeArrayList1.get(0);

        pexpressionlvl41Node1 = new APassExpressionLvl41(pexpressionlvl3Node2);
        }
	nodeList.add(pexpressionlvl41Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AAddExpressionLvl3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl3 pexpressionlvl3Node1;
        {
            // Block
        PExpressionLvl3 pexpressionlvl3Node2;
        TPlus tplusNode3;
        PExpressionLvl2 pexpressionlvl2Node4;
        pexpressionlvl3Node2 = (PExpressionLvl3)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pexpressionlvl2Node4 = (PExpressionLvl2)nodeArrayList3.get(0);

        pexpressionlvl3Node1 = new AAddExpressionLvl3(pexpressionlvl3Node2, tplusNode3, pexpressionlvl2Node4);
        }
	nodeList.add(pexpressionlvl3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ASubExpressionLvl3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl3 pexpressionlvl3Node1;
        {
            // Block
        PExpressionLvl3 pexpressionlvl3Node2;
        TMinus tminusNode3;
        PExpressionLvl2 pexpressionlvl2Node4;
        pexpressionlvl3Node2 = (PExpressionLvl3)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pexpressionlvl2Node4 = (PExpressionLvl2)nodeArrayList3.get(0);

        pexpressionlvl3Node1 = new ASubExpressionLvl3(pexpressionlvl3Node2, tminusNode3, pexpressionlvl2Node4);
        }
	nodeList.add(pexpressionlvl3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce APassExpressionLvl3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl3 pexpressionlvl3Node1;
        {
            // Block
        PExpressionLvl2 pexpressionlvl2Node2;
        pexpressionlvl2Node2 = (PExpressionLvl2)nodeArrayList1.get(0);

        pexpressionlvl3Node1 = new APassExpressionLvl3(pexpressionlvl2Node2);
        }
	nodeList.add(pexpressionlvl3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AMulExpressionLvl2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl2 pexpressionlvl2Node1;
        {
            // Block
        PExpressionLvl2 pexpressionlvl2Node2;
        TMultiplication tmultiplicationNode3;
        PExpressionLvl1 pexpressionlvl1Node4;
        pexpressionlvl2Node2 = (PExpressionLvl2)nodeArrayList1.get(0);
        tmultiplicationNode3 = (TMultiplication)nodeArrayList2.get(0);
        pexpressionlvl1Node4 = (PExpressionLvl1)nodeArrayList3.get(0);

        pexpressionlvl2Node1 = new AMulExpressionLvl2(pexpressionlvl2Node2, tmultiplicationNode3, pexpressionlvl1Node4);
        }
	nodeList.add(pexpressionlvl2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce ADivExpressionLvl2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl2 pexpressionlvl2Node1;
        {
            // Block
        PExpressionLvl2 pexpressionlvl2Node2;
        TDivides tdividesNode3;
        PExpressionLvl1 pexpressionlvl1Node4;
        pexpressionlvl2Node2 = (PExpressionLvl2)nodeArrayList1.get(0);
        tdividesNode3 = (TDivides)nodeArrayList2.get(0);
        pexpressionlvl1Node4 = (PExpressionLvl1)nodeArrayList3.get(0);

        pexpressionlvl2Node1 = new ADivExpressionLvl2(pexpressionlvl2Node2, tdividesNode3, pexpressionlvl1Node4);
        }
	nodeList.add(pexpressionlvl2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce APassExpressionLvl2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl2 pexpressionlvl2Node1;
        {
            // Block
        PExpressionLvl1 pexpressionlvl1Node2;
        pexpressionlvl1Node2 = (PExpressionLvl1)nodeArrayList1.get(0);

        pexpressionlvl2Node1 = new APassExpressionLvl2(pexpressionlvl1Node2);
        }
	nodeList.add(pexpressionlvl2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ANotExpressionLvl1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl1 pexpressionlvl1Node1;
        {
            // Block
        TNot tnotNode2;
        PExpressionLvl1 pexpressionlvl1Node3;
        tnotNode2 = (TNot)nodeArrayList1.get(0);
        pexpressionlvl1Node3 = (PExpressionLvl1)nodeArrayList2.get(0);

        pexpressionlvl1Node1 = new ANotExpressionLvl1(tnotNode2, pexpressionlvl1Node3);
        }
	nodeList.add(pexpressionlvl1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce ANegExpressionLvl1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl1 pexpressionlvl1Node1;
        {
            // Block
        TMinus tminusNode2;
        PExpressionLvl1 pexpressionlvl1Node3;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        pexpressionlvl1Node3 = (PExpressionLvl1)nodeArrayList2.get(0);

        pexpressionlvl1Node1 = new ANegExpressionLvl1(tminusNode2, pexpressionlvl1Node3);
        }
	nodeList.add(pexpressionlvl1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce APlusExpressionLvl1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl1 pexpressionlvl1Node1;
        {
            // Block
        TPlus tplusNode2;
        PExpressionLvl1 pexpressionlvl1Node3;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);
        pexpressionlvl1Node3 = (PExpressionLvl1)nodeArrayList2.get(0);

        pexpressionlvl1Node1 = new APlusExpressionLvl1(tplusNode2, pexpressionlvl1Node3);
        }
	nodeList.add(pexpressionlvl1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce APassExpressionLvl1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl1 pexpressionlvl1Node1;
        {
            // Block
        PExpressionLvl0 pexpressionlvl0Node2;
        pexpressionlvl0Node2 = (PExpressionLvl0)nodeArrayList1.get(0);

        pexpressionlvl1Node1 = new APassExpressionLvl1(pexpressionlvl0Node2);
        }
	nodeList.add(pexpressionlvl1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce AArrayExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl0 pexpressionlvl0Node1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLeftBracket tleftbracketNode3;
        PExpression pexpressionNode4;
        TRightBracket trightbracketNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tleftbracketNode3 = (TLeftBracket)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trightbracketNode5 = (TRightBracket)nodeArrayList4.get(0);

        pexpressionlvl0Node1 = new AArrayExpressionLvl0(tidentifierNode2, tleftbracketNode3, pexpressionNode4, trightbracketNode5);
        }
	nodeList.add(pexpressionlvl0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce AAmethodcalexpressionlvl01ExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl0 pexpressionlvl0Node1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        TLeftParen tleftparenNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRightParen trightparenNode6;
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);
        tleftparenNode4 = (TLeftParen)nodeArrayList2.get(0);
        trightparenNode6 = (TRightParen)nodeArrayList3.get(0);

        pexpressionlvl0Node1 = new AMethodCalExpressionLvl0(null, tidentifierNode3, tleftparenNode4, null, trightparenNode6);
        }
	nodeList.add(pexpressionlvl0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce AAmethodcalexpressionlvl02ExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl0 pexpressionlvl0Node1;
        {
            // Block
        PMethodCallExpr pmethodcallexprNode2;
        TIdentifier tidentifierNode3;
        TLeftParen tleftparenNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRightParen trightparenNode6;
        pmethodcallexprNode2 = (PMethodCallExpr)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tleftparenNode4 = (TLeftParen)nodeArrayList3.get(0);
        trightparenNode6 = (TRightParen)nodeArrayList4.get(0);

        pexpressionlvl0Node1 = new AMethodCalExpressionLvl0(pmethodcallexprNode2, tidentifierNode3, tleftparenNode4, null, trightparenNode6);
        }
	nodeList.add(pexpressionlvl0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce AAmethodcalexpressionlvl03ExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl0 pexpressionlvl0Node1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        TLeftParen tleftparenNode4;
        PValuesList pvalueslistNode5;
        TRightParen trightparenNode6;
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);
        tleftparenNode4 = (TLeftParen)nodeArrayList2.get(0);
        pvalueslistNode5 = (PValuesList)nodeArrayList3.get(0);
        trightparenNode6 = (TRightParen)nodeArrayList4.get(0);

        pexpressionlvl0Node1 = new AMethodCalExpressionLvl0(null, tidentifierNode3, tleftparenNode4, pvalueslistNode5, trightparenNode6);
        }
	nodeList.add(pexpressionlvl0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce AAmethodcalexpressionlvl04ExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl0 pexpressionlvl0Node1;
        {
            // Block
        PMethodCallExpr pmethodcallexprNode2;
        TIdentifier tidentifierNode3;
        TLeftParen tleftparenNode4;
        PValuesList pvalueslistNode5;
        TRightParen trightparenNode6;
        pmethodcallexprNode2 = (PMethodCallExpr)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tleftparenNode4 = (TLeftParen)nodeArrayList3.get(0);
        pvalueslistNode5 = (PValuesList)nodeArrayList4.get(0);
        trightparenNode6 = (TRightParen)nodeArrayList5.get(0);

        pexpressionlvl0Node1 = new AMethodCalExpressionLvl0(pmethodcallexprNode2, tidentifierNode3, tleftparenNode4, pvalueslistNode5, trightparenNode6);
        }
	nodeList.add(pexpressionlvl0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce AIntExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl0 pexpressionlvl0Node1;
        {
            // Block
        TIntegerLiteral tintegerliteralNode2;
        tintegerliteralNode2 = (TIntegerLiteral)nodeArrayList1.get(0);

        pexpressionlvl0Node1 = new AIntExpressionLvl0(tintegerliteralNode2);
        }
	nodeList.add(pexpressionlvl0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce AStringExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl0 pexpressionlvl0Node1;
        {
            // Block
        TStringLiteral tstringliteralNode2;
        tstringliteralNode2 = (TStringLiteral)nodeArrayList1.get(0);

        pexpressionlvl0Node1 = new AStringExpressionLvl0(tstringliteralNode2);
        }
	nodeList.add(pexpressionlvl0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce ATrueExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl0 pexpressionlvl0Node1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pexpressionlvl0Node1 = new ATrueExpressionLvl0(ttrueNode2);
        }
	nodeList.add(pexpressionlvl0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce AFalseExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl0 pexpressionlvl0Node1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pexpressionlvl0Node1 = new AFalseExpressionLvl0(tfalseNode2);
        }
	nodeList.add(pexpressionlvl0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce ANullExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl0 pexpressionlvl0Node1;
        {
            // Block
        TNull tnullNode2;
        tnullNode2 = (TNull)nodeArrayList1.get(0);

        pexpressionlvl0Node1 = new ANullExpressionLvl0(tnullNode2);
        }
	nodeList.add(pexpressionlvl0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce AMeExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl0 pexpressionlvl0Node1;
        {
            // Block
        TMe tmeNode2;
        tmeNode2 = (TMe)nodeArrayList1.get(0);

        pexpressionlvl0Node1 = new AMeExpressionLvl0(tmeNode2);
        }
	nodeList.add(pexpressionlvl0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce AIdentifierExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl0 pexpressionlvl0Node1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pexpressionlvl0Node1 = new AIdentifierExpressionLvl0(tidentifierNode2);
        }
	nodeList.add(pexpressionlvl0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new92() /* reduce AAnewobjexpressionlvl01ExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl0 pexpressionlvl0Node1;
        {
            // Block
        TNew tnewNode2;
        TIdentifier tidentifierNode3;
        TLeftParen tleftparenNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRightParen trightparenNode6;
        tnewNode2 = (TNew)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tleftparenNode4 = (TLeftParen)nodeArrayList3.get(0);
        trightparenNode6 = (TRightParen)nodeArrayList4.get(0);

        pexpressionlvl0Node1 = new ANewObjExpressionLvl0(tnewNode2, tidentifierNode3, tleftparenNode4, null, trightparenNode6);
        }
	nodeList.add(pexpressionlvl0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new93() /* reduce AAnewobjexpressionlvl02ExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl0 pexpressionlvl0Node1;
        {
            // Block
        TNew tnewNode2;
        TIdentifier tidentifierNode3;
        TLeftParen tleftparenNode4;
        PValuesList pvalueslistNode5;
        TRightParen trightparenNode6;
        tnewNode2 = (TNew)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tleftparenNode4 = (TLeftParen)nodeArrayList3.get(0);
        pvalueslistNode5 = (PValuesList)nodeArrayList4.get(0);
        trightparenNode6 = (TRightParen)nodeArrayList5.get(0);

        pexpressionlvl0Node1 = new ANewObjExpressionLvl0(tnewNode2, tidentifierNode3, tleftparenNode4, pvalueslistNode5, trightparenNode6);
        }
	nodeList.add(pexpressionlvl0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new94() /* reduce ANewArrExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl0 pexpressionlvl0Node1;
        {
            // Block
        TNew tnewNode2;
        TInt tintNode3;
        TLeftBracket tleftbracketNode4;
        PExpression pexpressionNode5;
        TRightBracket trightbracketNode6;
        tnewNode2 = (TNew)nodeArrayList1.get(0);
        tintNode3 = (TInt)nodeArrayList2.get(0);
        tleftbracketNode4 = (TLeftBracket)nodeArrayList3.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList4.get(0);
        trightbracketNode6 = (TRightBracket)nodeArrayList5.get(0);

        pexpressionlvl0Node1 = new ANewArrExpressionLvl0(tnewNode2, tintNode3, tleftbracketNode4, pexpressionNode5, trightbracketNode6);
        }
	nodeList.add(pexpressionlvl0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new95() /* reduce ANewClassExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl0 pexpressionlvl0Node1;
        {
            // Block
        TNew tnewNode2;
        TIdentifier tidentifierNode3;
        tnewNode2 = (TNew)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pexpressionlvl0Node1 = new ANewClassExpressionLvl0(tnewNode2, tidentifierNode3);
        }
	nodeList.add(pexpressionlvl0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new96() /* reduce AParenExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionLvl0 pexpressionlvl0Node1;
        {
            // Block
        TLeftParen tleftparenNode2;
        PExpression pexpressionNode3;
        TRightParen trightparenNode4;
        tleftparenNode2 = (TLeftParen)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        trightparenNode4 = (TRightParen)nodeArrayList3.get(0);

        pexpressionlvl0Node1 = new AParenExpressionLvl0(tleftparenNode2, pexpressionNode3, trightparenNode4);
        }
	nodeList.add(pexpressionlvl0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new97() /* reduce AMethodCallExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodCallExpr pmethodcallexprNode1;
        {
            // Block
        PExpressionLvl0 pexpressionlvl0Node2;
        TDot tdotNode3;
        pexpressionlvl0Node2 = (PExpressionLvl0)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);

        pmethodcallexprNode1 = new AMethodCallExpr(pexpressionlvl0Node2, tdotNode3);
        }
	nodeList.add(pmethodcallexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new98() /* reduce ATerminal$Cr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        TCr tcrNode1;
        tcrNode1 = (TCr)nodeArrayList1.get(0);
	if(tcrNode1 != null)
	{
	  listNode2.add(tcrNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new99() /* reduce ANonTerminal$Cr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        TCr tcrNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tcrNode2 = (TCr)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tcrNode2 != null)
	{
	  listNode3.add(tcrNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new100() /* reduce ATerminal$CrClassDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PCrClassDefinition pcrclassdefinitionNode1;
        pcrclassdefinitionNode1 = (PCrClassDefinition)nodeArrayList1.get(0);
	if(pcrclassdefinitionNode1 != null)
	{
	  listNode2.add(pcrclassdefinitionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new101() /* reduce ANonTerminal$CrClassDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PCrClassDefinition pcrclassdefinitionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcrclassdefinitionNode2 = (PCrClassDefinition)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcrclassdefinitionNode2 != null)
	{
	  listNode3.add(pcrclassdefinitionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new102() /* reduce ATerminal$VariableDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PVariableDefinition pvariabledefinitionNode1;
        pvariabledefinitionNode1 = (PVariableDefinition)nodeArrayList1.get(0);
	if(pvariabledefinitionNode1 != null)
	{
	  listNode2.add(pvariabledefinitionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new103() /* reduce ANonTerminal$VariableDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PVariableDefinition pvariabledefinitionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvariabledefinitionNode2 = (PVariableDefinition)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvariabledefinitionNode2 != null)
	{
	  listNode3.add(pvariabledefinitionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new104() /* reduce ATerminal$MethodDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PMethodDefinition pmethoddefinitionNode1;
        pmethoddefinitionNode1 = (PMethodDefinition)nodeArrayList1.get(0);
	if(pmethoddefinitionNode1 != null)
	{
	  listNode2.add(pmethoddefinitionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new105() /* reduce ANonTerminal$MethodDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PMethodDefinition pmethoddefinitionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmethoddefinitionNode2 = (PMethodDefinition)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmethoddefinitionNode2 != null)
	{
	  listNode3.add(pmethoddefinitionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new106() /* reduce ATerminal$ArgumentListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PArgumentListTail pargumentlisttailNode1;
        pargumentlisttailNode1 = (PArgumentListTail)nodeArrayList1.get(0);
	if(pargumentlisttailNode1 != null)
	{
	  listNode2.add(pargumentlisttailNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new107() /* reduce ANonTerminal$ArgumentListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PArgumentListTail pargumentlisttailNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pargumentlisttailNode2 = (PArgumentListTail)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pargumentlisttailNode2 != null)
	{
	  listNode3.add(pargumentlisttailNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new108() /* reduce ATerminal$StatementCr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStatementCr pstatementcrNode1;
        pstatementcrNode1 = (PStatementCr)nodeArrayList1.get(0);
	if(pstatementcrNode1 != null)
	{
	  listNode2.add(pstatementcrNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new109() /* reduce ANonTerminal$StatementCr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStatementCr pstatementcrNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstatementcrNode2 = (PStatementCr)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstatementcrNode2 != null)
	{
	  listNode3.add(pstatementcrNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new110() /* reduce ATerminal$StatementNdArrayAssi */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStatementNdArrayAssi pstatementndarrayassiNode1;
        pstatementndarrayassiNode1 = (PStatementNdArrayAssi)nodeArrayList1.get(0);
	if(pstatementndarrayassiNode1 != null)
	{
	  listNode2.add(pstatementndarrayassiNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new111() /* reduce ANonTerminal$StatementNdArrayAssi */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStatementNdArrayAssi pstatementndarrayassiNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstatementndarrayassiNode2 = (PStatementNdArrayAssi)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstatementndarrayassiNode2 != null)
	{
	  listNode3.add(pstatementndarrayassiNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new112() /* reduce ATerminal$ObjectCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PObjectCall pobjectcallNode1;
        pobjectcallNode1 = (PObjectCall)nodeArrayList1.get(0);
	if(pobjectcallNode1 != null)
	{
	  listNode2.add(pobjectcallNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new113() /* reduce ANonTerminal$ObjectCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PObjectCall pobjectcallNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pobjectcallNode2 = (PObjectCall)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pobjectcallNode2 != null)
	{
	  listNode3.add(pobjectcallNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new114() /* reduce ATerminal$ValuesListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PValuesListTail pvalueslisttailNode1;
        pvalueslisttailNode1 = (PValuesListTail)nodeArrayList1.get(0);
	if(pvalueslisttailNode1 != null)
	{
	  listNode2.add(pvalueslisttailNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new115() /* reduce ANonTerminal$ValuesListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PValuesListTail pvalueslisttailNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvalueslisttailNode2 = (PValuesListTail)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvalueslisttailNode2 != null)
	{
	  listNode3.add(pvalueslisttailNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {1, SHIFT, 1}, {4, SHIFT, 2}, },
			{{-1, REDUCE, 98}, },
			{{-1, ERROR, 2}, {42, SHIFT, 6}, },
			{{-1, ERROR, 3}, {49, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, {1, SHIFT, 7}, },
			{{-1, ERROR, 5}, {1, SHIFT, 11}, {4, SHIFT, 2}, },
			{{-1, ERROR, 6}, {10, SHIFT, 13}, {12, SHIFT, 14}, },
			{{-1, REDUCE, 98}, {4, SHIFT, 2}, },
			{{-1, REDUCE, 100}, },
			{{-1, REDUCE, 4}, {1, SHIFT, 11}, },
			{{-1, REDUCE, 2}, {1, SHIFT, 7}, },
			{{-1, REDUCE, 99}, },
			{{-1, REDUCE, 1}, {1, SHIFT, 7}, },
			{{-1, ERROR, 13}, {8, SHIFT, 21}, },
			{{-1, ERROR, 14}, {1, SHIFT, 1}, },
			{{-1, ERROR, 15}, {12, SHIFT, 23}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 101}, },
			{{-1, REDUCE, 6}, {1, SHIFT, 11}, },
			{{-1, REDUCE, 5}, {1, SHIFT, 11}, },
			{{-1, REDUCE, 3}, {1, SHIFT, 7}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 22}, {1, SHIFT, 11}, {6, SHIFT, 25}, {42, SHIFT, 26}, },
			{{-1, ERROR, 23}, {1, SHIFT, 1}, },
			{{-1, REDUCE, 7}, {1, SHIFT, 11}, },
			{{-1, ERROR, 25}, {42, SHIFT, 32}, },
			{{-1, ERROR, 26}, {1, SHIFT, 1}, {33, SHIFT, 33}, {34, SHIFT, 34}, {40, SHIFT, 35}, },
			{{-1, REDUCE, 102}, },
			{{-1, REDUCE, 104}, },
			{{-1, ERROR, 29}, {6, SHIFT, 39}, {42, SHIFT, 26}, },
			{{-1, ERROR, 30}, {6, SHIFT, 42}, {42, SHIFT, 43}, },
			{{-1, ERROR, 31}, {1, SHIFT, 11}, {6, SHIFT, 45}, {42, SHIFT, 26}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 33}, {7, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {16, SHIFT, 51}, {19, SHIFT, 52}, {23, SHIFT, 53}, {25, SHIFT, 54}, {26, SHIFT, 55}, {34, SHIFT, 56}, {42, SHIFT, 57}, {43, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 34}, {35, SHIFT, 70}, {42, SHIFT, 71}, },
			{{-1, ERROR, 35}, {2, SHIFT, 73}, {11, SHIFT, 74}, {17, SHIFT, 75}, {42, SHIFT, 76}, },
			{{-1, ERROR, 36}, {1, SHIFT, 1}, },
			{{-1, ERROR, 37}, {1, SHIFT, 1}, {33, SHIFT, 33}, },
			{{-1, REDUCE, 18}, {1, SHIFT, 11}, },
			{{-1, ERROR, 39}, {42, SHIFT, 81}, },
			{{-1, REDUCE, 103}, },
			{{-1, ERROR, 41}, {6, SHIFT, 82}, {42, SHIFT, 43}, },
			{{-1, ERROR, 42}, {42, SHIFT, 83}, },
			{{-1, ERROR, 43}, {34, SHIFT, 34}, },
			{{-1, REDUCE, 105}, },
			{{-1, ERROR, 45}, {42, SHIFT, 84}, },
			{{-1, ERROR, 46}, {6, SHIFT, 85}, {42, SHIFT, 26}, },
			{{-1, ERROR, 47}, {6, SHIFT, 87}, {42, SHIFT, 43}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 90}, },
			{{-1, ERROR, 50}, {11, SHIFT, 88}, {42, SHIFT, 89}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 87}, },
			{{-1, ERROR, 53}, {7, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {16, SHIFT, 51}, {19, SHIFT, 52}, {23, SHIFT, 53}, {25, SHIFT, 54}, {26, SHIFT, 55}, {34, SHIFT, 56}, {42, SHIFT, 57}, {43, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 54}, {7, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {16, SHIFT, 51}, {19, SHIFT, 52}, {23, SHIFT, 53}, {25, SHIFT, 54}, {26, SHIFT, 55}, {34, SHIFT, 56}, {42, SHIFT, 57}, {43, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 55}, {7, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {16, SHIFT, 51}, {19, SHIFT, 52}, {23, SHIFT, 53}, {25, SHIFT, 54}, {26, SHIFT, 55}, {34, SHIFT, 56}, {42, SHIFT, 57}, {43, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 56}, {7, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {16, SHIFT, 51}, {19, SHIFT, 52}, {23, SHIFT, 53}, {25, SHIFT, 54}, {26, SHIFT, 55}, {34, SHIFT, 56}, {42, SHIFT, 57}, {43, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, REDUCE, 91}, {34, SHIFT, 94}, {36, SHIFT, 95}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 59}, {22, SHIFT, 96}, },
			{{-1, REDUCE, 61}, {21, SHIFT, 97}, },
			{{-1, REDUCE, 63}, {29, SHIFT, 98}, {30, SHIFT, 99}, {32, SHIFT, 100}, },
			{{-1, REDUCE, 67}, {24, SHIFT, 101}, },
			{{-1, REDUCE, 69}, {25, SHIFT, 102}, {26, SHIFT, 103}, },
			{{-1, REDUCE, 72}, {27, SHIFT, 104}, {28, SHIFT, 105}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 79}, {41, SHIFT, 106}, },
			{{-1, ERROR, 69}, {42, SHIFT, 107}, },
			{{-1, ERROR, 70}, {12, SHIFT, 108}, {40, SHIFT, 35}, },
			{{-1, ERROR, 71}, {40, SHIFT, 110}, },
			{{-1, ERROR, 72}, {35, SHIFT, 111}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 23}, {36, SHIFT, 112}, },
			{{-1, REDUCE, 20}, {1, SHIFT, 11}, },
			{{-1, ERROR, 79}, {1, SHIFT, 1}, },
			{{-1, REDUCE, 19}, {1, SHIFT, 11}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 82}, {42, SHIFT, 114}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 85}, {42, SHIFT, 115}, },
			{{-1, ERROR, 86}, {6, SHIFT, 116}, {42, SHIFT, 43}, },
			{{-1, ERROR, 87}, {42, SHIFT, 117}, },
			{{-1, ERROR, 88}, {36, SHIFT, 118}, },
			{{-1, REDUCE, 95}, {34, SHIFT, 119}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 93}, {35, SHIFT, 120}, },
			{{-1, ERROR, 94}, {7, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {16, SHIFT, 51}, {19, SHIFT, 52}, {23, SHIFT, 53}, {25, SHIFT, 54}, {26, SHIFT, 55}, {34, SHIFT, 56}, {35, SHIFT, 121}, {42, SHIFT, 57}, {43, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 95}, {7, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {16, SHIFT, 51}, {19, SHIFT, 52}, {23, SHIFT, 53}, {25, SHIFT, 54}, {26, SHIFT, 55}, {34, SHIFT, 56}, {42, SHIFT, 57}, {43, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 96}, {7, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {16, SHIFT, 51}, {19, SHIFT, 52}, {23, SHIFT, 53}, {25, SHIFT, 54}, {26, SHIFT, 55}, {34, SHIFT, 56}, {42, SHIFT, 57}, {43, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 97}, {7, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {16, SHIFT, 51}, {19, SHIFT, 52}, {23, SHIFT, 53}, {25, SHIFT, 54}, {26, SHIFT, 55}, {34, SHIFT, 56}, {42, SHIFT, 57}, {43, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 98}, {7, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {16, SHIFT, 51}, {19, SHIFT, 52}, {23, SHIFT, 53}, {25, SHIFT, 54}, {26, SHIFT, 55}, {34, SHIFT, 56}, {42, SHIFT, 57}, {43, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 99}, {7, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {16, SHIFT, 51}, {19, SHIFT, 52}, {23, SHIFT, 53}, {25, SHIFT, 54}, {26, SHIFT, 55}, {34, SHIFT, 56}, {42, SHIFT, 57}, {43, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 100}, {7, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {16, SHIFT, 51}, {19, SHIFT, 52}, {23, SHIFT, 53}, {25, SHIFT, 54}, {26, SHIFT, 55}, {34, SHIFT, 56}, {42, SHIFT, 57}, {43, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 101}, {7, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {16, SHIFT, 51}, {19, SHIFT, 52}, {23, SHIFT, 53}, {25, SHIFT, 54}, {26, SHIFT, 55}, {34, SHIFT, 56}, {42, SHIFT, 57}, {43, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 102}, {7, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {16, SHIFT, 51}, {19, SHIFT, 52}, {23, SHIFT, 53}, {25, SHIFT, 54}, {26, SHIFT, 55}, {34, SHIFT, 56}, {42, SHIFT, 57}, {43, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 103}, {7, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {16, SHIFT, 51}, {19, SHIFT, 52}, {23, SHIFT, 53}, {25, SHIFT, 54}, {26, SHIFT, 55}, {34, SHIFT, 56}, {42, SHIFT, 57}, {43, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 104}, {7, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {16, SHIFT, 51}, {19, SHIFT, 52}, {23, SHIFT, 53}, {25, SHIFT, 54}, {26, SHIFT, 55}, {34, SHIFT, 56}, {42, SHIFT, 57}, {43, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 105}, {7, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {16, SHIFT, 51}, {19, SHIFT, 52}, {23, SHIFT, 53}, {25, SHIFT, 54}, {26, SHIFT, 55}, {34, SHIFT, 56}, {42, SHIFT, 57}, {43, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, REDUCE, 97}, },
			{{-1, ERROR, 107}, {34, SHIFT, 135}, },
			{{-1, ERROR, 108}, {1, SHIFT, 1}, },
			{{-1, ERROR, 109}, {12, SHIFT, 137}, },
			{{-1, ERROR, 110}, {2, SHIFT, 73}, {11, SHIFT, 74}, {17, SHIFT, 75}, {42, SHIFT, 76}, },
			{{-1, ERROR, 111}, {12, SHIFT, 139}, {40, SHIFT, 35}, },
			{{-1, ERROR, 112}, {7, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {16, SHIFT, 51}, {19, SHIFT, 52}, {23, SHIFT, 53}, {25, SHIFT, 54}, {26, SHIFT, 55}, {34, SHIFT, 56}, {37, SHIFT, 141}, {42, SHIFT, 57}, {43, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, REDUCE, 21}, {1, SHIFT, 11}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 116}, {42, SHIFT, 143}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 118}, {7, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {16, SHIFT, 51}, {19, SHIFT, 52}, {23, SHIFT, 53}, {25, SHIFT, 54}, {26, SHIFT, 55}, {34, SHIFT, 56}, {42, SHIFT, 57}, {43, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 119}, {7, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {16, SHIFT, 51}, {19, SHIFT, 52}, {23, SHIFT, 53}, {25, SHIFT, 54}, {26, SHIFT, 55}, {34, SHIFT, 56}, {35, SHIFT, 145}, {42, SHIFT, 57}, {43, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 81}, },
			{{-1, ERROR, 122}, {35, SHIFT, 147}, },
			{{-1, REDUCE, 56}, {38, SHIFT, 148}, },
			{{-1, ERROR, 124}, {37, SHIFT, 151}, },
			{{-1, REDUCE, 60}, {21, SHIFT, 97}, },
			{{-1, REDUCE, 62}, {29, SHIFT, 98}, {30, SHIFT, 99}, {32, SHIFT, 100}, },
			{{-1, REDUCE, 64}, {24, SHIFT, 101}, },
			{{-1, REDUCE, 65}, {24, SHIFT, 101}, },
			{{-1, REDUCE, 66}, {24, SHIFT, 101}, },
			{{-1, REDUCE, 68}, {25, SHIFT, 102}, {26, SHIFT, 103}, },
			{{-1, REDUCE, 70}, {27, SHIFT, 104}, {28, SHIFT, 105}, },
			{{-1, REDUCE, 71}, {27, SHIFT, 104}, {28, SHIFT, 105}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 74}, },
			{{-1, ERROR, 135}, {7, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {16, SHIFT, 51}, {19, SHIFT, 52}, {23, SHIFT, 53}, {25, SHIFT, 54}, {26, SHIFT, 55}, {34, SHIFT, 56}, {35, SHIFT, 152}, {42, SHIFT, 57}, {43, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 136}, {1, SHIFT, 11}, {3, SHIFT, 154}, {42, SHIFT, 155}, },
			{{-1, ERROR, 137}, {1, SHIFT, 1}, },
			{{-1, REDUCE, 32}, {36, SHIFT, 112}, {39, SHIFT, 158}, },
			{{-1, ERROR, 139}, {1, SHIFT, 1}, },
			{{-1, ERROR, 140}, {12, SHIFT, 162}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 142}, {37, SHIFT, 163}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 144}, {37, SHIFT, 164}, },
			{{-1, REDUCE, 92}, },
			{{-1, ERROR, 146}, {35, SHIFT, 165}, },
			{{-1, REDUCE, 83}, },
			{{-1, ERROR, 148}, {7, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {16, SHIFT, 51}, {19, SHIFT, 52}, {23, SHIFT, 53}, {25, SHIFT, 54}, {26, SHIFT, 55}, {34, SHIFT, 56}, {42, SHIFT, 57}, {43, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, REDUCE, 114}, },
			{{-1, REDUCE, 57}, {38, SHIFT, 148}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 82}, },
			{{-1, ERROR, 153}, {35, SHIFT, 168}, },
			{{-1, ERROR, 154}, {1, SHIFT, 1}, },
			{{-1, ERROR, 155}, {1, SHIFT, 1}, {33, SHIFT, 33}, {40, SHIFT, 35}, },
			{{-1, ERROR, 156}, {3, SHIFT, 170}, {42, SHIFT, 155}, },
			{{-1, ERROR, 157}, {1, SHIFT, 11}, {3, SHIFT, 171}, {42, SHIFT, 155}, },
			{{-1, ERROR, 158}, {42, SHIFT, 173}, },
			{{-1, REDUCE, 106}, },
			{{-1, REDUCE, 33}, {39, SHIFT, 158}, },
			{{-1, ERROR, 161}, {1, SHIFT, 11}, {3, SHIFT, 175}, {42, SHIFT, 155}, },
			{{-1, ERROR, 162}, {1, SHIFT, 1}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 94}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 115}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 41}, {1, SHIFT, 11}, {9, SHIFT, 178}, {13, SHIFT, 179}, {42, SHIFT, 180}, },
			{{-1, ERROR, 170}, {1, SHIFT, 1}, },
			{{-1, ERROR, 171}, {1, SHIFT, 1}, },
			{{-1, ERROR, 172}, {3, SHIFT, 187}, {42, SHIFT, 155}, },
			{{-1, ERROR, 173}, {40, SHIFT, 188}, },
			{{-1, REDUCE, 107}, },
			{{-1, ERROR, 175}, {1, SHIFT, 1}, },
			{{-1, ERROR, 176}, {3, SHIFT, 190}, {42, SHIFT, 155}, },
			{{-1, ERROR, 177}, {1, SHIFT, 11}, {3, SHIFT, 191}, {42, SHIFT, 155}, },
			{{-1, ERROR, 178}, {7, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {16, SHIFT, 51}, {19, SHIFT, 52}, {23, SHIFT, 53}, {25, SHIFT, 54}, {26, SHIFT, 55}, {34, SHIFT, 56}, {42, SHIFT, 57}, {43, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 179}, {20, SHIFT, 194}, },
			{{-1, ERROR, 180}, {33, SHIFT, 195}, {34, SHIFT, 196}, {36, SHIFT, 197}, {41, SHIFT, 198}, },
			{{-1, ERROR, 181}, {6, SHIFT, 203}, },
			{{-1, REDUCE, 108}, },
			{{-1, ERROR, 183}, {1, SHIFT, 1}, },
			{{-1, REDUCE, 42}, {9, SHIFT, 178}, {13, SHIFT, 179}, {42, SHIFT, 180}, },
			{{-1, REDUCE, 41}, {1, SHIFT, 11}, {9, SHIFT, 178}, {13, SHIFT, 179}, {42, SHIFT, 180}, },
			{{-1, REDUCE, 41}, {1, SHIFT, 11}, {9, SHIFT, 178}, {13, SHIFT, 179}, {42, SHIFT, 180}, },
			{{-1, ERROR, 187}, {1, SHIFT, 1}, },
			{{-1, ERROR, 188}, {2, SHIFT, 73}, {11, SHIFT, 74}, {17, SHIFT, 75}, {42, SHIFT, 76}, },
			{{-1, REDUCE, 41}, {1, SHIFT, 11}, {9, SHIFT, 178}, {13, SHIFT, 179}, {42, SHIFT, 180}, },
			{{-1, ERROR, 190}, {1, SHIFT, 1}, },
			{{-1, ERROR, 191}, {1, SHIFT, 1}, },
			{{-1, ERROR, 192}, {3, SHIFT, 213}, {42, SHIFT, 155}, },
			{{-1, ERROR, 193}, {18, SHIFT, 214}, },
			{{-1, ERROR, 194}, {7, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {16, SHIFT, 51}, {19, SHIFT, 52}, {23, SHIFT, 53}, {25, SHIFT, 54}, {26, SHIFT, 55}, {34, SHIFT, 56}, {42, SHIFT, 57}, {43, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 195}, {7, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {16, SHIFT, 51}, {19, SHIFT, 52}, {23, SHIFT, 53}, {25, SHIFT, 54}, {26, SHIFT, 55}, {34, SHIFT, 56}, {42, SHIFT, 57}, {43, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 196}, {7, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {16, SHIFT, 51}, {19, SHIFT, 52}, {23, SHIFT, 53}, {25, SHIFT, 54}, {26, SHIFT, 55}, {34, SHIFT, 56}, {35, SHIFT, 217}, {42, SHIFT, 57}, {43, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 197}, {7, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {16, SHIFT, 51}, {19, SHIFT, 52}, {23, SHIFT, 53}, {25, SHIFT, 54}, {26, SHIFT, 55}, {34, SHIFT, 56}, {42, SHIFT, 57}, {43, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 198}, {42, SHIFT, 220}, },
			{{-1, REDUCE, 110}, },
			{{-1, REDUCE, 112}, },
			{{-1, ERROR, 201}, {33, SHIFT, 221}, {36, SHIFT, 197}, },
			{{-1, ERROR, 202}, {34, SHIFT, 223}, {41, SHIFT, 198}, },
			{{-1, ERROR, 203}, {42, SHIFT, 225}, },
			{{-1, REDUCE, 43}, {1, SHIFT, 11}, },
			{{-1, REDUCE, 109}, },
			{{-1, ERROR, 206}, {6, SHIFT, 226}, },
			{{-1, ERROR, 207}, {6, SHIFT, 227}, },
			{{-1, REDUCE, 41}, {1, SHIFT, 11}, {9, SHIFT, 178}, {13, SHIFT, 179}, {42, SHIFT, 180}, },
			{{-1, REDUCE, 34}, {36, SHIFT, 112}, },
			{{-1, ERROR, 210}, {6, SHIFT, 229}, },
			{{-1, REDUCE, 41}, {1, SHIFT, 11}, {9, SHIFT, 178}, {13, SHIFT, 179}, {42, SHIFT, 180}, },
			{{-1, REDUCE, 41}, {1, SHIFT, 11}, {9, SHIFT, 178}, {13, SHIFT, 179}, {42, SHIFT, 180}, },
			{{-1, ERROR, 213}, {1, SHIFT, 1}, },
			{{-1, ERROR, 214}, {1, SHIFT, 1}, },
			{{-1, ERROR, 215}, {1, SHIFT, 1}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 218}, {35, SHIFT, 235}, },
			{{-1, ERROR, 219}, {37, SHIFT, 236}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 221}, {7, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {16, SHIFT, 51}, {19, SHIFT, 52}, {23, SHIFT, 53}, {25, SHIFT, 54}, {26, SHIFT, 55}, {34, SHIFT, 56}, {42, SHIFT, 57}, {43, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, REDUCE, 111}, },
			{{-1, ERROR, 223}, {7, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {16, SHIFT, 51}, {19, SHIFT, 52}, {23, SHIFT, 53}, {25, SHIFT, 54}, {26, SHIFT, 55}, {34, SHIFT, 56}, {35, SHIFT, 238}, {42, SHIFT, 57}, {43, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, REDUCE, 113}, },
			{{-1, ERROR, 225}, {1, SHIFT, 1}, },
			{{-1, ERROR, 226}, {42, SHIFT, 241}, },
			{{-1, ERROR, 227}, {42, SHIFT, 242}, },
			{{-1, ERROR, 228}, {6, SHIFT, 243}, },
			{{-1, ERROR, 229}, {42, SHIFT, 244}, },
			{{-1, ERROR, 230}, {6, SHIFT, 245}, },
			{{-1, ERROR, 231}, {6, SHIFT, 246}, },
			{{-1, REDUCE, 41}, {1, SHIFT, 11}, {9, SHIFT, 178}, {13, SHIFT, 179}, {42, SHIFT, 180}, },
			{{-1, REDUCE, 41}, {1, SHIFT, 11}, {9, SHIFT, 178}, {13, SHIFT, 179}, {42, SHIFT, 180}, },
			{{-1, REDUCE, 41}, {1, SHIFT, 11}, {9, SHIFT, 178}, {13, SHIFT, 179}, {42, SHIFT, 180}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 239}, {35, SHIFT, 250}, },
			{{-1, REDUCE, 24}, {1, SHIFT, 11}, },
			{{-1, ERROR, 241}, {1, SHIFT, 1}, },
			{{-1, ERROR, 242}, {1, SHIFT, 1}, },
			{{-1, ERROR, 243}, {42, SHIFT, 253}, },
			{{-1, ERROR, 244}, {1, SHIFT, 1}, },
			{{-1, ERROR, 245}, {42, SHIFT, 255}, },
			{{-1, ERROR, 246}, {42, SHIFT, 256}, },
			{{-1, ERROR, 247}, {6, SHIFT, 257}, },
			{{-1, ERROR, 248}, {5, SHIFT, 258}, {6, SHIFT, 259}, },
			{{-1, ERROR, 249}, {6, SHIFT, 261}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 28}, {1, SHIFT, 11}, },
			{{-1, REDUCE, 26}, {1, SHIFT, 11}, },
			{{-1, ERROR, 253}, {1, SHIFT, 1}, },
			{{-1, REDUCE, 25}, {1, SHIFT, 11}, },
			{{-1, ERROR, 255}, {1, SHIFT, 1}, },
			{{-1, ERROR, 256}, {1, SHIFT, 1}, },
			{{-1, ERROR, 257}, {42, SHIFT, 265}, },
			{{-1, ERROR, 258}, {1, SHIFT, 1}, },
			{{-1, ERROR, 259}, {9, SHIFT, 267}, },
			{{-1, ERROR, 260}, {6, SHIFT, 268}, },
			{{-1, ERROR, 261}, {13, SHIFT, 269}, },
			{{-1, REDUCE, 30}, {1, SHIFT, 11}, },
			{{-1, REDUCE, 29}, {1, SHIFT, 11}, },
			{{-1, REDUCE, 27}, {1, SHIFT, 11}, },
			{{-1, ERROR, 265}, {1, SHIFT, 1}, },
			{{-1, REDUCE, 41}, {1, SHIFT, 11}, {9, SHIFT, 178}, {13, SHIFT, 179}, {42, SHIFT, 180}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 268}, {9, SHIFT, 272}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 31}, {1, SHIFT, 11}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 47}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 3}, },
			{{-1, 8}, {10, 17}, {20, 17}, },
			{{-1, 4}, {5, 12}, {7, 16}, },
			{{-1, 15}, },
			{{-1, 27}, {29, 40}, {46, 40}, {156, 40}, {172, 40}, {176, 40}, {192, 40}, },
			{{-1, 36}, {37, 79}, },
			{{-1, 37}, {70, 109}, {111, 140}, },
			{{-1, 28}, {30, 44}, {41, 44}, {47, 44}, {86, 44}, },
			{{-1, 72}, },
			{{-1, 159}, {160, 174}, },
			{{-1, 77}, {110, 138}, {188, 209}, },
			{{-1, 181}, {185, 206}, {186, 207}, {189, 210}, {208, 228}, {211, 230}, {212, 231}, {232, 247}, {233, 248}, {234, 249}, {266, 271}, },
			{{-1, 182}, {184, 205}, },
			{{-1, 183}, },
			{{-1, 260}, },
			{{-1, 199}, {201, 222}, },
			{{-1, 200}, {202, 224}, },
			{{-1, 122}, {119, 146}, {135, 153}, {196, 218}, {223, 239}, },
			{{-1, 149}, {150, 167}, },
			{{-1, 123}, {33, 60}, {56, 93}, {95, 124}, {112, 142}, {118, 144}, {148, 166}, {178, 193}, {194, 215}, {195, 216}, {197, 219}, {221, 237}, },
			{{-1, 61}, },
			{{-1, 62}, {96, 125}, },
			{{-1, 63}, {97, 126}, },
			{{-1, 64}, {98, 127}, {99, 128}, {100, 129}, },
			{{-1, 65}, {101, 130}, },
			{{-1, 66}, {102, 131}, {103, 132}, },
			{{-1, 67}, {53, 90}, {54, 91}, {55, 92}, {104, 133}, {105, 134}, },
			{{-1, 68}, },
			{{-1, 69}, },
			{{-1, 38}, {0, 5}, {4, 9}, {10, 18}, {12, 19}, {14, 22}, {20, 24}, {23, 31}, {36, 78}, {37, 80}, {79, 113}, {108, 136}, {137, 157}, {139, 161}, {154, 169}, {162, 177}, {170, 185}, {171, 186}, {175, 189}, {183, 204}, {187, 208}, {190, 211}, {191, 212}, {213, 232}, {214, 233}, {215, 234}, {225, 240}, {241, 251}, {242, 252}, {244, 254}, {253, 262}, {255, 263}, {256, 264}, {258, 266}, {265, 270}, },
			{{-1, 10}, {12, 20}, },
			{{-1, 29}, {31, 46}, {136, 156}, {157, 172}, {161, 176}, {177, 192}, },
			{{-1, 30}, {29, 41}, {31, 47}, {46, 86}, },
			{{-1, 160}, },
			{{-1, 184}, },
			{{-1, 201}, },
			{{-1, 202}, },
			{{-1, 150}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: cr, 'class'",
			"expecting: cr, 'begin', 'class', 'else', 'end', 'if', 'loop', identifier",
			"expecting: identifier",
			"expecting: EOF",
			"expecting: cr, EOF",
			"expecting: 'inherits', 'is'",
			"expecting: cr, 'class', EOF",
			"expecting: cr, 'begin', 'class', 'else', 'end', 'if', 'loop', identifier, EOF",
			"expecting: 'from'",
			"expecting: cr",
			"expecting: 'is'",
			"expecting: cr, 'end', identifier",
			"expecting: cr, ':=', '(', ':'",
			"expecting: 'begin', 'end', identifier",
			"expecting: 'end', identifier",
			"expecting: 'false', 'me', 'new', 'null', 'true', 'not', '+', '-', '(', identifier, integer literal, string literal",
			"expecting: ')', identifier",
			"expecting: 'boolean', 'int', 'string', identifier",
			"expecting: cr, ':='",
			"expecting: cr, 'begin', 'end', identifier",
			"expecting: '('",
			"expecting: cr, 'then', 'and', 'or', '&', '+', '-', '*', '/', '>', '<', '=', ')', ']', ',', '.'",
			"expecting: 'int', identifier",
			"expecting: cr, 'then', 'and', 'or', '&', '+', '-', '*', '/', '>', '<', '=', '(', ')', '[', ']', ',', '.'",
			"expecting: cr, 'then', 'or', ')', ']', ','",
			"expecting: cr, 'then', 'and', 'or', ')', ']', ','",
			"expecting: cr, 'then', 'and', 'or', '>', '<', '=', ')', ']', ','",
			"expecting: cr, 'then', 'and', 'or', '&', '>', '<', '=', ')', ']', ','",
			"expecting: cr, 'then', 'and', 'or', '&', '+', '-', '>', '<', '=', ')', ']', ','",
			"expecting: cr, 'then', 'and', 'or', '&', '+', '-', '*', '/', '>', '<', '=', ')', ']', ','",
			"expecting: 'is', ':'",
			"expecting: ':'",
			"expecting: ')'",
			"expecting: cr, 'is', ':=', ')', '[', ';'",
			"expecting: cr, 'is', ':=', '['",
			"expecting: '['",
			"expecting: cr, 'then', 'and', 'or', '&', '+', '-', '*', '/', '>', '<', '=', '(', ')', ']', ',', '.'",
			"expecting: 'false', 'me', 'new', 'null', 'true', 'not', '+', '-', '(', ')', identifier, integer literal, string literal",
			"expecting: 'false', 'me', 'new', 'null', 'true', 'not', '+', '-', '(', ']', identifier, integer literal, string literal",
			"expecting: ')', ','",
			"expecting: ']'",
			"expecting: cr, 'begin', identifier",
			"expecting: ')', '[', ';'",
			"expecting: cr, ':=', ':'",
			"expecting: 'begin', identifier",
			"expecting: ')', ';'",
			"expecting: cr, 'end', 'if', 'loop', identifier",
			"expecting: 'while'",
			"expecting: ':=', '(', '[', '.'",
			"expecting: 'end'",
			"expecting: 'else', 'end', 'if', 'loop', identifier",
			"expecting: 'then'",
			"expecting: ':=', '['",
			"expecting: '(', '.'",
			"expecting: cr, 'else', 'end', 'if', 'loop', identifier",
			"expecting: 'else', 'end'",
			"expecting: 'if'",
			"expecting: 'loop'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 0, 5, 6, 4, 4, 4, 7, 4, 8, 9, 10, 4, 4, 4, 4, 4, 10, 11, 9, 4, 2, 12, 13, 14, 14, 14, 11, 4, 15, 16, 17, 9, 18, 19, 2, 13, 14, 2, 20, 14, 2, 14, 14, 21, 21, 22, 21, 21, 15, 15, 15, 15, 23, 21, 21, 9, 24, 25, 26, 27, 28, 29, 29, 21, 2, 30, 31, 32, 33, 33, 33, 33, 34, 19, 9, 19, 4, 2, 4, 4, 2, 14, 2, 35, 36, 29, 29, 29, 32, 37, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 2, 20, 9, 10, 17, 30, 38, 19, 4, 4, 2, 4, 15, 37, 21, 21, 32, 39, 40, 25, 26, 27, 27, 27, 28, 29, 29, 29, 29, 37, 41, 9, 42, 9, 10, 33, 40, 4, 40, 21, 32, 21, 15, 39, 39, 21, 21, 32, 9, 43, 44, 41, 2, 45, 45, 41, 9, 33, 21, 21, 39, 39, 21, 46, 9, 9, 44, 31, 45, 9, 44, 41, 15, 47, 48, 49, 50, 9, 50, 46, 46, 9, 17, 46, 9, 9, 44, 51, 15, 15, 37, 15, 2, 52, 53, 52, 53, 2, 54, 50, 49, 49, 46, 42, 49, 46, 46, 9, 9, 9, 9, 9, 32, 40, 53, 15, 52, 37, 53, 9, 2, 2, 49, 2, 49, 49, 46, 54, 46, 9, 52, 9, 9, 32, 11, 9, 9, 2, 9, 2, 2, 49, 55, 49, 9, 11, 11, 9, 11, 9, 9, 2, 9, 56, 49, 57, 11, 11, 11, 9, 46, 9, 56, 9, 11, 49, 9, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
