/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.node;

import java.util.*;
import cps450.oodle.analysis.*;

@SuppressWarnings("nls")
public final class AAssignStmt extends PStmt
{
    private TId _id_;
    private final LinkedList<PPartArrInx> _partArrInx_ = new LinkedList<PPartArrInx>();
    private TOpAssign _opAssign_;
    private PExpr _expr_;
    private PNewlines _newlines_;

    public AAssignStmt()
    {
        // Constructor
    }

    public AAssignStmt(
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") List<?> _partArrInx_,
        @SuppressWarnings("hiding") TOpAssign _opAssign_,
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") PNewlines _newlines_)
    {
        // Constructor
        setId(_id_);

        setPartArrInx(_partArrInx_);

        setOpAssign(_opAssign_);

        setExpr(_expr_);

        setNewlines(_newlines_);

    }

    @Override
    public Object clone()
    {
        return new AAssignStmt(
            cloneNode(this._id_),
            cloneList(this._partArrInx_),
            cloneNode(this._opAssign_),
            cloneNode(this._expr_),
            cloneNode(this._newlines_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAssignStmt(this);
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public LinkedList<PPartArrInx> getPartArrInx()
    {
        return this._partArrInx_;
    }

    public void setPartArrInx(List<?> list)
    {
        for(PPartArrInx e : this._partArrInx_)
        {
            e.parent(null);
        }
        this._partArrInx_.clear();

        for(Object obj_e : list)
        {
            PPartArrInx e = (PPartArrInx) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._partArrInx_.add(e);
        }
    }

    public TOpAssign getOpAssign()
    {
        return this._opAssign_;
    }

    public void setOpAssign(TOpAssign node)
    {
        if(this._opAssign_ != null)
        {
            this._opAssign_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._opAssign_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public PNewlines getNewlines()
    {
        return this._newlines_;
    }

    public void setNewlines(PNewlines node)
    {
        if(this._newlines_ != null)
        {
            this._newlines_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._newlines_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id_)
            + toString(this._partArrInx_)
            + toString(this._opAssign_)
            + toString(this._expr_)
            + toString(this._newlines_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._partArrInx_.remove(child))
        {
            return;
        }

        if(this._opAssign_ == child)
        {
            this._opAssign_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._newlines_ == child)
        {
            this._newlines_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        for(ListIterator<PPartArrInx> i = this._partArrInx_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PPartArrInx) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._opAssign_ == oldChild)
        {
            setOpAssign((TOpAssign) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(this._newlines_ == oldChild)
        {
            setNewlines((PNewlines) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
