/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.node;

import cps450.oodle.analysis.*;

@SuppressWarnings("nls")
public final class APartObj extends PPartObj
{
    private PExpr9 _expr9_;
    private TPeriod _period_;

    public APartObj()
    {
        // Constructor
    }

    public APartObj(
        @SuppressWarnings("hiding") PExpr9 _expr9_,
        @SuppressWarnings("hiding") TPeriod _period_)
    {
        // Constructor
        setExpr9(_expr9_);

        setPeriod(_period_);

    }

    @Override
    public Object clone()
    {
        return new APartObj(
            cloneNode(this._expr9_),
            cloneNode(this._period_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPartObj(this);
    }

    public PExpr9 getExpr9()
    {
        return this._expr9_;
    }

    public void setExpr9(PExpr9 node)
    {
        if(this._expr9_ != null)
        {
            this._expr9_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr9_ = node;
    }

    public TPeriod getPeriod()
    {
        return this._period_;
    }

    public void setPeriod(TPeriod node)
    {
        if(this._period_ != null)
        {
            this._period_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._period_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._expr9_)
            + toString(this._period_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._expr9_ == child)
        {
            this._expr9_ = null;
            return;
        }

        if(this._period_ == child)
        {
            this._period_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._expr9_ == oldChild)
        {
            setExpr9((PExpr9) newChild);
            return;
        }

        if(this._period_ == oldChild)
        {
            setPeriod((TPeriod) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
