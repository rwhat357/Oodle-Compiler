/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.node;

import java.util.*;
import cps450.oodle.analysis.*;

@SuppressWarnings("nls")
public final class AArrayAssiStatement extends PStatement
{
    private TIdentifier _identifier_;
    private final LinkedList<PStatementNdArrayAssi> _statementNdArrayAssi_ = new LinkedList<PStatementNdArrayAssi>();
    private TEquals _equals_;
    private PExpression _expression_;

    public AArrayAssiStatement()
    {
        // Constructor
    }

    public AArrayAssiStatement(
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") List<?> _statementNdArrayAssi_,
        @SuppressWarnings("hiding") TEquals _equals_,
        @SuppressWarnings("hiding") PExpression _expression_)
    {
        // Constructor
        setIdentifier(_identifier_);

        setStatementNdArrayAssi(_statementNdArrayAssi_);

        setEquals(_equals_);

        setExpression(_expression_);

    }

    @Override
    public Object clone()
    {
        return new AArrayAssiStatement(
            cloneNode(this._identifier_),
            cloneList(this._statementNdArrayAssi_),
            cloneNode(this._equals_),
            cloneNode(this._expression_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArrayAssiStatement(this);
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public LinkedList<PStatementNdArrayAssi> getStatementNdArrayAssi()
    {
        return this._statementNdArrayAssi_;
    }

    public void setStatementNdArrayAssi(List<?> list)
    {
        for(PStatementNdArrayAssi e : this._statementNdArrayAssi_)
        {
            e.parent(null);
        }
        this._statementNdArrayAssi_.clear();

        for(Object obj_e : list)
        {
            PStatementNdArrayAssi e = (PStatementNdArrayAssi) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._statementNdArrayAssi_.add(e);
        }
    }

    public TEquals getEquals()
    {
        return this._equals_;
    }

    public void setEquals(TEquals node)
    {
        if(this._equals_ != null)
        {
            this._equals_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equals_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._identifier_)
            + toString(this._statementNdArrayAssi_)
            + toString(this._equals_)
            + toString(this._expression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._statementNdArrayAssi_.remove(child))
        {
            return;
        }

        if(this._equals_ == child)
        {
            this._equals_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        for(ListIterator<PStatementNdArrayAssi> i = this._statementNdArrayAssi_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PStatementNdArrayAssi) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._equals_ == oldChild)
        {
            setEquals((TEquals) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
