/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.node;

import cps450.oodle.analysis.*;

@SuppressWarnings("nls")
public final class APartExp extends PPartExp
{
    private TOpAssign _opAssign_;
    private PExpr _expr_;

    public APartExp()
    {
        // Constructor
    }

    public APartExp(
        @SuppressWarnings("hiding") TOpAssign _opAssign_,
        @SuppressWarnings("hiding") PExpr _expr_)
    {
        // Constructor
        setOpAssign(_opAssign_);

        setExpr(_expr_);

    }

    @Override
    public Object clone()
    {
        return new APartExp(
            cloneNode(this._opAssign_),
            cloneNode(this._expr_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPartExp(this);
    }

    public TOpAssign getOpAssign()
    {
        return this._opAssign_;
    }

    public void setOpAssign(TOpAssign node)
    {
        if(this._opAssign_ != null)
        {
            this._opAssign_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._opAssign_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._opAssign_)
            + toString(this._expr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._opAssign_ == child)
        {
            this._opAssign_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._opAssign_ == oldChild)
        {
            setOpAssign((TOpAssign) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
