/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.node;

import java.util.*;
import cps450.oodle.analysis.*;

@SuppressWarnings("nls")
public final class AArgumentDeclList extends PArgumentDeclList
{
    private PArgDecl _argDecl_;
    private final LinkedList<PArgDeclTail> _argDeclTail_ = new LinkedList<PArgDeclTail>();

    public AArgumentDeclList()
    {
        // Constructor
    }

    public AArgumentDeclList(
        @SuppressWarnings("hiding") PArgDecl _argDecl_,
        @SuppressWarnings("hiding") List<?> _argDeclTail_)
    {
        // Constructor
        setArgDecl(_argDecl_);

        setArgDeclTail(_argDeclTail_);

    }

    @Override
    public Object clone()
    {
        return new AArgumentDeclList(
            cloneNode(this._argDecl_),
            cloneList(this._argDeclTail_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArgumentDeclList(this);
    }

    public PArgDecl getArgDecl()
    {
        return this._argDecl_;
    }

    public void setArgDecl(PArgDecl node)
    {
        if(this._argDecl_ != null)
        {
            this._argDecl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._argDecl_ = node;
    }

    public LinkedList<PArgDeclTail> getArgDeclTail()
    {
        return this._argDeclTail_;
    }

    public void setArgDeclTail(List<?> list)
    {
        for(PArgDeclTail e : this._argDeclTail_)
        {
            e.parent(null);
        }
        this._argDeclTail_.clear();

        for(Object obj_e : list)
        {
            PArgDeclTail e = (PArgDeclTail) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._argDeclTail_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._argDecl_)
            + toString(this._argDeclTail_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._argDecl_ == child)
        {
            this._argDecl_ = null;
            return;
        }

        if(this._argDeclTail_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._argDecl_ == oldChild)
        {
            setArgDecl((PArgDecl) newChild);
            return;
        }

        for(ListIterator<PArgDeclTail> i = this._argDeclTail_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PArgDeclTail) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
