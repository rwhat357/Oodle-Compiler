/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.node;

import java.util.*;
import cps450.oodle.analysis.*;

@SuppressWarnings("nls")
public final class AIfStmt extends PStmt
{
    private TIf _i1_;
    private PExpr _expr_;
    private TThen _then_;
    private PNewlines _n1_;
    private final LinkedList<PStmt> _stmt_ = new LinkedList<PStmt>();
    private PPartElse _partElse_;
    private TEnd _end_;
    private TIf _i2_;
    private PNewlines _n2_;

    public AIfStmt()
    {
        // Constructor
    }

    public AIfStmt(
        @SuppressWarnings("hiding") TIf _i1_,
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") TThen _then_,
        @SuppressWarnings("hiding") PNewlines _n1_,
        @SuppressWarnings("hiding") List<?> _stmt_,
        @SuppressWarnings("hiding") PPartElse _partElse_,
        @SuppressWarnings("hiding") TEnd _end_,
        @SuppressWarnings("hiding") TIf _i2_,
        @SuppressWarnings("hiding") PNewlines _n2_)
    {
        // Constructor
        setI1(_i1_);

        setExpr(_expr_);

        setThen(_then_);

        setN1(_n1_);

        setStmt(_stmt_);

        setPartElse(_partElse_);

        setEnd(_end_);

        setI2(_i2_);

        setN2(_n2_);

    }

    @Override
    public Object clone()
    {
        return new AIfStmt(
            cloneNode(this._i1_),
            cloneNode(this._expr_),
            cloneNode(this._then_),
            cloneNode(this._n1_),
            cloneList(this._stmt_),
            cloneNode(this._partElse_),
            cloneNode(this._end_),
            cloneNode(this._i2_),
            cloneNode(this._n2_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfStmt(this);
    }

    public TIf getI1()
    {
        return this._i1_;
    }

    public void setI1(TIf node)
    {
        if(this._i1_ != null)
        {
            this._i1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._i1_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public TThen getThen()
    {
        return this._then_;
    }

    public void setThen(TThen node)
    {
        if(this._then_ != null)
        {
            this._then_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._then_ = node;
    }

    public PNewlines getN1()
    {
        return this._n1_;
    }

    public void setN1(PNewlines node)
    {
        if(this._n1_ != null)
        {
            this._n1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._n1_ = node;
    }

    public LinkedList<PStmt> getStmt()
    {
        return this._stmt_;
    }

    public void setStmt(List<?> list)
    {
        for(PStmt e : this._stmt_)
        {
            e.parent(null);
        }
        this._stmt_.clear();

        for(Object obj_e : list)
        {
            PStmt e = (PStmt) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._stmt_.add(e);
        }
    }

    public PPartElse getPartElse()
    {
        return this._partElse_;
    }

    public void setPartElse(PPartElse node)
    {
        if(this._partElse_ != null)
        {
            this._partElse_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._partElse_ = node;
    }

    public TEnd getEnd()
    {
        return this._end_;
    }

    public void setEnd(TEnd node)
    {
        if(this._end_ != null)
        {
            this._end_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._end_ = node;
    }

    public TIf getI2()
    {
        return this._i2_;
    }

    public void setI2(TIf node)
    {
        if(this._i2_ != null)
        {
            this._i2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._i2_ = node;
    }

    public PNewlines getN2()
    {
        return this._n2_;
    }

    public void setN2(PNewlines node)
    {
        if(this._n2_ != null)
        {
            this._n2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._n2_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._i1_)
            + toString(this._expr_)
            + toString(this._then_)
            + toString(this._n1_)
            + toString(this._stmt_)
            + toString(this._partElse_)
            + toString(this._end_)
            + toString(this._i2_)
            + toString(this._n2_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._i1_ == child)
        {
            this._i1_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._then_ == child)
        {
            this._then_ = null;
            return;
        }

        if(this._n1_ == child)
        {
            this._n1_ = null;
            return;
        }

        if(this._stmt_.remove(child))
        {
            return;
        }

        if(this._partElse_ == child)
        {
            this._partElse_ = null;
            return;
        }

        if(this._end_ == child)
        {
            this._end_ = null;
            return;
        }

        if(this._i2_ == child)
        {
            this._i2_ = null;
            return;
        }

        if(this._n2_ == child)
        {
            this._n2_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._i1_ == oldChild)
        {
            setI1((TIf) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(this._then_ == oldChild)
        {
            setThen((TThen) newChild);
            return;
        }

        if(this._n1_ == oldChild)
        {
            setN1((PNewlines) newChild);
            return;
        }

        for(ListIterator<PStmt> i = this._stmt_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PStmt) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._partElse_ == oldChild)
        {
            setPartElse((PPartElse) newChild);
            return;
        }

        if(this._end_ == oldChild)
        {
            setEnd((TEnd) newChild);
            return;
        }

        if(this._i2_ == oldChild)
        {
            setI2((TIf) newChild);
            return;
        }

        if(this._n2_ == oldChild)
        {
            setN2((PNewlines) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
