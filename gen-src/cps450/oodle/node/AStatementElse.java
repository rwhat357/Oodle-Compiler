/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.node;

import java.util.*;
import cps450.oodle.analysis.*;

@SuppressWarnings("nls")
public final class AStatementElse extends PStatementElse
{
    private TElse _else_;
    private final LinkedList<TCr> _cr_ = new LinkedList<TCr>();
    private PStatementList _statementList_;

    public AStatementElse()
    {
        // Constructor
    }

    public AStatementElse(
        @SuppressWarnings("hiding") TElse _else_,
        @SuppressWarnings("hiding") List<?> _cr_,
        @SuppressWarnings("hiding") PStatementList _statementList_)
    {
        // Constructor
        setElse(_else_);

        setCr(_cr_);

        setStatementList(_statementList_);

    }

    @Override
    public Object clone()
    {
        return new AStatementElse(
            cloneNode(this._else_),
            cloneList(this._cr_),
            cloneNode(this._statementList_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAStatementElse(this);
    }

    public TElse getElse()
    {
        return this._else_;
    }

    public void setElse(TElse node)
    {
        if(this._else_ != null)
        {
            this._else_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._else_ = node;
    }

    public LinkedList<TCr> getCr()
    {
        return this._cr_;
    }

    public void setCr(List<?> list)
    {
        for(TCr e : this._cr_)
        {
            e.parent(null);
        }
        this._cr_.clear();

        for(Object obj_e : list)
        {
            TCr e = (TCr) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._cr_.add(e);
        }
    }

    public PStatementList getStatementList()
    {
        return this._statementList_;
    }

    public void setStatementList(PStatementList node)
    {
        if(this._statementList_ != null)
        {
            this._statementList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statementList_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._else_)
            + toString(this._cr_)
            + toString(this._statementList_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._else_ == child)
        {
            this._else_ = null;
            return;
        }

        if(this._cr_.remove(child))
        {
            return;
        }

        if(this._statementList_ == child)
        {
            this._statementList_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._else_ == oldChild)
        {
            setElse((TElse) newChild);
            return;
        }

        for(ListIterator<TCr> i = this._cr_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TCr) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._statementList_ == oldChild)
        {
            setStatementList((PStatementList) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
