/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.node;

import java.util.*;
import cps450.oodle.analysis.*;

@SuppressWarnings("nls")
public final class AMethodDefinition extends PMethodDefinition
{
    private TIdentifier _startmethod_;
    private TLeftParen _leftParen_;
    private PArgumentList _argumentList_;
    private TRightParen _rightParen_;
    private PColonTypeProduction _colonTypeProduction_;
    private TIs _is_;
    private final LinkedList<TCr> _iscr_ = new LinkedList<TCr>();
    private final LinkedList<PVariableDefinition> _variableDefinition_ = new LinkedList<PVariableDefinition>();
    private TBegin _begin_;
    private final LinkedList<TCr> _begincr_ = new LinkedList<TCr>();
    private PStatementList _statementList_;
    private TEnd _end_;
    private TIdentifier _endmethod_;
    private final LinkedList<TCr> _endcr_ = new LinkedList<TCr>();

    public AMethodDefinition()
    {
        // Constructor
    }

    public AMethodDefinition(
        @SuppressWarnings("hiding") TIdentifier _startmethod_,
        @SuppressWarnings("hiding") TLeftParen _leftParen_,
        @SuppressWarnings("hiding") PArgumentList _argumentList_,
        @SuppressWarnings("hiding") TRightParen _rightParen_,
        @SuppressWarnings("hiding") PColonTypeProduction _colonTypeProduction_,
        @SuppressWarnings("hiding") TIs _is_,
        @SuppressWarnings("hiding") List<?> _iscr_,
        @SuppressWarnings("hiding") List<?> _variableDefinition_,
        @SuppressWarnings("hiding") TBegin _begin_,
        @SuppressWarnings("hiding") List<?> _begincr_,
        @SuppressWarnings("hiding") PStatementList _statementList_,
        @SuppressWarnings("hiding") TEnd _end_,
        @SuppressWarnings("hiding") TIdentifier _endmethod_,
        @SuppressWarnings("hiding") List<?> _endcr_)
    {
        // Constructor
        setStartmethod(_startmethod_);

        setLeftParen(_leftParen_);

        setArgumentList(_argumentList_);

        setRightParen(_rightParen_);

        setColonTypeProduction(_colonTypeProduction_);

        setIs(_is_);

        setIscr(_iscr_);

        setVariableDefinition(_variableDefinition_);

        setBegin(_begin_);

        setBegincr(_begincr_);

        setStatementList(_statementList_);

        setEnd(_end_);

        setEndmethod(_endmethod_);

        setEndcr(_endcr_);

    }

    @Override
    public Object clone()
    {
        return new AMethodDefinition(
            cloneNode(this._startmethod_),
            cloneNode(this._leftParen_),
            cloneNode(this._argumentList_),
            cloneNode(this._rightParen_),
            cloneNode(this._colonTypeProduction_),
            cloneNode(this._is_),
            cloneList(this._iscr_),
            cloneList(this._variableDefinition_),
            cloneNode(this._begin_),
            cloneList(this._begincr_),
            cloneNode(this._statementList_),
            cloneNode(this._end_),
            cloneNode(this._endmethod_),
            cloneList(this._endcr_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMethodDefinition(this);
    }

    public TIdentifier getStartmethod()
    {
        return this._startmethod_;
    }

    public void setStartmethod(TIdentifier node)
    {
        if(this._startmethod_ != null)
        {
            this._startmethod_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._startmethod_ = node;
    }

    public TLeftParen getLeftParen()
    {
        return this._leftParen_;
    }

    public void setLeftParen(TLeftParen node)
    {
        if(this._leftParen_ != null)
        {
            this._leftParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._leftParen_ = node;
    }

    public PArgumentList getArgumentList()
    {
        return this._argumentList_;
    }

    public void setArgumentList(PArgumentList node)
    {
        if(this._argumentList_ != null)
        {
            this._argumentList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._argumentList_ = node;
    }

    public TRightParen getRightParen()
    {
        return this._rightParen_;
    }

    public void setRightParen(TRightParen node)
    {
        if(this._rightParen_ != null)
        {
            this._rightParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rightParen_ = node;
    }

    public PColonTypeProduction getColonTypeProduction()
    {
        return this._colonTypeProduction_;
    }

    public void setColonTypeProduction(PColonTypeProduction node)
    {
        if(this._colonTypeProduction_ != null)
        {
            this._colonTypeProduction_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colonTypeProduction_ = node;
    }

    public TIs getIs()
    {
        return this._is_;
    }

    public void setIs(TIs node)
    {
        if(this._is_ != null)
        {
            this._is_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._is_ = node;
    }

    public LinkedList<TCr> getIscr()
    {
        return this._iscr_;
    }

    public void setIscr(List<?> list)
    {
        for(TCr e : this._iscr_)
        {
            e.parent(null);
        }
        this._iscr_.clear();

        for(Object obj_e : list)
        {
            TCr e = (TCr) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._iscr_.add(e);
        }
    }

    public LinkedList<PVariableDefinition> getVariableDefinition()
    {
        return this._variableDefinition_;
    }

    public void setVariableDefinition(List<?> list)
    {
        for(PVariableDefinition e : this._variableDefinition_)
        {
            e.parent(null);
        }
        this._variableDefinition_.clear();

        for(Object obj_e : list)
        {
            PVariableDefinition e = (PVariableDefinition) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._variableDefinition_.add(e);
        }
    }

    public TBegin getBegin()
    {
        return this._begin_;
    }

    public void setBegin(TBegin node)
    {
        if(this._begin_ != null)
        {
            this._begin_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._begin_ = node;
    }

    public LinkedList<TCr> getBegincr()
    {
        return this._begincr_;
    }

    public void setBegincr(List<?> list)
    {
        for(TCr e : this._begincr_)
        {
            e.parent(null);
        }
        this._begincr_.clear();

        for(Object obj_e : list)
        {
            TCr e = (TCr) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._begincr_.add(e);
        }
    }

    public PStatementList getStatementList()
    {
        return this._statementList_;
    }

    public void setStatementList(PStatementList node)
    {
        if(this._statementList_ != null)
        {
            this._statementList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statementList_ = node;
    }

    public TEnd getEnd()
    {
        return this._end_;
    }

    public void setEnd(TEnd node)
    {
        if(this._end_ != null)
        {
            this._end_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._end_ = node;
    }

    public TIdentifier getEndmethod()
    {
        return this._endmethod_;
    }

    public void setEndmethod(TIdentifier node)
    {
        if(this._endmethod_ != null)
        {
            this._endmethod_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endmethod_ = node;
    }

    public LinkedList<TCr> getEndcr()
    {
        return this._endcr_;
    }

    public void setEndcr(List<?> list)
    {
        for(TCr e : this._endcr_)
        {
            e.parent(null);
        }
        this._endcr_.clear();

        for(Object obj_e : list)
        {
            TCr e = (TCr) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._endcr_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._startmethod_)
            + toString(this._leftParen_)
            + toString(this._argumentList_)
            + toString(this._rightParen_)
            + toString(this._colonTypeProduction_)
            + toString(this._is_)
            + toString(this._iscr_)
            + toString(this._variableDefinition_)
            + toString(this._begin_)
            + toString(this._begincr_)
            + toString(this._statementList_)
            + toString(this._end_)
            + toString(this._endmethod_)
            + toString(this._endcr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._startmethod_ == child)
        {
            this._startmethod_ = null;
            return;
        }

        if(this._leftParen_ == child)
        {
            this._leftParen_ = null;
            return;
        }

        if(this._argumentList_ == child)
        {
            this._argumentList_ = null;
            return;
        }

        if(this._rightParen_ == child)
        {
            this._rightParen_ = null;
            return;
        }

        if(this._colonTypeProduction_ == child)
        {
            this._colonTypeProduction_ = null;
            return;
        }

        if(this._is_ == child)
        {
            this._is_ = null;
            return;
        }

        if(this._iscr_.remove(child))
        {
            return;
        }

        if(this._variableDefinition_.remove(child))
        {
            return;
        }

        if(this._begin_ == child)
        {
            this._begin_ = null;
            return;
        }

        if(this._begincr_.remove(child))
        {
            return;
        }

        if(this._statementList_ == child)
        {
            this._statementList_ = null;
            return;
        }

        if(this._end_ == child)
        {
            this._end_ = null;
            return;
        }

        if(this._endmethod_ == child)
        {
            this._endmethod_ = null;
            return;
        }

        if(this._endcr_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._startmethod_ == oldChild)
        {
            setStartmethod((TIdentifier) newChild);
            return;
        }

        if(this._leftParen_ == oldChild)
        {
            setLeftParen((TLeftParen) newChild);
            return;
        }

        if(this._argumentList_ == oldChild)
        {
            setArgumentList((PArgumentList) newChild);
            return;
        }

        if(this._rightParen_ == oldChild)
        {
            setRightParen((TRightParen) newChild);
            return;
        }

        if(this._colonTypeProduction_ == oldChild)
        {
            setColonTypeProduction((PColonTypeProduction) newChild);
            return;
        }

        if(this._is_ == oldChild)
        {
            setIs((TIs) newChild);
            return;
        }

        for(ListIterator<TCr> i = this._iscr_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TCr) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PVariableDefinition> i = this._variableDefinition_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PVariableDefinition) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._begin_ == oldChild)
        {
            setBegin((TBegin) newChild);
            return;
        }

        for(ListIterator<TCr> i = this._begincr_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TCr) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._statementList_ == oldChild)
        {
            setStatementList((PStatementList) newChild);
            return;
        }

        if(this._end_ == oldChild)
        {
            setEnd((TEnd) newChild);
            return;
        }

        if(this._endmethod_ == oldChild)
        {
            setEndmethod((TIdentifier) newChild);
            return;
        }

        for(ListIterator<TCr> i = this._endcr_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TCr) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
