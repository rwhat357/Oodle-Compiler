/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.node;

import java.util.*;
import cps450.oodle.analysis.*;

@SuppressWarnings("nls")
public final class ALoopStmt extends PStmt
{
    private TLoop _l1_;
    private TWhile _while_;
    private PExpr _expr_;
    private PNewlines _n1_;
    private final LinkedList<PStmt> _stmt_ = new LinkedList<PStmt>();
    private TEnd _end_;
    private TLoop _l2_;
    private PNewlines _n2_;

    public ALoopStmt()
    {
        // Constructor
    }

    public ALoopStmt(
        @SuppressWarnings("hiding") TLoop _l1_,
        @SuppressWarnings("hiding") TWhile _while_,
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") PNewlines _n1_,
        @SuppressWarnings("hiding") List<?> _stmt_,
        @SuppressWarnings("hiding") TEnd _end_,
        @SuppressWarnings("hiding") TLoop _l2_,
        @SuppressWarnings("hiding") PNewlines _n2_)
    {
        // Constructor
        setL1(_l1_);

        setWhile(_while_);

        setExpr(_expr_);

        setN1(_n1_);

        setStmt(_stmt_);

        setEnd(_end_);

        setL2(_l2_);

        setN2(_n2_);

    }

    @Override
    public Object clone()
    {
        return new ALoopStmt(
            cloneNode(this._l1_),
            cloneNode(this._while_),
            cloneNode(this._expr_),
            cloneNode(this._n1_),
            cloneList(this._stmt_),
            cloneNode(this._end_),
            cloneNode(this._l2_),
            cloneNode(this._n2_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALoopStmt(this);
    }

    public TLoop getL1()
    {
        return this._l1_;
    }

    public void setL1(TLoop node)
    {
        if(this._l1_ != null)
        {
            this._l1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._l1_ = node;
    }

    public TWhile getWhile()
    {
        return this._while_;
    }

    public void setWhile(TWhile node)
    {
        if(this._while_ != null)
        {
            this._while_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._while_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public PNewlines getN1()
    {
        return this._n1_;
    }

    public void setN1(PNewlines node)
    {
        if(this._n1_ != null)
        {
            this._n1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._n1_ = node;
    }

    public LinkedList<PStmt> getStmt()
    {
        return this._stmt_;
    }

    public void setStmt(List<?> list)
    {
        for(PStmt e : this._stmt_)
        {
            e.parent(null);
        }
        this._stmt_.clear();

        for(Object obj_e : list)
        {
            PStmt e = (PStmt) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._stmt_.add(e);
        }
    }

    public TEnd getEnd()
    {
        return this._end_;
    }

    public void setEnd(TEnd node)
    {
        if(this._end_ != null)
        {
            this._end_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._end_ = node;
    }

    public TLoop getL2()
    {
        return this._l2_;
    }

    public void setL2(TLoop node)
    {
        if(this._l2_ != null)
        {
            this._l2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._l2_ = node;
    }

    public PNewlines getN2()
    {
        return this._n2_;
    }

    public void setN2(PNewlines node)
    {
        if(this._n2_ != null)
        {
            this._n2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._n2_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._l1_)
            + toString(this._while_)
            + toString(this._expr_)
            + toString(this._n1_)
            + toString(this._stmt_)
            + toString(this._end_)
            + toString(this._l2_)
            + toString(this._n2_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._l1_ == child)
        {
            this._l1_ = null;
            return;
        }

        if(this._while_ == child)
        {
            this._while_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._n1_ == child)
        {
            this._n1_ = null;
            return;
        }

        if(this._stmt_.remove(child))
        {
            return;
        }

        if(this._end_ == child)
        {
            this._end_ = null;
            return;
        }

        if(this._l2_ == child)
        {
            this._l2_ = null;
            return;
        }

        if(this._n2_ == child)
        {
            this._n2_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._l1_ == oldChild)
        {
            setL1((TLoop) newChild);
            return;
        }

        if(this._while_ == oldChild)
        {
            setWhile((TWhile) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(this._n1_ == oldChild)
        {
            setN1((PNewlines) newChild);
            return;
        }

        for(ListIterator<PStmt> i = this._stmt_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PStmt) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._end_ == oldChild)
        {
            setEnd((TEnd) newChild);
            return;
        }

        if(this._l2_ == oldChild)
        {
            setL2((TLoop) newChild);
            return;
        }

        if(this._n2_ == oldChild)
        {
            setN2((PNewlines) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
