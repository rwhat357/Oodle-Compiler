/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.node;

import cps450.oodle.analysis.*;

@SuppressWarnings("nls")
public final class AStrConcatExpressionLvl41 extends PExpressionLvl41
{
    private PExpressionLvl41 _expressionLvl41_;
    private TAndOp _andOp_;
    private PExpressionLvl3 _expressionLvl3_;

    public AStrConcatExpressionLvl41()
    {
        // Constructor
    }

    public AStrConcatExpressionLvl41(
        @SuppressWarnings("hiding") PExpressionLvl41 _expressionLvl41_,
        @SuppressWarnings("hiding") TAndOp _andOp_,
        @SuppressWarnings("hiding") PExpressionLvl3 _expressionLvl3_)
    {
        // Constructor
        setExpressionLvl41(_expressionLvl41_);

        setAndOp(_andOp_);

        setExpressionLvl3(_expressionLvl3_);

    }

    @Override
    public Object clone()
    {
        return new AStrConcatExpressionLvl41(
            cloneNode(this._expressionLvl41_),
            cloneNode(this._andOp_),
            cloneNode(this._expressionLvl3_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAStrConcatExpressionLvl41(this);
    }

    public PExpressionLvl41 getExpressionLvl41()
    {
        return this._expressionLvl41_;
    }

    public void setExpressionLvl41(PExpressionLvl41 node)
    {
        if(this._expressionLvl41_ != null)
        {
            this._expressionLvl41_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expressionLvl41_ = node;
    }

    public TAndOp getAndOp()
    {
        return this._andOp_;
    }

    public void setAndOp(TAndOp node)
    {
        if(this._andOp_ != null)
        {
            this._andOp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._andOp_ = node;
    }

    public PExpressionLvl3 getExpressionLvl3()
    {
        return this._expressionLvl3_;
    }

    public void setExpressionLvl3(PExpressionLvl3 node)
    {
        if(this._expressionLvl3_ != null)
        {
            this._expressionLvl3_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expressionLvl3_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._expressionLvl41_)
            + toString(this._andOp_)
            + toString(this._expressionLvl3_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._expressionLvl41_ == child)
        {
            this._expressionLvl41_ = null;
            return;
        }

        if(this._andOp_ == child)
        {
            this._andOp_ = null;
            return;
        }

        if(this._expressionLvl3_ == child)
        {
            this._expressionLvl3_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._expressionLvl41_ == oldChild)
        {
            setExpressionLvl41((PExpressionLvl41) newChild);
            return;
        }

        if(this._andOp_ == oldChild)
        {
            setAndOp((TAndOp) newChild);
            return;
        }

        if(this._expressionLvl3_ == oldChild)
        {
            setExpressionLvl3((PExpressionLvl3) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
