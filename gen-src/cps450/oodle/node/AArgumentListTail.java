/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.node;

import cps450.oodle.analysis.*;

@SuppressWarnings("nls")
public final class AArgumentListTail extends PArgumentListTail
{
    private TSemicolon _semicolon_;
    private TIdentifier _identifier_;
    private TColon _colon_;
    private PTypeProduction _typeProduction_;

    public AArgumentListTail()
    {
        // Constructor
    }

    public AArgumentListTail(
        @SuppressWarnings("hiding") TSemicolon _semicolon_,
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") TColon _colon_,
        @SuppressWarnings("hiding") PTypeProduction _typeProduction_)
    {
        // Constructor
        setSemicolon(_semicolon_);

        setIdentifier(_identifier_);

        setColon(_colon_);

        setTypeProduction(_typeProduction_);

    }

    @Override
    public Object clone()
    {
        return new AArgumentListTail(
            cloneNode(this._semicolon_),
            cloneNode(this._identifier_),
            cloneNode(this._colon_),
            cloneNode(this._typeProduction_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArgumentListTail(this);
    }

    public TSemicolon getSemicolon()
    {
        return this._semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(this._semicolon_ != null)
        {
            this._semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semicolon_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public TColon getColon()
    {
        return this._colon_;
    }

    public void setColon(TColon node)
    {
        if(this._colon_ != null)
        {
            this._colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colon_ = node;
    }

    public PTypeProduction getTypeProduction()
    {
        return this._typeProduction_;
    }

    public void setTypeProduction(PTypeProduction node)
    {
        if(this._typeProduction_ != null)
        {
            this._typeProduction_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._typeProduction_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._semicolon_)
            + toString(this._identifier_)
            + toString(this._colon_)
            + toString(this._typeProduction_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._semicolon_ == child)
        {
            this._semicolon_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._colon_ == child)
        {
            this._colon_ = null;
            return;
        }

        if(this._typeProduction_ == child)
        {
            this._typeProduction_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        if(this._typeProduction_ == oldChild)
        {
            setTypeProduction((PTypeProduction) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
