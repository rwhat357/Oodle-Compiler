/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.node;

import java.util.*;
import cps450.oodle.analysis.*;

@SuppressWarnings("nls")
public final class AClassDefinition extends PClassDefinition
{
    private TClasskey _classkey_;
    private TIdentifier _startclass_;
    private PInheritsProduction _inheritsProduction_;
    private TIs _is_;
    private final LinkedList<TCr> _cr_ = new LinkedList<TCr>();
    private final LinkedList<PVariableDefinition> _variableDefinition_ = new LinkedList<PVariableDefinition>();
    private final LinkedList<PMethodDefinition> _methodDefinition_ = new LinkedList<PMethodDefinition>();
    private TEnd _end_;
    private TIdentifier _endclass_;

    public AClassDefinition()
    {
        // Constructor
    }

    public AClassDefinition(
        @SuppressWarnings("hiding") TClasskey _classkey_,
        @SuppressWarnings("hiding") TIdentifier _startclass_,
        @SuppressWarnings("hiding") PInheritsProduction _inheritsProduction_,
        @SuppressWarnings("hiding") TIs _is_,
        @SuppressWarnings("hiding") List<?> _cr_,
        @SuppressWarnings("hiding") List<?> _variableDefinition_,
        @SuppressWarnings("hiding") List<?> _methodDefinition_,
        @SuppressWarnings("hiding") TEnd _end_,
        @SuppressWarnings("hiding") TIdentifier _endclass_)
    {
        // Constructor
        setClasskey(_classkey_);

        setStartclass(_startclass_);

        setInheritsProduction(_inheritsProduction_);

        setIs(_is_);

        setCr(_cr_);

        setVariableDefinition(_variableDefinition_);

        setMethodDefinition(_methodDefinition_);

        setEnd(_end_);

        setEndclass(_endclass_);

    }

    @Override
    public Object clone()
    {
        return new AClassDefinition(
            cloneNode(this._classkey_),
            cloneNode(this._startclass_),
            cloneNode(this._inheritsProduction_),
            cloneNode(this._is_),
            cloneList(this._cr_),
            cloneList(this._variableDefinition_),
            cloneList(this._methodDefinition_),
            cloneNode(this._end_),
            cloneNode(this._endclass_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAClassDefinition(this);
    }

    public TClasskey getClasskey()
    {
        return this._classkey_;
    }

    public void setClasskey(TClasskey node)
    {
        if(this._classkey_ != null)
        {
            this._classkey_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._classkey_ = node;
    }

    public TIdentifier getStartclass()
    {
        return this._startclass_;
    }

    public void setStartclass(TIdentifier node)
    {
        if(this._startclass_ != null)
        {
            this._startclass_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._startclass_ = node;
    }

    public PInheritsProduction getInheritsProduction()
    {
        return this._inheritsProduction_;
    }

    public void setInheritsProduction(PInheritsProduction node)
    {
        if(this._inheritsProduction_ != null)
        {
            this._inheritsProduction_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._inheritsProduction_ = node;
    }

    public TIs getIs()
    {
        return this._is_;
    }

    public void setIs(TIs node)
    {
        if(this._is_ != null)
        {
            this._is_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._is_ = node;
    }

    public LinkedList<TCr> getCr()
    {
        return this._cr_;
    }

    public void setCr(List<?> list)
    {
        for(TCr e : this._cr_)
        {
            e.parent(null);
        }
        this._cr_.clear();

        for(Object obj_e : list)
        {
            TCr e = (TCr) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._cr_.add(e);
        }
    }

    public LinkedList<PVariableDefinition> getVariableDefinition()
    {
        return this._variableDefinition_;
    }

    public void setVariableDefinition(List<?> list)
    {
        for(PVariableDefinition e : this._variableDefinition_)
        {
            e.parent(null);
        }
        this._variableDefinition_.clear();

        for(Object obj_e : list)
        {
            PVariableDefinition e = (PVariableDefinition) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._variableDefinition_.add(e);
        }
    }

    public LinkedList<PMethodDefinition> getMethodDefinition()
    {
        return this._methodDefinition_;
    }

    public void setMethodDefinition(List<?> list)
    {
        for(PMethodDefinition e : this._methodDefinition_)
        {
            e.parent(null);
        }
        this._methodDefinition_.clear();

        for(Object obj_e : list)
        {
            PMethodDefinition e = (PMethodDefinition) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._methodDefinition_.add(e);
        }
    }

    public TEnd getEnd()
    {
        return this._end_;
    }

    public void setEnd(TEnd node)
    {
        if(this._end_ != null)
        {
            this._end_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._end_ = node;
    }

    public TIdentifier getEndclass()
    {
        return this._endclass_;
    }

    public void setEndclass(TIdentifier node)
    {
        if(this._endclass_ != null)
        {
            this._endclass_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endclass_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._classkey_)
            + toString(this._startclass_)
            + toString(this._inheritsProduction_)
            + toString(this._is_)
            + toString(this._cr_)
            + toString(this._variableDefinition_)
            + toString(this._methodDefinition_)
            + toString(this._end_)
            + toString(this._endclass_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._classkey_ == child)
        {
            this._classkey_ = null;
            return;
        }

        if(this._startclass_ == child)
        {
            this._startclass_ = null;
            return;
        }

        if(this._inheritsProduction_ == child)
        {
            this._inheritsProduction_ = null;
            return;
        }

        if(this._is_ == child)
        {
            this._is_ = null;
            return;
        }

        if(this._cr_.remove(child))
        {
            return;
        }

        if(this._variableDefinition_.remove(child))
        {
            return;
        }

        if(this._methodDefinition_.remove(child))
        {
            return;
        }

        if(this._end_ == child)
        {
            this._end_ = null;
            return;
        }

        if(this._endclass_ == child)
        {
            this._endclass_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._classkey_ == oldChild)
        {
            setClasskey((TClasskey) newChild);
            return;
        }

        if(this._startclass_ == oldChild)
        {
            setStartclass((TIdentifier) newChild);
            return;
        }

        if(this._inheritsProduction_ == oldChild)
        {
            setInheritsProduction((PInheritsProduction) newChild);
            return;
        }

        if(this._is_ == oldChild)
        {
            setIs((TIs) newChild);
            return;
        }

        for(ListIterator<TCr> i = this._cr_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TCr) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PVariableDefinition> i = this._variableDefinition_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PVariableDefinition) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PMethodDefinition> i = this._methodDefinition_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PMethodDefinition) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._end_ == oldChild)
        {
            setEnd((TEnd) newChild);
            return;
        }

        if(this._endclass_ == oldChild)
        {
            setEndclass((TIdentifier) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
