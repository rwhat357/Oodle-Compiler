/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.node;

import java.util.*;
import cps450.oodle.analysis.*;

@SuppressWarnings("nls")
public final class AStart extends PStart
{
    private PNewlines _n1_;
    private PClassDef _classDef_;
    private final LinkedList<PClassDefs> _classDefs_ = new LinkedList<PClassDefs>();
    private PNewlines _n2_;

    public AStart()
    {
        // Constructor
    }

    public AStart(
        @SuppressWarnings("hiding") PNewlines _n1_,
        @SuppressWarnings("hiding") PClassDef _classDef_,
        @SuppressWarnings("hiding") List<?> _classDefs_,
        @SuppressWarnings("hiding") PNewlines _n2_)
    {
        // Constructor
        setN1(_n1_);

        setClassDef(_classDef_);

        setClassDefs(_classDefs_);

        setN2(_n2_);

    }

    @Override
    public Object clone()
    {
        return new AStart(
            cloneNode(this._n1_),
            cloneNode(this._classDef_),
            cloneList(this._classDefs_),
            cloneNode(this._n2_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAStart(this);
    }

    public PNewlines getN1()
    {
        return this._n1_;
    }

    public void setN1(PNewlines node)
    {
        if(this._n1_ != null)
        {
            this._n1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._n1_ = node;
    }

    public PClassDef getClassDef()
    {
        return this._classDef_;
    }

    public void setClassDef(PClassDef node)
    {
        if(this._classDef_ != null)
        {
            this._classDef_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._classDef_ = node;
    }

    public LinkedList<PClassDefs> getClassDefs()
    {
        return this._classDefs_;
    }

    public void setClassDefs(List<?> list)
    {
        for(PClassDefs e : this._classDefs_)
        {
            e.parent(null);
        }
        this._classDefs_.clear();

        for(Object obj_e : list)
        {
            PClassDefs e = (PClassDefs) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._classDefs_.add(e);
        }
    }

    public PNewlines getN2()
    {
        return this._n2_;
    }

    public void setN2(PNewlines node)
    {
        if(this._n2_ != null)
        {
            this._n2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._n2_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._n1_)
            + toString(this._classDef_)
            + toString(this._classDefs_)
            + toString(this._n2_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._n1_ == child)
        {
            this._n1_ = null;
            return;
        }

        if(this._classDef_ == child)
        {
            this._classDef_ = null;
            return;
        }

        if(this._classDefs_.remove(child))
        {
            return;
        }

        if(this._n2_ == child)
        {
            this._n2_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._n1_ == oldChild)
        {
            setN1((PNewlines) newChild);
            return;
        }

        if(this._classDef_ == oldChild)
        {
            setClassDef((PClassDef) newChild);
            return;
        }

        for(ListIterator<PClassDefs> i = this._classDefs_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PClassDefs) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._n2_ == oldChild)
        {
            setN2((PNewlines) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
