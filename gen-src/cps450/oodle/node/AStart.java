/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.node;

import java.util.*;
import cps450.oodle.analysis.*;

@SuppressWarnings("nls")
public final class AStart extends PStart
{
    private final LinkedList<TCr> _startcr_ = new LinkedList<TCr>();
    private PClassDefinition _classDefinition_;
    private final LinkedList<PCrClassDefinition> _crClassDefinition_ = new LinkedList<PCrClassDefinition>();
    private final LinkedList<TCr> _endcr_ = new LinkedList<TCr>();

    public AStart()
    {
        // Constructor
    }

    public AStart(
        @SuppressWarnings("hiding") List<?> _startcr_,
        @SuppressWarnings("hiding") PClassDefinition _classDefinition_,
        @SuppressWarnings("hiding") List<?> _crClassDefinition_,
        @SuppressWarnings("hiding") List<?> _endcr_)
    {
        // Constructor
        setStartcr(_startcr_);

        setClassDefinition(_classDefinition_);

        setCrClassDefinition(_crClassDefinition_);

        setEndcr(_endcr_);

    }

    @Override
    public Object clone()
    {
        return new AStart(
            cloneList(this._startcr_),
            cloneNode(this._classDefinition_),
            cloneList(this._crClassDefinition_),
            cloneList(this._endcr_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAStart(this);
    }

    public LinkedList<TCr> getStartcr()
    {
        return this._startcr_;
    }

    public void setStartcr(List<?> list)
    {
        for(TCr e : this._startcr_)
        {
            e.parent(null);
        }
        this._startcr_.clear();

        for(Object obj_e : list)
        {
            TCr e = (TCr) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._startcr_.add(e);
        }
    }

    public PClassDefinition getClassDefinition()
    {
        return this._classDefinition_;
    }

    public void setClassDefinition(PClassDefinition node)
    {
        if(this._classDefinition_ != null)
        {
            this._classDefinition_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._classDefinition_ = node;
    }

    public LinkedList<PCrClassDefinition> getCrClassDefinition()
    {
        return this._crClassDefinition_;
    }

    public void setCrClassDefinition(List<?> list)
    {
        for(PCrClassDefinition e : this._crClassDefinition_)
        {
            e.parent(null);
        }
        this._crClassDefinition_.clear();

        for(Object obj_e : list)
        {
            PCrClassDefinition e = (PCrClassDefinition) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._crClassDefinition_.add(e);
        }
    }

    public LinkedList<TCr> getEndcr()
    {
        return this._endcr_;
    }

    public void setEndcr(List<?> list)
    {
        for(TCr e : this._endcr_)
        {
            e.parent(null);
        }
        this._endcr_.clear();

        for(Object obj_e : list)
        {
            TCr e = (TCr) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._endcr_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._startcr_)
            + toString(this._classDefinition_)
            + toString(this._crClassDefinition_)
            + toString(this._endcr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._startcr_.remove(child))
        {
            return;
        }

        if(this._classDefinition_ == child)
        {
            this._classDefinition_ = null;
            return;
        }

        if(this._crClassDefinition_.remove(child))
        {
            return;
        }

        if(this._endcr_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<TCr> i = this._startcr_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TCr) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._classDefinition_ == oldChild)
        {
            setClassDefinition((PClassDefinition) newChild);
            return;
        }

        for(ListIterator<PCrClassDefinition> i = this._crClassDefinition_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PCrClassDefinition) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<TCr> i = this._endcr_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TCr) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
