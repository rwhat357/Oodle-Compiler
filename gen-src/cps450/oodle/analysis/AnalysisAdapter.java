/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.analysis;

import java.util.*;
import cps450.oodle.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStart(AStart node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACrClassDefinition(ACrClassDefinition node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassDefinition(AClassDefinition node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInheritsProduction(AInheritsProduction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVariableDefinition(AVariableDefinition node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqualsExpression(AEqualsExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAColonTypeProduction(AColonTypeProduction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodDefinition(AMethodDefinition node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArgumentList(AArgumentList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArgumentListTail(AArgumentListTail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntTypeProduction(AIntTypeProduction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABooleanTypeProduction(ABooleanTypeProduction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringTypeProduction(AStringTypeProduction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACustomTypeProduction(ACustomTypeProduction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACustomArrayTypeProduction(ACustomArrayTypeProduction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStatementList(AStatementList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStatementCr(AStatementCr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignmentStatement(AAssignmentStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayAssiStatement(AArrayAssiStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALoopStatement(ALoopStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodCalStatement(AMethodCalStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStatementElse(AStatementElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStatementNdArrayAssi(AStatementNdArrayAssi node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAObjectCall(AObjectCall node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAValuesList(AValuesList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAValuesListTail(AValuesListTail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpression(AExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrExpressionLvl6(AOrExpressionLvl6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPassExpressionLvl6(APassExpressionLvl6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndExpressionLvl5(AAndExpressionLvl5 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPassExpressionLvl5(APassExpressionLvl5 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAQtExpressionLvl4(AQtExpressionLvl4 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALtExpressionLvl4(ALtExpressionLvl4 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqExpressionLvl4(AEqExpressionLvl4 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPassExpressionLvl4(APassExpressionLvl4 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStrConcatExpressionLvl41(AStrConcatExpressionLvl41 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPassExpressionLvl41(APassExpressionLvl41 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAddExpressionLvl3(AAddExpressionLvl3 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASubExpressionLvl3(ASubExpressionLvl3 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPassExpressionLvl3(APassExpressionLvl3 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMulExpressionLvl2(AMulExpressionLvl2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivExpressionLvl2(ADivExpressionLvl2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPassExpressionLvl2(APassExpressionLvl2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotExpressionLvl1(ANotExpressionLvl1 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANegExpressionLvl1(ANegExpressionLvl1 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusExpressionLvl1(APlusExpressionLvl1 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPassExpressionLvl1(APassExpressionLvl1 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayExpressionLvl0(AArrayExpressionLvl0 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodCalExpressionLvl0(AMethodCalExpressionLvl0 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntExpressionLvl0(AIntExpressionLvl0 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringExpressionLvl0(AStringExpressionLvl0 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATrueExpressionLvl0(ATrueExpressionLvl0 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFalseExpressionLvl0(AFalseExpressionLvl0 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANullExpressionLvl0(ANullExpressionLvl0 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMeExpressionLvl0(AMeExpressionLvl0 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdentifierExpressionLvl0(AIdentifierExpressionLvl0 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANewObjExpressionLvl0(ANewObjExpressionLvl0 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANewArrExpressionLvl0(ANewArrExpressionLvl0 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANewClassExpressionLvl0(ANewClassExpressionLvl0 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParenExpressionLvl0(AParenExpressionLvl0 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodCallExpr(AMethodCallExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTConsumeCrLf(TConsumeCrLf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhitespace(TWhitespace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCr(TCr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBoolean(TBoolean node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBegin(TBegin node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTClasskey(TClasskey node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEnd(TEnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFrom(TFrom node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInherits(TInherits node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInt(TInt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIs(TIs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLoop(TLoop node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMe(TMe node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNew(TNew node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNull(TNull node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStringClass(TStringClass node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThen(TThen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAndOp(TAndOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMultiplication(TMultiplication node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDivides(TDivides node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGreaterThan(TGreaterThan node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLessThan(TLessThan node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGteqOp(TGteqOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEqOp(TEqOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEquals(TEquals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLeftParen(TLeftParen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRightParen(TRightParen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLeftBracket(TLeftBracket node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRightBracket(TRightBracket node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIntegerLiteral(TIntegerLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStringLiteral(TStringLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTUnterminatedString(TUnterminatedString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIllegalString(TIllegalString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEol(TEol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTUnrecognizedChar(TUnrecognizedChar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
