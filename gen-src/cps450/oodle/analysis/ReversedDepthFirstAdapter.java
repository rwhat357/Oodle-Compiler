/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.analysis;

import java.util.*;
import cps450.oodle.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPStart().apply(this);
        outStart(node);
    }

    public void inAStart(AStart node)
    {
        defaultIn(node);
    }

    public void outAStart(AStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStart(AStart node)
    {
        inAStart(node);
        if(node.getN2() != null)
        {
            node.getN2().apply(this);
        }
        {
            List<PClassDefs> copy = new ArrayList<PClassDefs>(node.getClassDefs());
            Collections.reverse(copy);
            for(PClassDefs e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getClassDef() != null)
        {
            node.getClassDef().apply(this);
        }
        if(node.getN1() != null)
        {
            node.getN1().apply(this);
        }
        outAStart(node);
    }

    public void inANewlines(ANewlines node)
    {
        defaultIn(node);
    }

    public void outANewlines(ANewlines node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANewlines(ANewlines node)
    {
        inANewlines(node);
        {
            List<TEmptyLine> copy = new ArrayList<TEmptyLine>(node.getEmptyLine());
            Collections.reverse(copy);
            for(TEmptyLine e : copy)
            {
                e.apply(this);
            }
        }
        outANewlines(node);
    }

    public void inAClassDefs(AClassDefs node)
    {
        defaultIn(node);
    }

    public void outAClassDefs(AClassDefs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassDefs(AClassDefs node)
    {
        inAClassDefs(node);
        if(node.getClassDef() != null)
        {
            node.getClassDef().apply(this);
        }
        if(node.getNewlines() != null)
        {
            node.getNewlines().apply(this);
        }
        outAClassDefs(node);
    }

    public void inAClassDef(AClassDef node)
    {
        defaultIn(node);
    }

    public void outAClassDef(AClassDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassDef(AClassDef node)
    {
        inAClassDef(node);
        if(node.getEndid() != null)
        {
            node.getEndid().apply(this);
        }
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        {
            List<PMethodDecl> copy = new ArrayList<PMethodDecl>(node.getMethodDecl());
            Collections.reverse(copy);
            for(PMethodDecl e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PVarDecl> copy = new ArrayList<PVarDecl>(node.getVarDecl());
            Collections.reverse(copy);
            for(PVarDecl e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getNewlines() != null)
        {
            node.getNewlines().apply(this);
        }
        if(node.getIs() != null)
        {
            node.getIs().apply(this);
        }
        if(node.getInheritsFrom() != null)
        {
            node.getInheritsFrom().apply(this);
        }
        if(node.getStid() != null)
        {
            node.getStid().apply(this);
        }
        if(node.getClassId() != null)
        {
            node.getClassId().apply(this);
        }
        outAClassDef(node);
    }

    public void inAInheritsFrom(AInheritsFrom node)
    {
        defaultIn(node);
    }

    public void outAInheritsFrom(AInheritsFrom node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInheritsFrom(AInheritsFrom node)
    {
        inAInheritsFrom(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getFrom() != null)
        {
            node.getFrom().apply(this);
        }
        if(node.getInherits() != null)
        {
            node.getInherits().apply(this);
        }
        outAInheritsFrom(node);
    }

    public void inAVarDecl(AVarDecl node)
    {
        defaultIn(node);
    }

    public void outAVarDecl(AVarDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDecl(AVarDecl node)
    {
        inAVarDecl(node);
        if(node.getNewlines() != null)
        {
            node.getNewlines().apply(this);
        }
        if(node.getPartExp() != null)
        {
            node.getPartExp().apply(this);
        }
        if(node.getPartType() != null)
        {
            node.getPartType().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVarDecl(node);
    }

    public void inAPartType(APartType node)
    {
        defaultIn(node);
    }

    public void outAPartType(APartType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPartType(APartType node)
    {
        inAPartType(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        outAPartType(node);
    }

    public void inAPartExp(APartExp node)
    {
        defaultIn(node);
    }

    public void outAPartExp(APartExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPartExp(APartExp node)
    {
        inAPartExp(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getOpAssign() != null)
        {
            node.getOpAssign().apply(this);
        }
        outAPartExp(node);
    }

    public void inAMethodDecl(AMethodDecl node)
    {
        defaultIn(node);
    }

    public void outAMethodDecl(AMethodDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodDecl(AMethodDecl node)
    {
        inAMethodDecl(node);
        if(node.getN3() != null)
        {
            node.getN3().apply(this);
        }
        if(node.getEndid() != null)
        {
            node.getEndid().apply(this);
        }
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getStmt());
            Collections.reverse(copy);
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getN2() != null)
        {
            node.getN2().apply(this);
        }
        if(node.getBegin() != null)
        {
            node.getBegin().apply(this);
        }
        {
            List<PVarDecl> copy = new ArrayList<PVarDecl>(node.getVarDecl());
            Collections.reverse(copy);
            for(PVarDecl e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getN1() != null)
        {
            node.getN1().apply(this);
        }
        if(node.getIs() != null)
        {
            node.getIs().apply(this);
        }
        if(node.getPartType() != null)
        {
            node.getPartType().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getArgumentDeclList() != null)
        {
            node.getArgumentDeclList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getStid() != null)
        {
            node.getStid().apply(this);
        }
        outAMethodDecl(node);
    }

    public void inAArgumentDeclList(AArgumentDeclList node)
    {
        defaultIn(node);
    }

    public void outAArgumentDeclList(AArgumentDeclList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgumentDeclList(AArgumentDeclList node)
    {
        inAArgumentDeclList(node);
        {
            List<PArgDeclTail> copy = new ArrayList<PArgDeclTail>(node.getArgDeclTail());
            Collections.reverse(copy);
            for(PArgDeclTail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getArgDecl() != null)
        {
            node.getArgDecl().apply(this);
        }
        outAArgumentDeclList(node);
    }

    public void inAArgDeclTail(AArgDeclTail node)
    {
        defaultIn(node);
    }

    public void outAArgDeclTail(AArgDeclTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgDeclTail(AArgDeclTail node)
    {
        inAArgDeclTail(node);
        if(node.getArgDecl() != null)
        {
            node.getArgDecl().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAArgDeclTail(node);
    }

    public void inAArgDecl(AArgDecl node)
    {
        defaultIn(node);
    }

    public void outAArgDecl(AArgDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgDecl(AArgDecl node)
    {
        inAArgDecl(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAArgDecl(node);
    }

    public void inAIntType(AIntType node)
    {
        defaultIn(node);
    }

    public void outAIntType(AIntType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntType(AIntType node)
    {
        inAIntType(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntType(node);
    }

    public void inAStringType(AStringType node)
    {
        defaultIn(node);
    }

    public void outAStringType(AStringType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringType(AStringType node)
    {
        inAStringType(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringType(node);
    }

    public void inABooleanType(ABooleanType node)
    {
        defaultIn(node);
    }

    public void outABooleanType(ABooleanType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanType(ABooleanType node)
    {
        inABooleanType(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outABooleanType(node);
    }

    public void inAIdType(AIdType node)
    {
        defaultIn(node);
    }

    public void outAIdType(AIdType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdType(AIdType node)
    {
        inAIdType(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdType(node);
    }

    public void inAArrType(AArrType node)
    {
        defaultIn(node);
    }

    public void outAArrType(AArrType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrType(AArrType node)
    {
        inAArrType(node);
        if(node.getRBrkt() != null)
        {
            node.getRBrkt().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLBrkt() != null)
        {
            node.getLBrkt().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAArrType(node);
    }

    public void inAAssignStmt(AAssignStmt node)
    {
        defaultIn(node);
    }

    public void outAAssignStmt(AAssignStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignStmt(AAssignStmt node)
    {
        inAAssignStmt(node);
        if(node.getNewlines() != null)
        {
            node.getNewlines().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getOpAssign() != null)
        {
            node.getOpAssign().apply(this);
        }
        {
            List<PPartArrInx> copy = new ArrayList<PPartArrInx>(node.getPartArrInx());
            Collections.reverse(copy);
            for(PPartArrInx e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAssignStmt(node);
    }

    public void inAIfStmt(AIfStmt node)
    {
        defaultIn(node);
    }

    public void outAIfStmt(AIfStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStmt(AIfStmt node)
    {
        inAIfStmt(node);
        if(node.getN2() != null)
        {
            node.getN2().apply(this);
        }
        if(node.getI2() != null)
        {
            node.getI2().apply(this);
        }
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        if(node.getPartElse() != null)
        {
            node.getPartElse().apply(this);
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getStmt());
            Collections.reverse(copy);
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getN1() != null)
        {
            node.getN1().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getI1() != null)
        {
            node.getI1().apply(this);
        }
        outAIfStmt(node);
    }

    public void inALoopStmt(ALoopStmt node)
    {
        defaultIn(node);
    }

    public void outALoopStmt(ALoopStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALoopStmt(ALoopStmt node)
    {
        inALoopStmt(node);
        if(node.getN2() != null)
        {
            node.getN2().apply(this);
        }
        if(node.getL2() != null)
        {
            node.getL2().apply(this);
        }
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getStmt());
            Collections.reverse(copy);
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getN1() != null)
        {
            node.getN1().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getL1() != null)
        {
            node.getL1().apply(this);
        }
        outALoopStmt(node);
    }

    public void inACallStmt(ACallStmt node)
    {
        defaultIn(node);
    }

    public void outACallStmt(ACallStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallStmt(ACallStmt node)
    {
        inACallStmt(node);
        if(node.getNewlines() != null)
        {
            node.getNewlines().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExprList() != null)
        {
            node.getExprList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getPartObj() != null)
        {
            node.getPartObj().apply(this);
        }
        outACallStmt(node);
    }

    public void inAPartElse(APartElse node)
    {
        defaultIn(node);
    }

    public void outAPartElse(APartElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPartElse(APartElse node)
    {
        inAPartElse(node);
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getStmt());
            Collections.reverse(copy);
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getNewlines() != null)
        {
            node.getNewlines().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        outAPartElse(node);
    }

    public void inAPartObj(APartObj node)
    {
        defaultIn(node);
    }

    public void outAPartObj(APartObj node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPartObj(APartObj node)
    {
        inAPartObj(node);
        if(node.getPeriod() != null)
        {
            node.getPeriod().apply(this);
        }
        if(node.getExpr9() != null)
        {
            node.getExpr9().apply(this);
        }
        outAPartObj(node);
    }

    public void inAExprList(AExprList node)
    {
        defaultIn(node);
    }

    public void outAExprList(AExprList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprList(AExprList node)
    {
        inAExprList(node);
        {
            List<PExprListTail> copy = new ArrayList<PExprListTail>(node.getExprListTail());
            Collections.reverse(copy);
            for(PExprListTail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAExprList(node);
    }

    public void inAExprListTail(AExprListTail node)
    {
        defaultIn(node);
    }

    public void outAExprListTail(AExprListTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprListTail(AExprListTail node)
    {
        inAExprListTail(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAExprListTail(node);
    }

    public void inAOrExpr(AOrExpr node)
    {
        defaultIn(node);
    }

    public void outAOrExpr(AOrExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExpr(AOrExpr node)
    {
        inAOrExpr(node);
        if(node.getEnds() != null)
        {
            node.getEnds().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getStarts() != null)
        {
            node.getStarts().apply(this);
        }
        outAOrExpr(node);
    }

    public void inAOtherExpr(AOtherExpr node)
    {
        defaultIn(node);
    }

    public void outAOtherExpr(AOtherExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOtherExpr(AOtherExpr node)
    {
        inAOtherExpr(node);
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        outAOtherExpr(node);
    }

    public void inAAndExpr1(AAndExpr1 node)
    {
        defaultIn(node);
    }

    public void outAAndExpr1(AAndExpr1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExpr1(AAndExpr1 node)
    {
        inAAndExpr1(node);
        if(node.getEnds() != null)
        {
            node.getEnds().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getStarts() != null)
        {
            node.getStarts().apply(this);
        }
        outAAndExpr1(node);
    }

    public void inAOtherExpr1(AOtherExpr1 node)
    {
        defaultIn(node);
    }

    public void outAOtherExpr1(AOtherExpr1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOtherExpr1(AOtherExpr1 node)
    {
        inAOtherExpr1(node);
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        outAOtherExpr1(node);
    }

    public void inAEqExpr2(AEqExpr2 node)
    {
        defaultIn(node);
    }

    public void outAEqExpr2(AEqExpr2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqExpr2(AEqExpr2 node)
    {
        inAEqExpr2(node);
        if(node.getEnds() != null)
        {
            node.getEnds().apply(this);
        }
        if(node.getOpEq() != null)
        {
            node.getOpEq().apply(this);
        }
        if(node.getStarts() != null)
        {
            node.getStarts().apply(this);
        }
        outAEqExpr2(node);
    }

    public void inAGtEqExpr2(AGtEqExpr2 node)
    {
        defaultIn(node);
    }

    public void outAGtEqExpr2(AGtEqExpr2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtEqExpr2(AGtEqExpr2 node)
    {
        inAGtEqExpr2(node);
        if(node.getEnds() != null)
        {
            node.getEnds().apply(this);
        }
        if(node.getOpGteq() != null)
        {
            node.getOpGteq().apply(this);
        }
        if(node.getStarts() != null)
        {
            node.getStarts().apply(this);
        }
        outAGtEqExpr2(node);
    }

    public void inAGtExpr2(AGtExpr2 node)
    {
        defaultIn(node);
    }

    public void outAGtExpr2(AGtExpr2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtExpr2(AGtExpr2 node)
    {
        inAGtExpr2(node);
        if(node.getEnds() != null)
        {
            node.getEnds().apply(this);
        }
        if(node.getOpGt() != null)
        {
            node.getOpGt().apply(this);
        }
        if(node.getStars() != null)
        {
            node.getStars().apply(this);
        }
        outAGtExpr2(node);
    }

    public void inAOtherExpr2(AOtherExpr2 node)
    {
        defaultIn(node);
    }

    public void outAOtherExpr2(AOtherExpr2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOtherExpr2(AOtherExpr2 node)
    {
        inAOtherExpr2(node);
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        outAOtherExpr2(node);
    }

    public void inACatExpr3(ACatExpr3 node)
    {
        defaultIn(node);
    }

    public void outACatExpr3(ACatExpr3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACatExpr3(ACatExpr3 node)
    {
        inACatExpr3(node);
        if(node.getEnds() != null)
        {
            node.getEnds().apply(this);
        }
        if(node.getOpCat() != null)
        {
            node.getOpCat().apply(this);
        }
        if(node.getStarts() != null)
        {
            node.getStarts().apply(this);
        }
        outACatExpr3(node);
    }

    public void inAOtherExpr3(AOtherExpr3 node)
    {
        defaultIn(node);
    }

    public void outAOtherExpr3(AOtherExpr3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOtherExpr3(AOtherExpr3 node)
    {
        inAOtherExpr3(node);
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        outAOtherExpr3(node);
    }

    public void inAAddExpr4(AAddExpr4 node)
    {
        defaultIn(node);
    }

    public void outAAddExpr4(AAddExpr4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddExpr4(AAddExpr4 node)
    {
        inAAddExpr4(node);
        if(node.getEnds() != null)
        {
            node.getEnds().apply(this);
        }
        if(node.getOpPlus() != null)
        {
            node.getOpPlus().apply(this);
        }
        if(node.getStarts() != null)
        {
            node.getStarts().apply(this);
        }
        outAAddExpr4(node);
    }

    public void inASubExpr4(ASubExpr4 node)
    {
        defaultIn(node);
    }

    public void outASubExpr4(ASubExpr4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubExpr4(ASubExpr4 node)
    {
        inASubExpr4(node);
        if(node.getEnds() != null)
        {
            node.getEnds().apply(this);
        }
        if(node.getOpMinus() != null)
        {
            node.getOpMinus().apply(this);
        }
        if(node.getStarts() != null)
        {
            node.getStarts().apply(this);
        }
        outASubExpr4(node);
    }

    public void inAOtherExpr4(AOtherExpr4 node)
    {
        defaultIn(node);
    }

    public void outAOtherExpr4(AOtherExpr4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOtherExpr4(AOtherExpr4 node)
    {
        inAOtherExpr4(node);
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        outAOtherExpr4(node);
    }

    public void inAMultExpr5(AMultExpr5 node)
    {
        defaultIn(node);
    }

    public void outAMultExpr5(AMultExpr5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultExpr5(AMultExpr5 node)
    {
        inAMultExpr5(node);
        if(node.getEnds() != null)
        {
            node.getEnds().apply(this);
        }
        if(node.getOpMult() != null)
        {
            node.getOpMult().apply(this);
        }
        if(node.getStarts() != null)
        {
            node.getStarts().apply(this);
        }
        outAMultExpr5(node);
    }

    public void inADivExpr5(ADivExpr5 node)
    {
        defaultIn(node);
    }

    public void outADivExpr5(ADivExpr5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExpr5(ADivExpr5 node)
    {
        inADivExpr5(node);
        if(node.getEnds() != null)
        {
            node.getEnds().apply(this);
        }
        if(node.getOpDiv() != null)
        {
            node.getOpDiv().apply(this);
        }
        if(node.getStarts() != null)
        {
            node.getStarts().apply(this);
        }
        outADivExpr5(node);
    }

    public void inAOtherExpr5(AOtherExpr5 node)
    {
        defaultIn(node);
    }

    public void outAOtherExpr5(AOtherExpr5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOtherExpr5(AOtherExpr5 node)
    {
        inAOtherExpr5(node);
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        outAOtherExpr5(node);
    }

    public void inANegExpr6(ANegExpr6 node)
    {
        defaultIn(node);
    }

    public void outANegExpr6(ANegExpr6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegExpr6(ANegExpr6 node)
    {
        inANegExpr6(node);
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        if(node.getOpMinus() != null)
        {
            node.getOpMinus().apply(this);
        }
        outANegExpr6(node);
    }

    public void inAPosExpr6(APosExpr6 node)
    {
        defaultIn(node);
    }

    public void outAPosExpr6(APosExpr6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPosExpr6(APosExpr6 node)
    {
        inAPosExpr6(node);
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        if(node.getOpPlus() != null)
        {
            node.getOpPlus().apply(this);
        }
        outAPosExpr6(node);
    }

    public void inANotExpr6(ANotExpr6 node)
    {
        defaultIn(node);
    }

    public void outANotExpr6(ANotExpr6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotExpr6(ANotExpr6 node)
    {
        inANotExpr6(node);
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        outANotExpr6(node);
    }

    public void inAOtherExpr6(AOtherExpr6 node)
    {
        defaultIn(node);
    }

    public void outAOtherExpr6(AOtherExpr6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOtherExpr6(AOtherExpr6 node)
    {
        inAOtherExpr6(node);
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        outAOtherExpr6(node);
    }

    public void inAIdExpr9(AIdExpr9 node)
    {
        defaultIn(node);
    }

    public void outAIdExpr9(AIdExpr9 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdExpr9(AIdExpr9 node)
    {
        inAIdExpr9(node);
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        outAIdExpr9(node);
    }

    public void inALitExpr9(ALitExpr9 node)
    {
        defaultIn(node);
    }

    public void outALitExpr9(ALitExpr9 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALitExpr9(ALitExpr9 node)
    {
        inALitExpr9(node);
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        outALitExpr9(node);
    }

    public void inAMeExpr9(AMeExpr9 node)
    {
        defaultIn(node);
    }

    public void outAMeExpr9(AMeExpr9 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMeExpr9(AMeExpr9 node)
    {
        inAMeExpr9(node);
        if(node.getMe() != null)
        {
            node.getMe().apply(this);
        }
        outAMeExpr9(node);
    }

    public void inAParExpr9(AParExpr9 node)
    {
        defaultIn(node);
    }

    public void outAParExpr9(AParExpr9 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParExpr9(AParExpr9 node)
    {
        inAParExpr9(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAParExpr9(node);
    }

    public void inANewExpr9(ANewExpr9 node)
    {
        defaultIn(node);
    }

    public void outANewExpr9(ANewExpr9 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANewExpr9(ANewExpr9 node)
    {
        inANewExpr9(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getNew() != null)
        {
            node.getNew().apply(this);
        }
        outANewExpr9(node);
    }

    public void inACallExpr9(ACallExpr9 node)
    {
        defaultIn(node);
    }

    public void outACallExpr9(ACallExpr9 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallExpr9(ACallExpr9 node)
    {
        inACallExpr9(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExprList() != null)
        {
            node.getExprList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getPartObj() != null)
        {
            node.getPartObj().apply(this);
        }
        outACallExpr9(node);
    }

    public void inAArrInxExpr9(AArrInxExpr9 node)
    {
        defaultIn(node);
    }

    public void outAArrInxExpr9(AArrInxExpr9 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrInxExpr9(AArrInxExpr9 node)
    {
        inAArrInxExpr9(node);
        {
            List<PPartArrInx> copy = new ArrayList<PPartArrInx>(node.getPartArrInx());
            Collections.reverse(copy);
            for(PPartArrInx e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getQuart() != null)
        {
            node.getQuart().apply(this);
        }
        outAArrInxExpr9(node);
    }

    public void inAPartArrInx(APartArrInx node)
    {
        defaultIn(node);
    }

    public void outAPartArrInx(APartArrInx node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPartArrInx(APartArrInx node)
    {
        inAPartArrInx(node);
        if(node.getRBrkt() != null)
        {
            node.getRBrkt().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLBrkt() != null)
        {
            node.getLBrkt().apply(this);
        }
        outAPartArrInx(node);
    }

    public void inAIntLit(AIntLit node)
    {
        defaultIn(node);
    }

    public void outAIntLit(AIntLit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntLit(AIntLit node)
    {
        inAIntLit(node);
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        outAIntLit(node);
    }

    public void inAStrLit(AStrLit node)
    {
        defaultIn(node);
    }

    public void outAStrLit(AStrLit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStrLit(AStrLit node)
    {
        inAStrLit(node);
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        outAStrLit(node);
    }

    public void inATrueLit(ATrueLit node)
    {
        defaultIn(node);
    }

    public void outATrueLit(ATrueLit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueLit(ATrueLit node)
    {
        inATrueLit(node);
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        outATrueLit(node);
    }

    public void inAFalseLit(AFalseLit node)
    {
        defaultIn(node);
    }

    public void outAFalseLit(AFalseLit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseLit(AFalseLit node)
    {
        inAFalseLit(node);
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        outAFalseLit(node);
    }

    public void inANullLitLit(ANullLitLit node)
    {
        defaultIn(node);
    }

    public void outANullLitLit(ANullLitLit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANullLitLit(ANullLitLit node)
    {
        inANullLitLit(node);
        if(node.getNull() != null)
        {
            node.getNull().apply(this);
        }
        outANullLitLit(node);
    }
}
