/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.analysis;

import cps450.oodle.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAStart(AStart node);
    void caseACrClassDefinition(ACrClassDefinition node);
    void caseAClassDefinition(AClassDefinition node);
    void caseAInheritsProduction(AInheritsProduction node);
    void caseAVariableDefinition(AVariableDefinition node);
    void caseAEqualsExpression(AEqualsExpression node);
    void caseAColonTypeProduction(AColonTypeProduction node);
    void caseAMethodDefinition(AMethodDefinition node);
    void caseAArgumentList(AArgumentList node);
    void caseAArgumentListTail(AArgumentListTail node);
    void caseAIntTypeProduction(AIntTypeProduction node);
    void caseABooleanTypeProduction(ABooleanTypeProduction node);
    void caseAStringTypeProduction(AStringTypeProduction node);
    void caseACustomTypeProduction(ACustomTypeProduction node);
    void caseACustomArrayTypeProduction(ACustomArrayTypeProduction node);
    void caseAStatementList(AStatementList node);
    void caseAStatementCr(AStatementCr node);
    void caseAAssignmentStatement(AAssignmentStatement node);
    void caseAArrayAssiStatement(AArrayAssiStatement node);
    void caseAIfStatement(AIfStatement node);
    void caseALoopStatement(ALoopStatement node);
    void caseAMethodCalStatement(AMethodCalStatement node);
    void caseAStatementElse(AStatementElse node);
    void caseAStatementNdArrayAssi(AStatementNdArrayAssi node);
    void caseAObjectCall(AObjectCall node);
    void caseAValuesList(AValuesList node);
    void caseAValuesListTail(AValuesListTail node);
    void caseAExpression(AExpression node);
    void caseAOrExpressionLvl6(AOrExpressionLvl6 node);
    void caseAPassExpressionLvl6(APassExpressionLvl6 node);
    void caseAAndExpressionLvl5(AAndExpressionLvl5 node);
    void caseAPassExpressionLvl5(APassExpressionLvl5 node);
    void caseAQtExpressionLvl4(AQtExpressionLvl4 node);
    void caseALtExpressionLvl4(ALtExpressionLvl4 node);
    void caseAEqExpressionLvl4(AEqExpressionLvl4 node);
    void caseAPassExpressionLvl4(APassExpressionLvl4 node);
    void caseAStrConcatExpressionLvl41(AStrConcatExpressionLvl41 node);
    void caseAPassExpressionLvl41(APassExpressionLvl41 node);
    void caseAAddExpressionLvl3(AAddExpressionLvl3 node);
    void caseASubExpressionLvl3(ASubExpressionLvl3 node);
    void caseAPassExpressionLvl3(APassExpressionLvl3 node);
    void caseAMulExpressionLvl2(AMulExpressionLvl2 node);
    void caseADivExpressionLvl2(ADivExpressionLvl2 node);
    void caseAPassExpressionLvl2(APassExpressionLvl2 node);
    void caseANotExpressionLvl1(ANotExpressionLvl1 node);
    void caseANegExpressionLvl1(ANegExpressionLvl1 node);
    void caseAPlusExpressionLvl1(APlusExpressionLvl1 node);
    void caseAPassExpressionLvl1(APassExpressionLvl1 node);
    void caseAArrayExpressionLvl0(AArrayExpressionLvl0 node);
    void caseAMethodCalExpressionLvl0(AMethodCalExpressionLvl0 node);
    void caseAIntExpressionLvl0(AIntExpressionLvl0 node);
    void caseAStringExpressionLvl0(AStringExpressionLvl0 node);
    void caseATrueExpressionLvl0(ATrueExpressionLvl0 node);
    void caseAFalseExpressionLvl0(AFalseExpressionLvl0 node);
    void caseANullExpressionLvl0(ANullExpressionLvl0 node);
    void caseAMeExpressionLvl0(AMeExpressionLvl0 node);
    void caseAIdentifierExpressionLvl0(AIdentifierExpressionLvl0 node);
    void caseANewObjExpressionLvl0(ANewObjExpressionLvl0 node);
    void caseANewArrExpressionLvl0(ANewArrExpressionLvl0 node);
    void caseANewClassExpressionLvl0(ANewClassExpressionLvl0 node);
    void caseAParenExpressionLvl0(AParenExpressionLvl0 node);
    void caseAMethodCallExpr(AMethodCallExpr node);

    void caseTConsumeCrLf(TConsumeCrLf node);
    void caseTWhitespace(TWhitespace node);
    void caseTCr(TCr node);
    void caseTBoolean(TBoolean node);
    void caseTBegin(TBegin node);
    void caseTClasskey(TClasskey node);
    void caseTElse(TElse node);
    void caseTEnd(TEnd node);
    void caseTFalse(TFalse node);
    void caseTFrom(TFrom node);
    void caseTIf(TIf node);
    void caseTInherits(TInherits node);
    void caseTInt(TInt node);
    void caseTIs(TIs node);
    void caseTLoop(TLoop node);
    void caseTMe(TMe node);
    void caseTNew(TNew node);
    void caseTNull(TNull node);
    void caseTStringClass(TStringClass node);
    void caseTThen(TThen node);
    void caseTTrue(TTrue node);
    void caseTWhile(TWhile node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTNot(TNot node);
    void caseTAndOp(TAndOp node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMultiplication(TMultiplication node);
    void caseTDivides(TDivides node);
    void caseTGreaterThan(TGreaterThan node);
    void caseTLessThan(TLessThan node);
    void caseTGteqOp(TGteqOp node);
    void caseTEqOp(TEqOp node);
    void caseTEquals(TEquals node);
    void caseTLeftParen(TLeftParen node);
    void caseTRightParen(TRightParen node);
    void caseTLeftBracket(TLeftBracket node);
    void caseTRightBracket(TRightBracket node);
    void caseTComma(TComma node);
    void caseTSemicolon(TSemicolon node);
    void caseTColon(TColon node);
    void caseTDot(TDot node);
    void caseTComment(TComment node);
    void caseTIdentifier(TIdentifier node);
    void caseTIntegerLiteral(TIntegerLiteral node);
    void caseTStringLiteral(TStringLiteral node);
    void caseTUnterminatedString(TUnterminatedString node);
    void caseTIllegalString(TIllegalString node);
    void caseTEol(TEol node);
    void caseTUnrecognizedChar(TUnrecognizedChar node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
